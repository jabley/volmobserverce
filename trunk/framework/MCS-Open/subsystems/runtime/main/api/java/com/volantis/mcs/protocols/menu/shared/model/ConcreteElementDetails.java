/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2004. 
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.protocols.menu.shared.model;

import com.volantis.mcs.protocols.menu.model.ElementDetails;
import com.volantis.styling.Styles;

/**
 * This class creates a concrete implementation of a representation of the
 * element type, style class and ID information related to the menu entity
 * that uses an instance of an implementation of this class. It also provides
 * access to a {@link Styles} instance populated with the stylistic values
 * which are applicable to the PAPI element which is associated with this entity.
 */
public class ConcreteElementDetails implements ElementDetails {

    /**
     * The element name associated with this entity.  May not be null
     *
     */
    private String elementName;

    /**
     * The ID for this entity. May be null
     */
    private String id;

    /**
     * These Styles are applicable to the PAPI element that is associated with
     * the menu entity using this class. Generated by the StylingEngine, and
     * will not be null.
     */
    private Styles styles;


    /**
     * Initialises a new instance of this class.
     */
    public ConcreteElementDetails() {
        setId(null);
    }

    // JavaDoc inherited
    public Styles getStyles() {
        if (styles == null) {
            throw new IllegalStateException(
                    "styles should never be null");
        }
        return styles;
    }

    /**
     * Sets the styles for this entity.
     *
     * @param styles The styles to use. Must not be null.
     */
    public void setStyles(Styles styles) {
        if (styles == null) {
            throw new IllegalArgumentException(
                    "styles should never be null");
        }
        this.styles = styles;
    }

    // JavaDoc inherited
    public String getId() {
        return id;
    }

    /**
     * Sets the ID for this entity.
     *
     * @param id The id to use, which may be null
     */
    public void setId(String id) {
        this.id = id;
    }

    // JavaDoc inherited
    public String getElementName() {
        // NOTE: had to remove this because shard link menus do not have an
        // element name. 
        // @todo think of something intelligent to say here.
//        if (elementName == null) {
//            throw new IllegalStateException(
//                    "element name should never be null");
//        }
        return elementName;
    }

    /**
     * Sets the element name for this entity.  If the element name provided
     * is null this method will throw an {@link IllegalArgumentException}
     * because that is not valid.
     *
     * @param elementName The element name to use, which may not be null.
     */
    public void setElementName(String elementName) {
        if (elementName == null) {
            throw new IllegalArgumentException("element name cannot be null");
        }
        this.elementName = elementName;
    }

/* Commented out until we resolve VBM:2004040703.
    // JavaDoc inherited
    public boolean equals(Object o) {
        // This is the top level equals method implementation, so check that
        // the object to be compared is of the correct type
        if (this == o) {
            return true;
        } else if (o == null || !(o.getClass().equals(this.getClass()))) {
            return false;
        }

        final ConcreteElementDetails concreteElementDetails = (ConcreteElementDetails) o;

        // Check elementName for equality
        if ((elementName != null &&
                !elementName.equals(concreteElementDetails.elementName)) ||
                (elementName == null &&
                    concreteElementDetails.elementName != null)) {
            return false;
        }

        // The elementName was equal so check id for equality
        if ((id != null && !id.equals(concreteElementDetails.id)) ||
                (id == null && concreteElementDetails.id != null)) {
            return false;
        }

        // Previous fields were equal so check styleClass for equality
        if ((styleClass != null &&
                !styleClass.equals(concreteElementDetails.styleClass)) ||
                (styleClass == null && concreteElementDetails.styleClass != null)) {
            return false;
        }

        // Previous fields were equal so check styles for equality
        if ((styles != null &&
                !styles.equals(concreteElementDetails.styles)) ||
                (styles == null &&
                    concreteElementDetails.styles != null)) {
            return false;
        }

        // Must be equal if it gets to here :-)
        return true;
    }

    // JavaDoc inherited
    public int hashCode() {
        int result;
        result = (elementName != null ? elementName.hashCode() : 0);
        result = 29 * result + (styleClass != null ?
                                styleClass.hashCode() : 0);
        result = 29 * result + (id != null ? id.hashCode() : 0);
        result = 29 * result + (styles != null ?
                                styles.hashCode() : 0);
        return result;
    }
*/
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 30-Aug-05	9353/1	pduffin	VBM:2005081912 Removed style class from MCS Attributes

 27-Jun-05	8888/3	emma	VBM:2005062405 Annotate DOM elements generated from menu model classes with styles

 20-Jun-05	8483/1	emma	VBM:2005052410 Migrate styling to use the new styling support framework (still using CSSEmulator to style underneath)

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/1	ianw	VBM:2004120703 New Build

 13-May-04	4315/1	geoff	VBM:2004051204 Enhance Menu Support: WML Dissection: Integration

 07-Apr-04	3767/1	geoff	VBM:2004040702 Enhance Menu Support: Address issues with model equals and hashcode

 23-Mar-04	3491/1	philws	VBM:2004031912 Make Menu Model conform to updated Architecture

 10-Mar-04	3306/3	claire	VBM:2004022706 Refactoring of menu model test cases

 10-Mar-04	3306/1	claire	VBM:2004022706 Implementation of the menu model

 ===========================================================================
*/
