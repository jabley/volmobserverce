/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2003. 
 * ----------------------------------------------------------------------------
 */
package com.volantis.mcs.wbdom.dissection;

import com.volantis.mcs.dissection.dom.DocumentStats;
import com.volantis.mcs.dissection.dom.OutputDocument;
import com.volantis.mcs.dissection.dom.TextOutputDocument;
import com.volantis.mcs.dom.output.CharacterEncoder;
import com.volantis.mcs.dom.debug.DebugCharacterEncoder;
import com.volantis.mcs.protocols.EncodingWriter;
import com.volantis.mcs.wbsax.WBSAXContentHandler;
import com.volantis.mcs.wbsax.io.WMLProducer;

import java.io.Writer;

/**
 * A WML implementation of {@link WBDOMDissectableDocumentTestAbstract}.
 * <p>
 * This class tests WBDOM with WML output against the generic test 
 * infrastructure provided by the "accurate" dissector.
 * <p>
 * This extends the parent to create a {@link WMLProducer} for text output, 
 * and replaces the parent's binary size information for output size checking
 * with the text sizes.
 */ 
public class WMLWBDOMDissectableDocumentTestCase 
        extends WBDOMDissectableDocumentTestAbstract{

    /**
     * The copyright statement.
     */
    private static String mark = "(c) Volantis Systems Ltd 2003.";

    public WMLWBDOMDissectableDocumentTestCase(String name) {
        super(name);
    }
    
    protected WBSAXContentHandler createProducer(OutputDocument output) {
        // Create a producer for XML.
        Writer writer = ((TextOutputDocument) output).getWriter();
        CharacterEncoder pce = new DebugCharacterEncoder();
        EncodingWriter enc = new EncodingWriter(writer, pce);
        return new WMLProducer(writer, enc);
    }

    protected OutputDocument createOutputDocument() throws Exception {
        return new TextOutputDocument();
    }
    
    // NOTE: The top level abstract test case defines the total cost as the
    // text size as generated by TDOM output. For simple cases, this is the
    // same as generated by WMDOM via WML, apart from the fact that the 
    // XMLProducer does not add a line feed after the XML declaration.
    
    public void checkSimple1(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple1(statistics);
    }

    public void checkSimple2(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple2(statistics);
    }

    public void checkSimple3(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple3(statistics);
    }

    public void checkSimple4(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple4(statistics);
    }

    public void checkSimple5(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple5(statistics);
    }

    public void checkSimple6(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple6(statistics);
    }

    public void checkSimple7(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple7(statistics);
    }

    public void checkSimple8(DocumentStats statistics) throws Exception {
        statistics.outputSize = statistics.totalCost - 1;
        super.checkSimple8(statistics);
    }

    // For documents with shared references, although we could theoretically
    // calculate the exact size by transforming the size with references 
    // defined we already have to the size with references expanded that we 
    // need, it's not worth it. So, I've just hardcoded the sizes.
    
    protected void checkCommon1(DocumentStats statistics) throws Exception {
        statistics.outputSize = 201;
        super.checkCommon1(statistics);
    }

    protected void checkCommon2(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 1029;
        super.checkCommon2(statistics);
    }

    protected void checkCommon3(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 1568;
        super.checkCommon3(statistics);
    }

    protected void checkCommon4(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 1274;
        statistics.outputSize += 64; // adjust for Mimas whitespace handling.
        // It seems strange that we need to adjust the output size up, this
        // is because we already adjusted the total size down 140, and we
        // currently reduce the output size by 140 as well - but thats for
        // the whole document, and we are outputting only one shard so we
        // have to compensate by adding back on again. Really we ought
        // to make the sizing more compatible with dissection, but we 
        // currently only have two tests that actually dissect!!
        super.checkCommon4(statistics);
    }

    protected void checkCommon5(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 94;
        super.checkCommon5(statistics);
    }
    
    protected void checkCommon6(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 1681;
        super.checkCommon6(statistics);
    }

    protected void checkComplex1(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 432;
        super.checkComplex1(statistics);
    }

    protected void checkText1(DocumentStats statistics)
            throws Exception {
        statistics.outputSize = 413;
        statistics.outputSize -= 8; // adjust for Mimas whitespace handling.
        super.checkText1(statistics);
    }
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 01-Sep-05	9375/2	geoff	VBM:2005082301 XDIMECP: clean up protocol creation

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/1	ianw	VBM:2004120703 New Build

 09-Sep-03	1336/1	geoff	VBM:2003090301 Provide support for StringLiteral in WMLC

 25-Jul-03	860/1	geoff	VBM:2003071405 merge from mimas

 25-Jul-03	858/1	geoff	VBM:2003071405 merge from metis; fix dissection test case sizes

 24-Jul-03	807/1	geoff	VBM:2003071405 now with fixed architecture

 10-Jul-03	770/2	geoff	VBM:2003070703 merge from metis, and rename files manually, and fix up sizes for whitespace differences

 10-Jul-03	751/4	geoff	VBM:2003070703 second go at cleaning up WBDOM test cases

 ===========================================================================
*/
