/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * $Header: /src/voyager/com/volantis/mcs/protocols/XHTMLBasic.java,v 1.7 2001/10/30 15:16:05 pduffin Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2002. 
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * ---------    --------------- -----------------------------------------------
 * 31-03-03     Doug            VBM:2003030405 - XMLProcessImpl is a  basic
 *                              implementation of the XMLProcess interface
 * ----------------------------------------------------------------------------
 */

package com.volantis.xml.pipeline.sax;

import org.xml.sax.Attributes;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * A default implementation of an XMLProcess.
 * <p>This class is a default implementation of an XMLProcess that supports
 * the XMLProcess properties and forwards all events to the next process. If
 * there is no next process then it simply consumes the events.</p>
 *
 * @volantis-api-include-in PublicAPI
 * @volantis-api-include-in ProfessionalServicesAPI
 * @volantis-api-include-in InternalAPI
 */
public class XMLProcessImpl implements XMLProcess {

    /**
     * Reference to the next XMLProcess in the pipeline
     */
    protected XMLProcess next;

    /**
     * Reference to the pipeline that this proces may reside in.
     */
    private XMLPipeline pipeline;

    // javadoc inherited
    public XMLProcess getNextProcess() {
        return next;
    }

    // javadoc inherited
    public void setNextProcess(XMLProcess next) {
        this.next = next;
    }

    // javadoc inherited
    public void setPipeline(XMLPipeline pipeline) {
        this.pipeline = pipeline;
    }

    // javadoc inherited
    public XMLPipeline getPipeline() {
        return pipeline;
    }

    // javadoc inherited
    public void release() {
        this.next = null;
        this.pipeline = null;
    }

    // javadoc inherited
    public void startProcess() throws SAXException {
    }

    // javadoc inherited
    public void stopProcess() throws SAXException {
    }

    /**
     * Get the pipeline context.
     * @return The pipeline context, or null if this process is not in a
     * pipeline.
     */
    public XMLPipelineContext getPipelineContext() {
        return pipeline.getPipelineContext();
    }

    /**
     * This method returns the XMLProcess that will consume the sax events
     * generated by this process. This is the process registered as the next
     * process. Subclasses may want to override this method if they need to
     * behave differently
     * @return the XMLProcess that will consume the events generated or null
     * if no process is set registered to receive this process output.
     *
     * @volantis-api-exclude-from PublicAPI
     * @volantis-api-exclude-from ProfessionalServicesAPI
     */
    protected XMLProcess getConsumerProcess() {
        return getNextProcess();
    }

    // ========================================================================
    // Implementation of the ContentHandler interface
    // ========================================================================

    // Javadoc inherited
    public void characters(char ch[],
                           int start,
                           int length) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.characters(ch, start, length);
        }
    }

    // Javadoc inherited
    public void endElement(String namespaceURI,
                           String localName,
                           String qName) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.endElement(namespaceURI, localName, qName);
        }
    }

    // Javadoc inherited
    public void endPrefixMapping(String prefix) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.endPrefixMapping(prefix);
        }
    }

    // Javadoc inherited
    public void ignorableWhitespace(char ch[],
                                    int start,
                                    int length) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.ignorableWhitespace(ch, start, length);
        }
    }

    // Javadoc inherited
    public void processingInstruction(String target, String data)
            throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.processingInstruction(target, data);
        }
    }

    /**
     * @throws UnsupportedOperationException If it is invoked.
     * @see XMLProcess
     */
    public void setDocumentLocator(Locator locator) {
        throw new UnsupportedOperationException(
                "setDocumentLocator() must not be called within the pipeline");
    }

    /**
     * @throws UnsupportedOperationException If it is invoked.
     * @see XMLProcess
     */
    public void skippedEntity(String s) throws SAXException {
        throw new UnsupportedOperationException(
                "skipppedEntity() must not be called within the pipeline");
    }

    /**
     * @throws UnsupportedOperationException If it is invoked.
     * @see XMLProcess
     */
    public void startDocument() throws SAXException {
        throw new UnsupportedOperationException(
                "startDocument() must not be called within the pipeline");
    }

    /**
     * @throws UnsupportedOperationException If it is invoked.
     * @see XMLProcess
     */
    public void endDocument() throws SAXException {
        throw new UnsupportedOperationException(
                "endDocument() must not be called within the pipeline");
    }

    // Javadoc inherited
    public void startElement(String namespaceURI,
                             String localName,
                             String qName,
                             Attributes atts) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.startElement(namespaceURI, localName, qName, atts);
        }
    }

    // Javadoc inherited
    public void startPrefixMapping(String prefix, String uri)
            throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.startPrefixMapping(prefix, uri);
        }
    }

    // ========================================================================
    // Implementation of the ErrorHandler interface
    // ========================================================================

    /**
     * Reports an error by passing the exception to the next
     * process in the pipeline. If there is no next process then nothing
     * happens as the error is consumed.
     * @param exception the exception that represents the error being reported
     * @throws SAXException thrown if the error being passed in cannot be
     * handled.
     */
    public void error(SAXParseException exception) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.error(exception);
        }
    }

    /**
     * Reports a fatal error by passing the exception to the next
     * process in the pipeline. If there is no next process then the exception
     * that was passed in is thrown.
     * @param exception the exception that represents the error being reported
     * @throws SAXException thrown if the error being passed in cannot be
     * handled.
     */
    public void fatalError(SAXParseException exception) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.fatalError(exception);
        } else {
            throw exception;
        }
    }

    /**
     * Reports a warning by passing the exception to the next
     * process in the pipeline. If there is no next process then nothing
     * happens as the error is consumed.
     * @param exception the exception that represents the error being reported
     * @throws SAXException thrown if the error being passed in cannot be
     * handled.
     */
    public void warning(SAXParseException exception) throws SAXException {
        XMLProcess consumer = getConsumerProcess();
        if (null != consumer) {
            consumer.warning(exception);
        }
    }
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 20-Oct-04	5438/3	philws	VBM:2004082706 Reformat production pipeline code

 20-Oct-04	5438/1	philws	VBM:2004082706 Transfer Pipeline source into MCS

 30-Jan-04	531/1	adrian	VBM:2004011905 added context updating and context annotation support to pipeline processes

 11-Aug-03	275/1	doug	VBM:2003073104 Provided default implementation of DynamicProcess interface

 18-Jul-03	213/4	doug	VBM:2003071615 Refactored XMLProcess interface

 18-Jul-03	213/2	doug	VBM:2003071615 Refactored XMLProcess interface

 ===========================================================================
*/
