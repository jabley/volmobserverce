/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2004. 
 * ----------------------------------------------------------------------------
 */

package com.volantis.mps.application;
import java.io.*;
import com.volantis.mcs.utilities.VolantisVersion;

public class MPSVersion {
    /**
     * The copyright notice.
     */
    private static final String mark =
        "(c) Volantis Systems Ltd 2004. ";

    /**
     * The build date string.
     */
    private static final String buildDate = "@build.date@";

    /**
     * The build name string.
     */
    private static final String buildName = "@build.name@";

    /**
     * Part of the current version number.
     */
    private static final int versionMajor = @build.version.major@;

    /**
     * Part of the current version number.
     */
    private static final int versionMinor = @build.version.minor@;

    /**
     * Part of the current version number.
     */
    private static final int versionRevision = @build.version.revision@;

    /**
     * Part of the current version number.
     */
    private static final String versionPatchLevel = "@build.version.patchlevel@";

    /**
     * The product name.
     */
    private static final String PRODUCT_NAME = "@build.release.name@";

    /**
     * Part of the version number for the minimum required version of MCS.
     */
    private static final int MCSMinimumVersionMajor = @build.version.mcs.major@;

    /**
     * Part of the version number for the minimum required version of MCS.
     */
    private static final int MCSMinimumVersionMinor = @build.version.mcs.minor@;

    /**
     * Part of the version number for the minimum required version of MCS.
     */
    private static final int MCSMinimumVersionRevision = @build.version.mcs.revision@;

    /**
     * The value obtained from an available MCS instance.
     */
    private static String MCSVolantisVersion = "";

    /**
     * The value obtained from an available MCS instance.
     */
    private static int MCSVersionMajor = -1;

    /**
     * The value obtained from an available MCS instance.
     */
    private static int MCSVersionMinor = -1;

    /**
     * The value obtained from an available MCS instance.
     */
    private static int MCSVersionRevision = -1;

    /**
     * A placeholder message for use when there is no available MCS instance.
     */
    private static final String UNKNOWN_VERSION =
        "Build Version: Not Detected";

    /**
     * Ensures that the MCS version information is initialized.
     */
    private static void initialize() {
        // If MCSVersion cannot be got, the MCS major minor and revision
        // are zero else major minor and revision are obtained.
        try { 
           MCSVolantisVersion = VolantisVersion.getVolantisVersion(); 
           MCSVersionMajor = VolantisVersion.getVolantisVersionMajor();
           MCSVersionMinor = VolantisVersion.getVolantisVersionMinor();
           MCSVersionRevision = VolantisVersion.getVolantisVersionRevision();
        } catch (NoSuchMethodError e) { 
           MCSVolantisVersion = UNKNOWN_VERSION;
           MCSVersionMajor = 0;
           MCSVersionMinor = 0;
           MCSVersionRevision = 0;
           System.err.println("Could not obtain MCS Version: " + e);
        }
     }

    /**
     * Reformat major minor and revision into a single integer.
     * Usable for checking minimum versions etc.
     * This uses the same algorithm as Mandate.
     *
     * @param major The major revision number
     * @param minor The minor revision number
     * @param revision The revision
     */
    private static int getFullVersion(int major, int minor, int revision) {
        return (major * 1000000) + (minor * 1000) + revision;
    }

    /**
     * Returns true if the MCS version detected is valid against the MPS
     * version.
     *
     * @return true if the MCS version is compatible with this MPS version
     */
    public static boolean isMCSValidVersion() {
        initialize();

        int fullMCSVersion = getFullVersion(MCSVersionMajor,
                                            MCSVersionMinor,
                                            MCSVersionRevision);
        int fullMCSMinVersion = getFullVersion(MCSMinimumVersionMajor,
                                               MCSMinimumVersionMinor,
                                               MCSMinimumVersionRevision);
        return (fullMCSVersion >= fullMCSMinVersion);
    }

    /**
     * Returns a string stating the various versions required and found.
     *
     * @return a string stating the various versions required and found
     */
    public static String checkVersionMessage() {
        initialize();

        return new StringBuffer(PRODUCT_NAME).append(' ').
                append(getMPSVersion()).append(" requires MCS ").
                append(getMCSMinimumVersion()).append(" (have ").
                append(MCSVolantisVersion).append(')').toString();
    }

    /**
     * Returns the MPS copyright notice.
     *
     * @return the MPS copyright notice
     */
    public static String getMPSCopyright() {
        return(mark);
    }
       
    /**
     * Returns the MPS build date string.
     *
     * @return a string describing the MPS build date
     */
    public static String getMPSBuildDate() {
        return(PRODUCT_NAME + " Build Date: " + buildDate);
    }

    /**
     * Returns the MPS build name string.
     *
     * @return a string of the MPS build name
     */
    public static String getMPSBuildName() {
        return(PRODUCT_NAME + " Build Name: " + buildName);
    }

    /**
     * Returns the MPS build version string. The revision is omitted if zero.
     *
     * @return a string of the MPS build version
     */
    public static String getMPSVersion() {
        StringBuffer sb = new StringBuffer(PRODUCT_NAME + " Build Version: ");
        sb.append(versionMajor).append('.').append(versionMinor);

        if (versionRevision > 0) {
            sb.append('.').append(versionRevision);
        }

        return sb.toString();
    }
    
    /**
     * Returns a string describing the minimum required MCS build version.
     *
     * @return a string of the minimum required MCS build version
     */
    public static String getMCSMinimumVersion() {
        StringBuffer sb = new StringBuffer("MCS Minimum Build Version: ");
        sb.append(MCSMinimumVersionMajor).append('.').append(MCSMinimumVersionMinor);

        if (MCSMinimumVersionRevision > 0) {
            sb.append('.').append(MCSMinimumVersionRevision);
        }

        return sb.toString();
    }
    
    /**
     * Returns the specified part of the minimum required MCS build version.
     *
     * @return the specified part of the minimum required MCS build version
     */
    public static int getMCSMinimumVersionMajor() {
        return MCSMinimumVersionMajor;
    }
    
    /**
     * Returns the specified part of the minimum required MCS build version.
     *
     * @return the specified part of the minimum required MCS build version
     */
    public static int getMCSMinimumVersionMinor() {
        return MCSMinimumVersionMinor;
    }
    
    /**
     * Returns the specified part of the minimum required MCS build version.
     *
     * @return the specified part of the minimum required MCS build version
     */
    public static int getMCSMinimumVersionRevision() {
        return MCSMinimumVersionRevision;
    }

    /**
     * Returns the specified part of the MPS build version.
     *
     * @return the specified part of the MPS build version
     */
    public static int getMPSVersionMajor() {
        return versionMajor;
    }
    
    /**
     * Returns the specified part of the MPS build version.
     *
     * @return the specified part of the MPS build version
     */
    public static int getMPSVersionMinor() {
        return versionMinor;
    }
    
    /**
     * Returns the specified part of the MPS build version.
     *
     * @return the specified part of the MPS build version
     */
    public static int getMPSVersionRevision() {
        return versionRevision;
    }
    
    /**
     * Returns the specified part of the MPS build version.
     *
     * @return the specified part of the MPS build version
     */
    public static String getMPSVersionPatchLevel() {
        return versionPatchLevel;
    }

    /**
     * Outputs the version information to standard out.
     */
    public static void displayVersion() {
        System.out.println(getMPSBuildName());
        System.out.println(getMPSVersion() + " "
        + getMPSVersionPatchLevel());
        System.out.println(getMPSBuildDate());
        System.out.println(getMPSCopyright());
    }

    /**
     * Permits the version information to be displayed from the command line.
     */
    public static void main(String args[]) {
        displayVersion();
    }
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 24-Nov-04	236/2	philws	VBM:2004111209 Re-worked MPS to use new build

 ===========================================================================
*/
