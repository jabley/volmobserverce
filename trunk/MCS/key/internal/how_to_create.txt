This document describes how to generate a valid client.keystore and a valid
server.keystore file for https (Secure Sockets) used by the volantis.net tool.
Also included here are the modifications to Tomcat configuration to make it
work with https. Finally the java system properties necessary to allow 
volantis.net to operate through a proxy are listed.

The synopsis (if that's the right word) is that in order to make https work,
the client needs a key to describe itself and so does the server. In order
that the client knows to trust the server and vice versa, the client keystore
must contain the server key (or certificate) and the server keystore must
contain the client key (or certificate).


Keys and keystores are generated, modified and viewed using the keytool tool.
Entering keytool with no arguments provides usage info.


1. Generate a server key

The server key is specific to the server that the updateclient is running on.
The following example shows a server key for the host "bluemarlin". The
password paramaters are required for viewing, exporting and modifying the
key and/or keystore. Alias can be anything provided there are no duplicates
in the key store. The keystore parameter is the name of the keystore for this
key. If the file does not exist, it will be created. The validity parameter
is the number of days that the key is valid for.

e.g.

keytool -genkey -alias tomcat-sv -dname "CN=bluemarlin, OU=Development, O=Volantis, L=Guildford, S=Surrey, C=UK" -keyalg RSA -keypass volantis -storepass volantis -keystore ./server.keystore -validity 9999


2. Export the server key

In order to put the server key into the client key store it must be exported
to a file. The following command exports the key generated in the previous
example to the file server.cer.

e.g. 

keytool -export -alias tomcat-sv -storepass volantis -file server.cer -keystore server.keystore

3. Generate a client key

The client key is not server specific and is generated in the same way as
the server key except the hostname is replaced by "Client". 
e.g.

keytool -genkey -alias client -dname "CN=Client, OU=Development, O=Volantis, L=Guildford, S=Surrey, C=UK" -keyalg RSA -keypass volantis -storepass volantis -keystore ~/work/voyager/client.keystore -validity 9999

The client keystore file generated by this example has been placed into cvs.

4. Export the client key

Export of the client key is done the same way as export of the server key.

e.g.

keytool -export -alias client -storepass volantis -file ~/work/voyager/client.cer -keystore ~/work/voyager/client.keystore

The client key exported by this example has been placed into cvs.

5. Import the certificates

We need to import the client key into the server key store and the server key 
into the client keystore.

e.g.

Import the server cert into the client keystore:

keytool -import -v -trustcacerts -alias tomcat-sv -file server.cer -keystore ~/work/voyager/client.keystore -keypass volantis -storepass volantis


Import the client cert into the server keystore:

keytool -import -v -trustcacerts -alias client -file  ~/work/voyager/client.cer -keystore ./server.keystore -keypass volantis -storepass volantis


6. Configuring Tomcat

Uncomment the ssl section of server.xml in the Connectors section. The section
should look like this after a couple of lines are added:

        <Connector className="org.apache.tomcat.service.PoolTcpConnector">
            <Parameter name="handler"
                value="org.apache.tomcat.service.http.HttpConnectionHandler"/>
            <Parameter name="port"
                value="8443"/>
            <Parameter name="socketFactory"
                value="org.apache.tomcat.net.SSLSocketFactory" />
            <Parameter name="keystore"
                value="/opt/jakarta-tomcat/conf/server.keystore" />
            <Parameter name="keypass" value="volantis"/>
            <Parameter name="clientAuth" value="false"/>
         </Connector>

Update wrapper.properties so that wrapper.cmd_line looks like this:

wrapper.cmd_line=$(wrapper.javabin) -Djava.protocol.handler.pkgs=com.sun.net.ssl.internal.www.protocol -classpath $(wrapper.class_path) $(wrapper.startup_class) -config $(wrapper.server_xml) -home $(wrapper.tomcat_home)

Note that if you are using an IBM JDK then you should use the following setting in place of the one above:

-Djava.protocol.handler.pkgs=com.ibm.net.ssl.internal.www.protocol


7. Java SSL Proxy System properties.

If the updateclient is to operate through a proxy, then the following system
properties should be set:

https.proxyHost="<proxy host>"
https.proxyPort="<https port>" (this port is the same as the one specified in
the UpdateClient.properties file.

#
# ===========================================================================
# Change History
# ===========================================================================
# $Log$

# 05-May-05	8022/3	pcameron	VBM:2005042704 Removed non-ascii characters

# 04-May-05	8022/1	pcameron	VBM:2005042704 Fixed configuration of SSL providers

# 04-May-05	7988/2	pcameron	VBM:2005042704 Fixed configuration of SSL providers

# 11-Jan-05	6635/1	philws	VBM:2004121005 Fix build information messages to allow localization

# ===========================================================================
#
