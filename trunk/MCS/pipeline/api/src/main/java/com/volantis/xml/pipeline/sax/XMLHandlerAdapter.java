/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * $Header: /src/voyager/com/volantis/mcs/protocols/XHTMLBasic.java,v 1.7 2001/10/30 15:16:05 pduffin Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2002. 
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * ---------    --------------- -----------------------------------------------
 * 31-03-03     Doug            VBM:2003030405 - Created. XMLHandlerAdapter
 *                              allows the sax event stream generated by an
 *                              XMLProcess to be split into seperate streams.
 * ----------------------------------------------------------------------------
 */
package com.volantis.xml.pipeline.sax;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * An XMLProcess that will forward events to individual handlers instead of its
 * next process.
 *
 * <p>This class allows clients to split these events and forward them to
 * individual handlers, That is clients can provide an explicit ContentHandler
 * and ErrorHandler. If the appropriate handler has not been set for a given
 * event then the event will be consumed by this process.</p>
 *
 * <p>This process can be added to the pipeline, it just will not forward any
 * events to the next process.</p>
 */
public class XMLHandlerAdapter
        extends XMLProcessImpl {

    /**
     * The ContentHandler that this process will forward SAX Content events to
     */
    private ContentHandler contentHandler;

    /**
     * The ErrorHandler that this process will forward SAX Error events to
     */
    private ErrorHandler errorHandler;

    /**
     * Get the ContentHandler that has been set to handle the SAX content
     * events that this process receives
     * @return the ContentHandler or null if one has not been set
     */
    public ContentHandler getContentHandler() {
        return contentHandler;
    }

    /**
     * Set the ContentHandler that will handle SAX content events that this
     * process receives.
     * @param contentHandler the ContentHandler
     */
    public void setContentHandler(ContentHandler contentHandler) {
        this.contentHandler = contentHandler;
    }

    /**
     * Get the ErrorHandler that has been set to handle SAX error events that
     * this process receives
     * @return the ErrorHandler or null if one has not been set.
     */
    public ErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Set the error that will handle the SAX Error events that this process
     * receives
     * @param errorHandler the ErrorHandler
     */
    public void setErrorHandler(ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    // javadoc inherited
    public void release() {
        // do nothing as this process simply directs the sax event output
        // to seperate handlers
    }

    // javadoc inherited
    public void startProcess() throws SAXException {
        // do nothing as this process simply directs the sax event output
        // to seperate handlers
    }

    // javadoc inherited
    public void stopProcess() throws SAXException {
        // do nothing as this process simply directs the sax event output
        // to seperate handlers
    }

    //=========================================================================
    // ContentHandler implementation
    //=========================================================================

    // javadoc inherited from ContentHandler interface
    public void characters(char[] ch, int start, int length)
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.characters(ch, start, length);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void endDocument() throws SAXException {
        if (null != contentHandler) {
            contentHandler.endDocument();
        }
    }

    // javadoc inherited from ContentHandler interface
    public void endElement(String namespaceURI,
                           String localName,
                           String qName) throws SAXException {
        if (null != contentHandler) {
            contentHandler.endElement(namespaceURI, localName, qName);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void endPrefixMapping(String prefix) throws SAXException {
        if (null != contentHandler) {
            contentHandler.endPrefixMapping(prefix);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void ignorableWhitespace(char[] ch, int start, int length)
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.ignorableWhitespace(ch, start, length);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void processingInstruction(String target, String data)
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.processingInstruction(target, data);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void setDocumentLocator(Locator locator) {
        if (null != contentHandler) {
            contentHandler.setDocumentLocator(locator);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void skippedEntity(String name)
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.skippedEntity(name);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void startDocument()
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.startDocument();
        }
    }

    // javadoc inherited from ContentHandler interface
    public void startElement(String namespaceURI,
                             String localName,
                             String qName,
                             Attributes atts) throws SAXException {
        if (null != contentHandler) {
            contentHandler.startElement(namespaceURI, localName, qName, atts);
        }
    }

    // javadoc inherited from ContentHandler interface
    public void startPrefixMapping(String prefix, String uri)
            throws SAXException {
        if (null != contentHandler) {
            contentHandler.startPrefixMapping(prefix, uri);
        }
    }

    //=========================================================================
    // ErrorHandler implementation
    //=========================================================================

    // javadoc inherited from ErrorHandler interface
    public void error(SAXParseException exception) throws SAXException {
        if (null != errorHandler) {
            errorHandler.error(exception);
        }
    }

    // javadoc inherited from ErrorHandler interface
    public void fatalError(SAXParseException exception) throws SAXException {
        if (null != errorHandler) {
            errorHandler.fatalError(exception);
        } else {
            throw exception;
        }
    }

    // javadoc inherited from ErrorHandler interface
    public void warning(SAXParseException exception) throws SAXException {
        if (null != errorHandler) {
            errorHandler.warning(exception);
        }
    }
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 20-Oct-04	5438/3	philws	VBM:2004082706 Reformat production pipeline code

 20-Oct-04	5438/1	philws	VBM:2004082706 Transfer Pipeline source into MCS

 18-Jul-03	213/2	doug	VBM:2003071615 Refactored XMLProcess interface

 ===========================================================================
*/
