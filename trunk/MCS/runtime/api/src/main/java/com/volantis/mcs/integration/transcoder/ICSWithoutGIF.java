/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2004. 
 * ----------------------------------------------------------------------------
 */
package com.volantis.mcs.integration.transcoder;

import com.volantis.mcs.context.MarinerRequestContext;
import com.volantis.mcs.integration.TranscodingException;
import com.volantis.mcs.integration.NativeURLParameterProvider;
import com.volantis.mcs.integration.TranscoderURLParameterProvider;
import com.volantis.synergetics.log.LogDispatcher;
import com.volantis.mcs.localization.LocalizationFactory;
import com.volantis.synergetics.localization.ExceptionLocalizer;

/**
 * This specialist transcoder permits MCS to invoke the ICS transcoder in
 * native mode (where ICS accepts ICS parameters) but GIF targeted images are
 * not supported.
 * <p>
 * This plugin will run against an ICS running under JDK 1.3 (and without Image
 * IO Tools) as is does not request GIFs and thus does not require ICS to
 * support writing GIFs.
 */
public class ICSWithoutGIF extends ICSWithGIF {

    /**
     * The copyright statement.
     */
    private static String mark = "(c) Volantis Systems Ltd 2004.";

    /**
     * Used for logging
     */
    private static final LogDispatcher logger = 
            LocalizationFactory.createLogger(ICSWithoutGIF.class);

    /**
     * Used to retrieve localized exception messages.
     */
    private static final ExceptionLocalizer exceptionLocalizer =
                LocalizationFactory.createExceptionLocalizer(ICSWithoutGIF.class);

    /**
     * Initializes the new instance.
     */
    public ICSWithoutGIF() {
        this(NativeURLParameterProvider.SINGLETON);
    }

    /**
     * Initializes the new instance.
     *
     * @param transcoderURLParameterProvider the TranscoderURLParameterProvider
     * that will provide the right parameter names for urls generated by this
     * transcoder.
     */
    protected ICSWithoutGIF(TranscoderURLParameterProvider transcoderURLParameterProvider) {
        super(transcoderURLParameterProvider);
    }

    /**
     * If a GIF targeted image is requested by the given ruleValue (GIF output
     * is not supported by the ICS transcoder), then an alternative rule will
     * be generated, based on the device capabilities.
     */
    protected String ruleToBeApplied(String ruleValue,
                                 MarinerRequestContext context)
        throws TranscodingException {

        String result = ruleValue;

        if (ruleValue.charAt(TARGET_OFFSET) == GIF) {
            // An alternative rule must be applied. Firstly, see if the device
            // supports PNG images
            // @todo later should this be "naughty" and access the internal API InternalDevice#supportsImageEncoding method?
            String pngInPage = context.getDevicePolicyValue("pnginpage");
            boolean supportsPNG = "true".equalsIgnoreCase(pngInPage);
            StringBuffer rule = new StringBuffer(ruleValue);

            if (supportsPNG) {
                // Change the target image type part of the rule with PNG
                rule.setCharAt(TARGET_OFFSET, PNG);
            } else {
                // PNG is not supported, so try WBMP
                // @todo later should this be "naughty" and access the internal API InternalDevice#supportsImageEncoding method?
                String wbmpInPage = context.getDevicePolicyValue("wbmpinpage");
                boolean supportsWBMP = "true".equalsIgnoreCase(wbmpInPage);

                if (supportsWBMP) {
                    // The only rule we can use instead is...
                    rule.replace(0, rule.length(), MONO_WBMP);
                } else {
                    // Neither PNG nor WBMP is supported so we'll have to
                    // throw a wobbler
                    logger.error("gif-rule-no-alternative", new Object[]{ruleValue});                    
                    throw new TranscodingException(exceptionLocalizer.format(
                                "gif-rule-no-alternative-2",
                                new Object[]{ruleValue,
                                             context.getDeviceName()}));
                }
            }

            result = rule.toString();

            if (logger.isDebugEnabled()) {
                logger.debug("Rule " + ruleValue + " has been switched to " +
                             "the alternative rule " + result);
            }
        }

        return result;
    }

}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 18-Jan-05	6705/1	allan	VBM:2005011708 Remove the height from the width parameter

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/1	ianw	VBM:2004120703 New Build

 29-Nov-04	6232/5	doug	VBM:2004111702 Refactored Logging framework

 21-Sep-04	5559/1	geoff	VBM:2004091506 Support GIF as transcoded image type in MCS and ICS

 ===========================================================================
*/
