<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<!-- ==========================================================================
 ! $Header: /cvs/architecture/architecture/xml-schema/marlin/src/marlin-sql-driver.xsd,v 1.1 2003/11/21 10:34:13 pduffin Exp $
 ! ============================================================================
 ! (c) Volantis Systems Ltd 2003. 
 ! ============================================================================
 ! Change History:
 !
 ! Date         Who             Description
 ! =========    =============== ===============================================
 ! 23-Jun-03    Paul            R752 Created. Defines the structure of the
 !                              SQL driver markup.
 ! ======================================================================== -->
<!--
 !
 ! ****************************************************************************
 ! This file is owned by Architecture and can only be changed by a member of
 ! that group.
 ! ****************************************************************************
 !
 !-->
<xs:schema targetNamespace="http://www.volantis.com/xmlns/marlin-sql-driver" xmlns:mdc="http://www.volantis.com/xmlns/marlin-driver-conditioners" xmlns:pipeline="http://www.volantis.com/xmlns/marlin-pipeline" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.volantis.com/xmlns/marlin-sql-driver" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <xs:import namespace="http://www.volantis.com/xmlns/marlin-pipeline" schemaLocation="marlin-pipeline-core.xsd"/>
    <xs:import namespace="http://www.volantis.com/xmlns/marlin-driver-conditioners" schemaLocation="marlin-driver-conditioners.xsd"/>
    <xs:annotation>
        <xs:documentation>This defines some generally useful pipeline markup.</xs:documentation>
    </xs:annotation>
    <!--
     ! ************************************************************************
     !         Definitions of Element Groups
     ! ************************************************************************
     !-->
    <!--SQL Operations-->
    <xs:simpleType name="DataSourceNameType">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="TransactionIDType">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:attributeGroup name="OperationAttributes">
        <xs:attribute name="sql" type="xs:string" use="required"/>
        <xs:attribute name="dataSource" type="DataSourceNameType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the data source that this operation should connect to.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="transaction" type="TransactionIDType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the identity of the enclosing transaction to which this operation belongs.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="query" substitutionGroup="pipeline:BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Encapulates an SQL query.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:group ref="Parameters"/>
                </xs:sequence>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="column"/>
                </xs:sequence>
            </xs:sequence>
            <xs:attributeGroup ref="OperationAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="column">
        <xs:annotation>
            <xs:documentation>Allows author to specify meta information about the column that affects the result.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0">
                <xs:element ref="mdc:BaseDriverConditioner"/>
            </xs:choice>
            <xs:attribute name="name" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="modify" substitutionGroup="pipeline:BasePipelineOperationElement">
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:group ref="Parameters"/>
            </xs:sequence>
            <xs:attributeGroup ref="OperationAttributes"/>
        </xs:complexType>
    </xs:element>
    <!--Transaction-->
    <xs:element name="transaction" substitutionGroup="pipeline:BasePipelineOperationElement">
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:group ref="pipeline:PipelineOperation" minOccurs="0" maxOccurs="unbounded"/>
                <xs:any namespace="##any"/>
            </xs:choice>
            <xs:attribute name="dataSource" type="DataSourceNameType" use="required"/>
            <xs:attribute name="id" type="TransactionIDType" use="required"/>
        </xs:complexType>
    </xs:element>
    <!--Parameters-->
    <xs:group name="Parameters">
        <xs:annotation>
            <xs:documentation>The group of elements used to specify the value of a query parameter.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="decimal"/>
            <xs:element ref="boolean"/>
            <xs:element ref="date"/>
            <xs:element ref="double"/>
            <xs:element ref="float"/>
            <xs:element ref="int"/>
            <xs:element ref="long"/>
            <xs:element ref="string"/>
            <xs:element ref="time"/>
            <xs:element ref="timestamp"/>
        </xs:choice>
    </xs:group>
    <!--Typed expression types-->
    <xs:simpleType name="MarinerExpression">
        <xs:annotation>
            <xs:documentation>Simple type which represents a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\{.*\}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="BooleanExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a boolean, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:boolean"/>
    </xs:simpleType>
    <xs:simpleType name="DateExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a date, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:date"/>
    </xs:simpleType>
    <xs:simpleType name="DecimalExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a decimal, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:decimal"/>
    </xs:simpleType>
    <xs:simpleType name="DoubleExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a double, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:double"/>
    </xs:simpleType>
    <xs:simpleType name="FloatExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a float, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:float"/>
    </xs:simpleType>
    <xs:simpleType name="IntExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a int, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:int"/>
    </xs:simpleType>
    <xs:simpleType name="LongExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a long, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:long"/>
    </xs:simpleType>
    <xs:simpleType name="StringExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a string, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="TimeExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a time, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:time"/>
    </xs:simpleType>
    <xs:simpleType name="TimestampExpression">
        <xs:annotation>
            <xs:documentation>Type that can be either a timestamp, or a mariner expression.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="MarinerExpression xs:dateTime"/>
    </xs:simpleType>
    <!--Parameter Types-->
    <xs:element name="boolean">
        <xs:annotation>
            <xs:documentation>A boolean value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="BooleanExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="date">
        <xs:annotation>
            <xs:documentation>A date value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="DateExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="decimal">
        <xs:annotation>
            <xs:documentation>A decimal value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="DecimalExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="double">
        <xs:annotation>
            <xs:documentation>A double value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="DoubleExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="float">
        <xs:annotation>
            <xs:documentation>A float value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="FloatExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="int">
        <xs:annotation>
            <xs:documentation>An int value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="IntExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="long">
        <xs:annotation>
            <xs:documentation>A long value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="LongExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="string">
        <xs:annotation>
            <xs:documentation>A string value.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:complexContent mixed="true">
                <xs:extension base="pipeline:MixedPipelineOperation">
                    <xs:attribute name="value" type="StringExpression" use="optional"/>
                    <xs:attribute name="whitespace" use="optional" default="trim">
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="trim"/>
                                <xs:enumeration value="preserve"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="time">
        <xs:annotation>
            <xs:documentation>A time value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="TimeExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="timestamp">
        <xs:annotation>
            <xs:documentation>A timestamp value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attribute name="value" type="TimestampExpression" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
</xs:schema>
