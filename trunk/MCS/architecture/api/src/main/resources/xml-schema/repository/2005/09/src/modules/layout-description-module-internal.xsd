<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by Zoe Jones (Volantis) -->
<!--W3C Schema generated by XML Spy v4.2 U (http://www.xmlspy.com)-->
<!-- ==========================================================================
 ! $Header: 
 ! ============================================================================
 ! (c) Volantis Systems Ltd 2003. 
 ! ============================================================================
 ! Change History:
 !
 ! Date         Who             Description
 ! =========    =============== ===============================================
 ! 12-Sep-03    Rhys            Create the file
 ! ======================================================================== -->
<!--
 !
 ! ***************************************************************************************************
 ! This file is owned by Architecture and can only be changed by a member of
 ! that group.
 !
 ! This is the internal description of the Mariner markup language. It
 ! includes the external definition of the language together with
 ! embellishments used in generation of some of the classes that implement it.
 ! This form of the schema is used to create the external form in addition to
 ! a number of other definitions and source code used in creation and
 ! documentation of the product.
 !NOTE: Comments within the xs:schema element are preserved in the external version
 ! ***************************************************************************************************
 !
 !-->
<?xml-stylesheet type="text/xsl" href="CreateExternalSchema.xsl"?>
<xs:schema xmlns:lpdm="http://www.volantis.com/xmlns/2005/09/marlin-lpdm" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <!--
     ! ****************************************************************************************************************************
     ! Schema Name:  Marlin Layout Definition Module
     ! Purpose: Define the XML representation of replies received by a Mariner repository from remote repositories
     ! ****************************************************************************************************************************
     !-->
    <!--
     ! ************************************************************************
     !         Imports and Inclusions
     ! ************************************************************************
     !-->
    <xs:include schemaLocation="core-module-internal.xsd"/>
    <xs:include schemaLocation="common-layout-theme-types-internal.xsd"/>
    <!--
     ! ************************************************************************
     !         Definitions of Simple Types
     ! ************************************************************************
     !-->
    <xs:simpleType name="FormFragmentLinkPositionType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="before"/>
            <xs:enumeration value="after"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LiteralTextType">
        <xs:restriction base="xs:string">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PixelsOrPercentType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="pixels"/>
            <xs:enumeration value="percent"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PixelsOnlyType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="pixels"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="RGBOrColorNameType">
        <xs:union memberTypes="RGBColorType ColorNames"/>
    </xs:simpleType>
    <xs:simpleType name="SMIL20-FullClockValueType">
        <xs:annotation>
            <xs:documentation>Represents a Full-clock-value as defined in the SMIL 2.0 Timing and Synchronization Module, e.g. Hours ":" Minutes ":" Seconds ("." Fraction)?. Both Minutes and Seconds must be in the range 0 to 59 inclusive.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[0-9]+:[0-5][0-9]:[0-5][0-9](\.[0-9]+)?"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SMIL20-PartialClockValueType">
        <xs:annotation>
            <xs:documentation>Represents a Partial-clock-value as defined in the SMIL 2.0 Timing and Synchronization Module. e.g. Minutes ":" Seconds ("." Fraction)?. Both Minutes and Seconds must be in the range 0 to 59 inclusive.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[0-5][0-9]:[0-5][0-9](\.[0-9]+)?"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SMIL20-TimecountType">
        <xs:annotation>
            <xs:documentation>Represents a Timecount-value as defined in the SMIL 2.0 Timing and Synchronization Module. e.g. Timecount ("." Fraction)? (Metric)?. The default metric suffix is "s" for seconds.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[0-9]+(\.[0-9]+)?(h|min|s|ms)?"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ClockValueType">
        <xs:union memberTypes="SMIL20-FullClockValueType SMIL20-PartialClockValueType SMIL20-TimecountType"/>
    </xs:simpleType>
    <xs:simpleType name="UnrestrictedClockValueListType">
        <xs:list itemType="ClockValueType"/>
    </xs:simpleType>
    <xs:simpleType name="ClockValueListType">
        <xs:restriction base="UnrestrictedClockValueListType">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="FormatNameType">
        <xs:restriction base="xs:token">
            <xs:maxLength value="128"/>
            <xs:pattern value="[a-zA-Z_][a-zA-Z0-9\-_.]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ShortcutType">
        <xs:restriction base="xs:string">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="StyleClassType">
        <xs:restriction base="ThemeClassNameType">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="StyleClassListType">
        <xs:restriction base="ThemeClassNameListType">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="UnquotedComponentReferenceType">
        <xs:restriction base="UnquotedComponentRef">
            <xs:maxLength value="128"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="QuotedUnquotedComponentReferenceType">
        <xs:restriction base="xs:string">
            <xs:maxLength value="128"/>
            <xs:pattern value="\{.*\}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="QuotedComponentReferenceOrStyleClassType">
        <xs:union memberTypes="QuotedUnquotedComponentReferenceType StyleClassType"/>
    </xs:simpleType>
    <xs:simpleType name="QuotedComponentReferenceOrLiteralTextType">
        <xs:union memberTypes="QuotedUnquotedComponentReferenceType LiteralTextType"/>
    </xs:simpleType>
    <!--
     ! ************************************************************************
     !         Definitions of Attribute Groups
     ! ************************************************************************
     !-->
    <xs:attributeGroup name="OptionalName">
        <xs:annotation>
            <xs:documentation>The name for formats whose names are optional.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="FormatNameType" use="optional"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="RequiredName">
        <xs:annotation>
            <xs:documentation>The name for formats whose names are required.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="FormatNameType" use="required"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="WidthPixelsOrPercentAttributes">
        <xs:annotation>
            <xs:documentation>Specifies the width of formats or grid columns in either pixels or percentage.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="width" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>The numeric part of the width. Default: 100</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="widthUnits" type="PixelsOrPercentType" use="optional">
            <xs:annotation>
                <xs:documentation>The unit part of the width. Default: percent</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="HeightPixelsOrPercentAttributes">
        <xs:annotation>
            <xs:documentation>Specifies the height of formats or grid rows in either pixels or percentage.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="height" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>The numeric part of the height. Default: 100</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="heightUnits" type="PixelsOrPercentType" use="optional">
            <xs:annotation>
                <xs:documentation>The unit part of the height. Default: percent</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="WidthPixelsOnlyAttribute">
        <xs:annotation>
            <xs:documentation>Specifies the width of formats or grid columns in pixels.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="width" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the width of formats or grid columns in pixels.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="HeightPixelsOnlyAttribute">
        <xs:annotation>
            <xs:documentation>Specifies the height of formats or grid rows in pixels.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="height" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the height of formats or grid rows in pixels.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <!--
    <xs:attributeGroup name="CoreFormatAttributes">
        <xs:attributeGroup ref="BackgroundColorAttribute"/>
        <xs:attributeGroup ref="BackgroundComponentAttributes"/>
        <xs:attributeGroup ref="BorderWidthAttribute"/>
        <xs:attributeGroup ref="CellPaddingAttribute"/>
        <xs:attributeGroup ref="CellSpacingAttribute"/>
        <xs:attributeGroup ref="VerticalAlignmentAttribute"/>
        <xs:attributeGroup ref="HorizontalAlignmentAttribute"/>
        <xs:attributeGroup ref="WidthPixelsOrPercentAttributes"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="PaneAttributes">
        <xs:attributeGroup ref="CoreFormatAttributes"/>
        <xs:attributeGroup ref="RequiredName"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="NonDissectingPaneAttributes">
        <xs:annotation>
            <xs:documentation>Applies to column iterator, row iterator and normal panes.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="PaneAttributes"/>
        <xs:attributeGroup ref="HeightPixelsOnlyAttribute"/>
    </xs:attributeGroup>
-->
    <xs:attributeGroup name="FragmentAttributes">
        <xs:attributeGroup ref="RequiredName"/>
        <xs:attribute name="linkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
            <xs:annotation>
                <xs:documentation>The link text can be a literal or Mariner expression, i.e. text component name inside {}. Default: Next</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="backLinkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
            <xs:annotation>
                <xs:documentation>The link text can be a literal or Mariner expression, i.e. text component name inside {}. Default: Previous</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="BackgroundColorAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the background color of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="backgroundColor" type="RGBOrColorNameType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the background color of a format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="BackgroundComponentAttributes">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the background component of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="backgroundComponent" type="UnquotedComponentReferenceType" use="optional">
            <xs:annotation>
                <xs:documentation>The name of the background component.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="backgroundComponentType" use="optional">
            <xs:annotation>
                <xs:documentation>The type of the background component.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="image"/>
                    <xs:enumeration value="dynamic-visual"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="BorderColorAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the border color of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="borderColor" type="RGBOrColorNameType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the color of the border of a format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="BorderWidthAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the border width of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="borderWidth" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the width (in pixels) of the border of a format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="CellPaddingAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the padding of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="cellPadding" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the padding (in pixels) within the cells of the table generated for the format. This is analagous to specifying the CSS padding property on each of the cells. Default: 0</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="CellSpacingAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the spacing between formats.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="cellSpacing" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the spacing (in pixels) between the walls of the table and the corresponding cell edges and between each cell of the table generated for the format. This is analagous to setting the CSS border-spacing property (as long as the CSS border-collapse property is also set to separate). Default: 0</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="StyleClassAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute for specifying the style class for formats and sub components.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="styleClass" type="StyleClassType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the style class for the format, or sub component.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="DestinationAreaAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the destination area of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="destinationArea" type="LiteralTextType" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the destination area of the format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="FilterKeyboardUsabilityAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying whether a format should be ignored if the target device's keyboard is insufficiently usable.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="filterOnKeyboardUsability" type="xs:nonNegativeInteger" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the minimum level of keyboard or hand writing recognition usability required from the target device in order for the format to be presented.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="FrameBorderAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying whether a format has a frame border.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="frameBorder" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies whether the frame generated for the format has a border.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="FrameSpacingAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the frame spacing of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="frameSpacing" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the spacing (in pixels) between the frames generated for the child formats.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="GridDimensionAttributes">
        <xs:annotation>
            <xs:documentation>Specifies the dimensions of the grid, i.e. how many rows and columns it has.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="rows" type="xs:unsignedInt" use="required">
            <xs:annotation>
                <xs:documentation>The number of rows in the grid.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="columns" type="xs:unsignedInt" use="required">
            <xs:annotation>
                <xs:documentation>The number of columns in the grid.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="HorizontalAlignmentAttribute">
        <xs:annotation>
            <xs:documentation>Specifies the horizontal alignment of this format within its containing format. In addition it specifies the horizontal alignment of content of panes.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="horizontalAlignment" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="left"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="right"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="MarginAttributes">
        <xs:annotation>
            <xs:documentation>Specifies the sizes of the margins (in pixels) around the format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="marginWidth" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>The width (in pixels) of margin to left and right of format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="marginHeight" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>The height (in pixels) of margin above and below format.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="OptimizationLevelAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the frame spacing of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="optimizationLevel" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies whether the representation of this format can be optimized.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:NCName">
                    <xs:enumeration value="never"/>
                    <xs:enumeration value="little-impact"/>
                    <xs:enumeration value="always"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="ResizeAttribute">
        <xs:annotation>
            <xs:documentation>Contains attribute(s) for specifying the frame spacing of a format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="resize" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies whether the frame generated for the format can be resized by the user.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="ScrollingAttribute">
        <xs:annotation>
            <xs:documentation>Specifies whether scroll bars should be generated around the frame for the format.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="scrolling" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:NCName">
                    <xs:enumeration value="auto"/>
                    <xs:enumeration value="always"/>
                    <xs:enumeration value="never"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="VerticalAlignmentAttribute">
        <xs:annotation>
            <xs:documentation>Specifies the vertical alignment of this format within its containing format. In addition it specifies the vertical alignment of content of panes.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="verticalAlignment" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="top"/>
                    <xs:enumeration value="center"/>
                    <xs:enumeration value="bottom"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="AllPaneAndGridAndIteratorAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to all panes, grids and format iterators.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="BackgroundColorAttribute"/>
        <xs:attributeGroup ref="BackgroundComponentAttributes"/>
        <xs:attributeGroup ref="BorderWidthAttribute"/>
        <xs:attributeGroup ref="CellPaddingAttribute"/>
        <xs:attributeGroup ref="CellSpacingAttribute"/>
        <xs:attributeGroup ref="HeightPixelsOnlyAttribute"/>
        <xs:attributeGroup ref="HorizontalAlignmentAttribute"/>
        <xs:attributeGroup ref="VerticalAlignmentAttribute"/>
        <xs:attributeGroup ref="WidthPixelsOrPercentAttributes"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="AdditionalNonDissectablePaneAndGridAttributes">
        <xs:annotation>
            <xs:documentation>Additional attributes that apply only to non-dissectable panes and grids.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="OptimizationLevelAttribute"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="AllPaneAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to all panes.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="RequiredName"/>
        <xs:attributeGroup ref="AllPaneAndGridAndIteratorAttributes"/>
        <xs:attributeGroup ref="FilterKeyboardUsabilityAttribute"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="GridAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to grids.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="OptionalName"/>
        <xs:attributeGroup ref="GridDimensionAttributes"/>
        <xs:attributeGroup ref="AllPaneAndGridAndIteratorAttributes"/>
        <xs:attributeGroup ref="AdditionalNonDissectablePaneAndGridAttributes"/>
        <xs:attributeGroup ref="StyleClassAttribute"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="NonDissectingPaneAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to all non-dissecting panes.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="AllPaneAttributes"/>
        <xs:attributeGroup ref="AdditionalNonDissectablePaneAndGridAttributes"/>
        <xs:attributeGroup ref="DestinationAreaAttribute"/>
    </xs:attributeGroup>
    <!--
    <xs:attributeGroup name="AbstractPaneAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to all panes.</xs:documentation>
        </xs:annotation>
    </xs:attributeGroup>
    <xs:attributeGroup name="PaneAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that apply to panes (row iterator, column iterator and normal ones).</xs:documentation>
        </xs:annotation>
    </xs:attributeGroup>
-->
    <xs:attributeGroup name="DissectingPaneAttributes">
        <xs:annotation>
            <xs:documentation>Applies to dissecting panes only.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="AllPaneAttributes"/>
        <xs:attribute name="nextLinkText" type="LiteralTextType" use="optional">
            <xs:annotation>
                <xs:documentation>The text to associate with the link to the next shard. Default: Next</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="nextLinkStyleClass" type="StyleClassType" use="optional">
            <xs:annotation>
                <xs:documentation>The style class to apply to the link to the next shard.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="nextLinkShortcut" type="ShortcutType" use="optional">
            <xs:annotation>
                <xs:documentation>The shortcut to associate with the link to the next shard.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="previousLinkText" type="LiteralTextType" use="optional">
            <xs:annotation>
                <xs:documentation>The text to associate with the link to the previous shard. Default: Previous</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="previousLinkStyleClass" type="StyleClassType" use="optional">
            <xs:annotation>
                <xs:documentation>The style class to apply to the link to the previous shard.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="previousLinkShortcut" type="ShortcutType" use="optional">
            <xs:annotation>
                <xs:documentation>The shortcut to associate with the link to the previous shard.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxContentSize" type="xs:unsignedInt" use="optional">
            <xs:annotation>
                <xs:documentation>The maximum content size of the dissecting pane. Dissection will occur if the content size exceeds this value.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="shardLinkOrder" use="optional">
            <xs:annotation>
                <xs:documentation>The order that the links to the shards are displayed. Default: next-first</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="next-first"/>
                    <xs:enumeration value="previous-first"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="FormatIteratorAttributes">
        <xs:annotation>
            <xs:documentation>Applies to all format iterators only.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="RequiredName"/>
        <xs:attributeGroup ref="AllPaneAndGridAndIteratorAttributes"/>
    </xs:attributeGroup>
    <xs:attributeGroup name="SpatialFormatIteratorAttributes">
        <xs:annotation>
            <xs:documentation>Applies to spatial format iterators only.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="FormatIteratorAttributes"/>
        <xs:attributeGroup ref="OptimizationLevelAttribute"/>
        <xs:attributeGroup ref="StyleClassAttribute"/>
        <xs:attribute name="indexingDirection" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the order in which the format iterator will insert format contents into the effective layout. Default: across-down</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="across-down"/>
                    <xs:enumeration value="down-across"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="rows" use="required">
            <xs:annotation>
                <xs:documentation>Specifies whether the effective layout created by the spatial format iterator has a fixed or variable number of rows.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="variable"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="rowCount" type="xs:nonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the number of rows in the effective layout created by the spatial format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rowStyleClasses" type="StyleClassListType" use="optional">
            <xs:annotation>
                <xs:documentation>A list of style classes for the rows created by the spatial format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="columns" use="required">
            <xs:annotation>
                <xs:documentation>Specifies whether the effective layout created by the spatial format iterator has a fixed or variable number of columns.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="variable"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="columnCount" type="xs:nonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the number of columns in the effective layout created by the spatial format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="columnStyleClasses" type="StyleClassListType" use="optional">
            <xs:annotation>
                <xs:documentation>A list of style classes for the columns created by the spatial format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="alignContent" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>Indicates whether content should be aligned or not.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="TemporalFormatIteratorAttributes">
        <xs:annotation>
            <xs:documentation>Applies to temporal format iterators only.</xs:documentation>
        </xs:annotation>
        <xs:attributeGroup ref="FormatIteratorAttributes"/>
        <xs:attribute name="clockValues" type="ClockValueListType" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the durations for each cell of the temporal format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cells" use="required">
            <xs:annotation>
                <xs:documentation>Specifies whether the effective layout created by the temporal format iterator has a fixed or variable number of cells.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="fixed"/>
                    <xs:enumeration value="variable"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="cellCount" type="xs:nonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the number of cells in the effective layout created by the temporal format iterator.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="DeviceLayoutFormatAttributes">
        <xs:annotation>
            <xs:documentation>Attributes that are common across all device layout format types.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="deviceName" type="DeviceNameType" use="required"/>
        <xs:attribute name="groupName" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:maxLength value="128"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="destinationLayout" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:maxLength value="128"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <!--
     ! ************************************************************************
     !         Definitions of Common Layout Elements
     ! ************************************************************************
     !-->
    <xs:element name="emptyFormat">
        <xs:complexType mixed="false"/>
    </xs:element>
    <!--
     ! ************************************************************************
     !         Definitions of Canvas Layout Groups
     ! ************************************************************************
     !-->
    <xs:group name="CanvasRootFormatContent">
        <xs:annotation>
            <xs:documentation>Those formats that are allowed at the root of a canvas device layout.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="columnIteratorPaneFormat"/>
            <xs:element ref="formFormat"/>
            <xs:element ref="fragmentFormat"/>
            <xs:element ref="gridFormat"/>
            <xs:element ref="paneFormat"/>
            <xs:element ref="regionFormat"/>
            <xs:element ref="rowIteratorPaneFormat"/>
            <xs:element ref="spatialFormatIterator"/>
            <xs:element ref="temporalFormatIterator"/>
        </xs:choice>
    </xs:group>
    <xs:group name="CanvasFormatContent">
        <xs:choice>
            <xs:element ref="columnIteratorPaneFormat"/>
            <xs:element ref="dissectingPaneFormat"/>
            <xs:element ref="emptyFormat"/>
            <xs:element ref="formFormat"/>
            <xs:element ref="formFragmentFormat"/>
            <xs:element ref="fragmentFormat"/>
            <xs:element ref="gridFormat"/>
            <xs:element ref="paneFormat"/>
            <xs:element ref="regionFormat"/>
            <xs:element ref="replicaFormat"/>
            <xs:element ref="rowIteratorPaneFormat"/>
            <xs:element ref="spatialFormatIterator"/>
            <xs:element ref="temporalFormatIterator"/>
        </xs:choice>
    </xs:group>
    <!--
     ! ************************************************************************
     !         Definitions of Canvas Layout Elements
     ! ************************************************************************
     !-->
    <xs:element name="columnIteratorPaneFormat">
        <xs:complexType>
            <xs:attributeGroup ref="NonDissectingPaneAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="deviceLayoutCanvasFormat" substitutionGroup="policy">
        <xs:complexType>
            <xs:sequence>
                <xs:group ref="CanvasRootFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="DeviceLayoutFormatAttributes"/>
            <xs:attribute name="defaultFragment" type="FormatNameType" use="optional"/>
        </xs:complexType>
        <xs:key name="FragmentNames">
            <xs:selector xpath=".//lpdm:fragmentFormat"/>
            <xs:field xpath="@name"/>
            <!-- Must use explicit prefix, as no prefix means no namespace not default namespace. -->
        </xs:key>
        <xs:keyref name="FragmentNameReference" refer="FragmentNames">
            <xs:selector xpath="."/>
            <xs:field xpath="@defaultFragment"/>
        </xs:keyref>
    </xs:element>
    <xs:element name="dissectingPaneFormat">
        <xs:complexType>
            <xs:attributeGroup ref="DissectingPaneAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="formFormat">
        <xs:complexType>
            <xs:sequence minOccurs="0">
                <xs:group ref="CanvasFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="RequiredName"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="formFragmentFormat">
        <xs:complexType>
            <xs:sequence minOccurs="0">
                <xs:group ref="CanvasFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="RequiredName"/>
            <xs:attribute name="allowReset" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>Allows user to reset the form from within this fragment, e.g. by pressing a reset button. Default: false</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="nextLinkStyleClass" type="QuotedComponentReferenceOrStyleClassType" use="optional">
                <xs:annotation>
                    <xs:documentation>The style class to apply to the link to the next form fragment.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="nextLinkPosition" type="FormFragmentLinkPositionType" use="optional">
                <xs:annotation>
                    <xs:documentation>The position within the form of the link to the next form fragment. Default: before</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="nextLinkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
                <xs:annotation>
                    <xs:documentation>The text to associate with the link to the next form fragment.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="previousLinkStyleClass" type="QuotedComponentReferenceOrStyleClassType" use="optional">
                <xs:annotation>
                    <xs:documentation>The style class to apply to the link to the previous form fragment.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="previousLinkPosition" type="FormFragmentLinkPositionType" use="optional">
                <xs:annotation>
                    <xs:documentation>The position within the form of the link to the previous form fragment. Default: before</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="previousLinkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
                <xs:annotation>
                    <xs:documentation>The text to associate with the link to the previous form fragment.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="fragmentFormat">
        <xs:complexType>
            <xs:sequence minOccurs="0">
                <xs:group ref="CanvasFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="RequiredName"/>
            <xs:attribute name="linkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
                <xs:annotation>
                    <xs:documentation>The text to associate with links generated to this fragment from 'outside' the fragment. e.g. from parent or sibling fragments. Default: Next</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="backLinkText" type="QuotedComponentReferenceOrLiteralTextType" use="optional">
                <xs:annotation>
                    <xs:documentation>The text to associate with links generated to this fragment from 'inside' the fragment. e.g. from child fragments. Default: Next</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="linkStyleClass" type="StyleClassType" use="optional"/>
            <xs:attribute name="showPeerLinks" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>Default: false</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fragmentLinkOrder" use="optional">
                <xs:annotation>
                    <xs:documentation>Default: peers-first</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:NCName">
                        <xs:enumeration value="parent-first"/>
                        <xs:enumeration value="peers-first"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="gridFormat">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="gridFormatColumns" minOccurs="0"/>
                <xs:element ref="gridFormatRow" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attributeGroup ref="GridAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="gridFormatColumn">
        <xs:complexType>
            <xs:attributeGroup ref="WidthPixelsOrPercentAttributes"/>
            <xs:attributeGroup ref="StyleClassAttribute"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="gridFormatColumns">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="gridFormatColumn"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:element name="gridFormatRow">
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
                <xs:group ref="CanvasFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="HeightPixelsOnlyAttribute"/>
            <xs:attributeGroup ref="StyleClassAttribute"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="layoutFormat">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="deviceLayoutCanvasFormat"/>
                <xs:element ref="deviceLayoutMontageFormat"/>
            </xs:choice>
            <xs:attributeGroup ref="CacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="paneFormat">
        <xs:complexType>
            <xs:attributeGroup ref="NonDissectingPaneAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="regionFormat">
        <xs:complexType>
            <xs:attributeGroup ref="RequiredName"/>
            <xs:attributeGroup ref="DestinationAreaAttribute"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="replicaFormat">
        <xs:complexType>
            <xs:attributeGroup ref="RequiredName"/>
            <xs:attribute name="sourceFormatName" type="FormatNameType" use="required"/>
            <xs:attribute name="sourceFormatType" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="grid"/>
                        <xs:enumeration value="pane"/>
                        <xs:enumeration value="form"/>
                        <xs:enumeration value="region"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="rowIteratorPaneFormat">
        <xs:complexType>
            <xs:attributeGroup ref="NonDissectingPaneAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="spatialFormatIterator">
        <xs:complexType>
            <xs:group ref="CanvasFormatContent"/>
            <xs:attributeGroup ref="SpatialFormatIteratorAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="temporalFormatIterator">
        <xs:complexType>
            <xs:group ref="CanvasFormatContent"/>
            <xs:attributeGroup ref="TemporalFormatIteratorAttributes"/>
        </xs:complexType>
    </xs:element>
    <!--
     ! ************************************************************************
     !         Definitions of Montage Layout Groups
     ! ************************************************************************
     !-->
    <xs:group name="MontageRootFormatContent">
        <xs:choice>
            <xs:element ref="segmentGridFormat"/>
        </xs:choice>
    </xs:group>
    <xs:group name="MontageFormatContent">
        <xs:choice>
            <xs:element ref="emptyFormat"/>
            <xs:element ref="segmentFormat"/>
            <xs:element ref="segmentGridFormat"/>
        </xs:choice>
    </xs:group>
    <!--
     ! ************************************************************************
     !         Definitions of Montage Layout Elements
     ! ************************************************************************
     !-->
    <xs:element name="deviceLayoutMontageFormat" substitutionGroup="policy">
        <xs:complexType>
            <xs:sequence>
                <xs:group ref="MontageRootFormatContent"/>
            </xs:sequence>
            <xs:attributeGroup ref="DeviceLayoutFormatAttributes"/>
            <xs:attribute name="defaultSegment" type="FormatNameType" use="optional"/>
        </xs:complexType>
        <xs:key name="SegmentNames">
            <xs:selector xpath=".//lpdm:segmentFormat"/>
            <xs:field xpath="@name"/>
            <!-- Must use explicit prefix, as no prefix means no namespace not default namespace. -->
        </xs:key>
        <xs:keyref name="SegmentNameReference" refer="SegmentNames">
            <xs:selector xpath="."/>
            <xs:field xpath="@defaultSegment"/>
        </xs:keyref>
    </xs:element>
    <xs:element name="segmentFormat">
        <xs:complexType>
            <xs:attributeGroup ref="RequiredName"/>
            <xs:attributeGroup ref="BorderColorAttribute"/>
            <xs:attributeGroup ref="FrameBorderAttribute"/>
            <xs:attributeGroup ref="MarginAttributes"/>
            <xs:attributeGroup ref="ResizeAttribute"/>
            <xs:attributeGroup ref="ScrollingAttribute"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="segmentGridFormat">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="segmentGridFormatColumns" minOccurs="0"/>
                <xs:element ref="segmentGridFormatRow" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attributeGroup ref="GridDimensionAttributes"/>
            <xs:attributeGroup ref="BorderColorAttribute"/>
            <xs:attributeGroup ref="BorderWidthAttribute"/>
            <xs:attributeGroup ref="FrameBorderAttribute"/>
            <xs:attributeGroup ref="FrameSpacingAttribute"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="segmentGridFormatColumn">
        <xs:complexType>
            <xs:attributeGroup ref="WidthPixelsOrPercentAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="segmentGridFormatColumns">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="segmentGridFormatColumn"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:element name="segmentGridFormatRow">
        <xs:complexType>
            <xs:group ref="MontageFormatContent" maxOccurs="unbounded"/>
            <xs:attributeGroup ref="HeightPixelsOrPercentAttributes"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
