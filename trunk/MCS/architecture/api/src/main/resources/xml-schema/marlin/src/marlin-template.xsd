<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<!-- ==========================================================================
 ! $Header: /cvs/architecture/architecture/xml-schema/marlin/src/marlin-template.xsd,v 1.1 2003/11/21 10:34:13 pduffin Exp $
 ! ============================================================================
 ! (c) Volantis Systems Ltd 2003. 
 ! ============================================================================
 ! Change History:
 !
 ! Date         Who             Description
 ! =========    =============== ===============================================
 ! 23-Jun-03    Paul            R752 Created. Defines the structure of a
 !                              template.
 ! 10-Oct-03    Paul            Fixed errors identified by Xerces.
 ! ======================================================================== -->
<!--
 !
 ! ****************************************************************************
 ! This file is owned by Architecture and can only be changed by a member of
 ! that group.
 ! ****************************************************************************
 !
 !-->
<xs:schema targetNamespace="http://www.volantis.com/xmlns/marlin-template" xmlns:pipeline="http://www.volantis.com/xmlns/marlin-pipeline" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.volantis.com/xmlns/marlin-template" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <xs:import namespace="http://www.volantis.com/xmlns/marlin-pipeline" schemaLocation="marlin-pipeline-core.xsd"/>
    <xs:include schemaLocation="marlin-template-core.xsd"/>
    <!--a-->
    <xs:simpleType name="ParameterType">
        <xs:annotation>
            <xs:documentation>The syntax of a parameter type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="simple"/>
            <xs:enumeration value="complex"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="JavaIdentifier">
        <xs:annotation>
            <xs:documentation>
                The precise definition of what constitutes a valid Java identifier can be found in the Java Language Specification at 
                http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html. This type purposely does not attempt to restrict
                the set of allowable values to only Java identifiers as this would make it dependent on the current Java specification
                which may change as new characters are added into Unicode.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <!--Common-->
    <xs:attributeGroup name="ValueAttributes">
        <xs:attribute name="evaluationMode" use="optional" default="immediate">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="immediate"/>
                    <xs:enumeration value="deferred"/>
                    <xs:enumeration value="repeated"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="complexValue">
        <xs:annotation>
            <xs:documentation>Allows a complex value to be specified using pipeline markup.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attributeGroup ref="ValueAttributes"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="simpleValue">
        <xs:annotation>
            <xs:documentation>Allows a simple value to be specified using pipeline markup.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="pipeline:OptionalPipelineOperation">
                    <xs:attributeGroup ref="ValueAttributes"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:group name="ParameterValue">
        <xs:annotation>
            <xs:documentation>Group which encapsulates all the ways to specify a parameter value.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="complexValue"/>
            <xs:element ref="simpleValue"/>
        </xs:choice>
    </xs:group>
    <!--Template Definition-->
    <xs:element name="definition">
        <xs:annotation>
            <xs:documentation>Define a template including its parameters and body.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="documentation" minOccurs="0"/>
                <xs:element ref="declarations" minOccurs="0"/>
                <xs:element ref="body"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="documentation">
        <xs:annotation>
            <xs:documentation>Contains documentation for part of a template.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:element name="declarations">
        <xs:annotation>
            <xs:documentation>Container for template declarations.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="parameter"/>
            </xs:choice>
        </xs:complexType>
        <xs:unique name="parameter-names">
            <xs:selector xpath="parameter"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>
    <xs:element name="parameter">
        <xs:annotation>
            <xs:documentation>Declare a template parameter specifying its name, content type and default value.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0">
                    <xs:element ref="documentation"/>
                </xs:choice>
                <xs:choice minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>This content model is only valid if no default attribute was specified.</xs:documentation>
                    </xs:annotation>
                    <xs:group ref="ParameterValue"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="name" type="ParameterName" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the parameter.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" type="ParameterType" use="required">
                <xs:annotation>
                    <xs:documentation>The type of the content.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="use" use="optional" default="required">
                <xs:annotation>
                    <xs:documentation>Specifies whether the parameter is required, or optional. If this is required then no default should be specified and an error will occur if the user of a template does not set it. If this is optional then a default value must be specified, either through the default attribute or the body content of the element. An error will occur if a default value is not specified for an optional parameter.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="required"/>
                        <xs:enumeration value="optional"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="default" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>The default value of the parameter. This may be used for specifying the default value for both simple or complex parameters.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="expressionVariable" type="xs:QName" use="optional">
                <xs:annotation>
                    <xs:documentation>The name of the expression variable to which a simple value should be bound. This can only be specified for simple parameters.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="body">
        <xs:annotation>
            <xs:documentation>The body of the template.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!--Template Application-->
    <xs:element name="apply" substitutionGroup="pipeline:BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Apply the template to the bound parameter values.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>
                <xs:sequence>
                    <xs:annotation>
                        <xs:documentation>This content model is only valid if no href attribute was specified.</xs:documentation>
                    </xs:annotation>
                    <xs:element ref="bindings" minOccurs="0"/>
                    <xs:choice>
                        <xs:element ref="definition"/>
                        <xs:group ref="pipeline:PipelineOperation"/>
                    </xs:choice>
                </xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>This content model is only valid if an href attribute was specified.</xs:documentation>
                    </xs:annotation>
                    <xs:element ref="binding"/>
                </xs:choice>
            </xs:choice>
            <xs:attribute name="href" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>The URI for the template definition.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:unique name="parameter-bindings">
            <xs:selector xpath=".//bindParameter"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>
    <xs:element name="bindings">
        <xs:annotation>
            <xs:documentation>Encapsulates parameter bindings.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="binding"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="binding">
        <xs:annotation>
            <xs:documentation>Binds a value to a parameter.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0">
                <xs:annotation>
                    <xs:documentation>This content model is only valid if no value or ref attribute was specified.</xs:documentation>
                </xs:annotation>
                <xs:group ref="ParameterValue"/>
            </xs:choice>
            <xs:attribute name="name" type="ParameterName" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the parameter for which a binding is being created.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>The value to bind to the parameter. This is optional but if it is not set then the value must be specified some other way such as with nested pipeline markup.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ref" type="ParameterName" use="optional">
                <xs:annotation>
                    <xs:documentation>This attribute is only valid when this element appears within the body of a template definition. In this case it is a reference to a parameter declared within the containing template definition. It causes the paremeter being defined by this element to be bound to the value of the referenced parameter..</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
</xs:schema>
