<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<!-- ==========================================================================
 ! (c) Volantis Systems Ltd 2001. 
 ! ============================================================================
 ! This document 
 ! ======================================================================== -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:mcscfg="http://www.volantis.com/xmlns/mcs/config" xmlns="http://www.volantis.com/xmlns/mcs/config" targetNamespace="http://www.volantis.com/xmlns/mcs/config" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <!--
     ! **********************************************************************
     !     Common Descriptions 
     ! **********************************************************************
     !-->
    <!-- ======================================================================
     !         Common Type Definitions
     ! ==================================================================== -->
    <xs:simpleType name="CacheStrategyName">
        <xs:restriction base="xs:NCName">
            <xs:enumeration value="least-used"/>
            <xs:enumeration value="least-recently-used"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="UnlimitedKeyword">
        <xs:restriction base="xs:token">
            <xs:enumeration value="unlimited"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="CacheMaxEntries">
        <xs:union memberTypes="xs:positiveInteger UnlimitedKeyword"/>
    </xs:simpleType>
    <xs:simpleType name="CacheMaxAge">
        <xs:union memberTypes="xs:nonNegativeInteger UnlimitedKeyword"/>
    </xs:simpleType>
    <xs:simpleType name="ProjectName">
        <xs:restriction base="xs:anyURI"/>
    </xs:simpleType>
    <xs:simpleType name="CSSSessionType">
        <xs:restriction base="xs:NCName">
            <xs:enumeration value="include-id-in-url"/>
        </xs:restriction>
    </xs:simpleType>
    <!--
     ! **********************************************************************
     !     Data Source Descriptions 
     ! **********************************************************************
     !-->
    <!-- ======================================================================
     !         Common
     ! ==================================================================== -->
    <xs:element name="parameter">
        <xs:annotation>
            <xs:documentation>User defined parameter specification.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the parameter.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The value of the parameter.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Named data source
     ! ==================================================================== -->
    <xs:simpleType name="DataSourceName">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:element name="named-data-source">
        <xs:complexType>
            <xs:group ref="AnonymousDataSource"/>
            <xs:attribute name="name" type="DataSourceName" use="required"/>
            <xs:attribute name="connect-on-start-up" type="xs:boolean" use="optional" default="false">
                <xs:annotation>
                    <xs:documentation>
                        <p/>
                        <p/>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         JNDI
     ! ==================================================================== -->
    <xs:simpleType name="InitialContextName">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:element name="jndi-configuration">
        <xs:annotation>
            <xs:documentation>Encapsulates JNDI configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="initial-context"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="initial-context">
        <xs:annotation>
            <xs:documentation>Configures a JNDI InitialContext.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="name" type="InitialContextName" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the initial context which must be unique within the JNDI configuration.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="jndi-data-source">
        <xs:annotation>
            <xs:documentation>Allows a data source to be retrieved from JNDI.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="initial-context" type="InitialContextName" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the initial context within which the name will be resolved. This must match the name of an initial-context defined within the jndi-configuration.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the data source within the initial context.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Data sources
     ! ==================================================================== -->
    <xs:group name="AnonymousUnpooledDataSource">
        <xs:annotation>
            <xs:documentation>Data sources that are anonymous and unpooled.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:group ref="ConcreteDataSource"/>
            <xs:element ref="anonymous-data-source"/>
        </xs:choice>
    </xs:group>
    <xs:group name="AnonymousDataSource">
        <xs:annotation>
            <xs:documentation>Data sources that are always anonymous.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:group ref="AnonymousUnpooledDataSource"/>
            <xs:element ref="connection-pool"/>
            <xs:element ref="data-source">
                <xs:annotation>
                    <xs:documentation>A definition of reference to a A reference to a named data source.</xs:documentation>
                    <xs:documentation>A definition of reference to a A reference to a named data source.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:group>
    <xs:group name="ConcreteDataSource">
        <xs:annotation>
            <xs:documentation>
                <p>Concrete (not a references) data source configuration. These data sources may be either anonymous or password protected.</p>
                <p>See documentation for anonymous-data-source for explanation of the terms anonymous and password protected.</p>
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element ref="jdbc-driver"/>
            <xs:element ref="mcs-database"/>
            <xs:element ref="jndi-data-source"/>
        </xs:choice>
    </xs:group>
    <xs:element name="jdbc-driver">
        <xs:annotation>
            <xs:documentation>Allows a JDBC Driver to be used as a data source.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="parameter"/>
            </xs:choice>
            <xs:attribute name="driver-class" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>Specify the name of the JDBC driver class to load.

If this attribute is set then it is loaded using Class.forName. If an error occurs while trying to load it then the error is logged and the data source is ignored.

If this attribute is not specified then it is assumed that the driver class has been loaded in some other way, e.g. by adding it to the list of drivers in the jdbc.drivers system property.
</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="database-url" type="xs:anyURI" use="required">
                <xs:annotation>
                    <xs:documentation>The driver specific URL that identifies the database to access. This is the same as the URL passed to the DriverManager.getConnection () methods.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="VendorName">
        <xs:restriction base="xs:string">
            <xs:enumeration value="oracle"/>
            <xs:enumeration value="postgres"/>
            <xs:enumeration value="odbc"/>
            <xs:enumeration value="db2"/>
            <xs:enumeration value="mssql-ms"/>
            <xs:enumeration value="mssql-datad"/>
            <xs:enumeration value="mssql-jsql"/>
            <xs:enumeration value="hypersonic"/>
            <xs:enumeration value="mysql"/>
            <xs:enumeration value="derby-server"/>
            <xs:enumeration value="sybase"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="mcs-database">
        <xs:annotation>
            <xs:documentation>Allows access to a database type that is known to Mariner.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="vendor" type="VendorName" use="required">
                <xs:annotation>
                    <xs:documentation>The vendor of the database. This also identifies the driver to use to access the database.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="source" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The source of the database.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="host" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The database host.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="port" use="required">
                <xs:annotation>
                    <xs:documentation>The database port.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:unsignedShort">
                        <xs:minInclusive value="1"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Connection Pool
     ! ==================================================================== -->
    <xs:element name="connection-pool">
        <xs:annotation>
            <xs:documentation>Creates a pooled connection pool from an anonymous unpooled data source.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>
                <xs:group ref="AnonymousUnpooledDataSource"/>
            </xs:choice>
            <xs:attribute name="maximum" type="xs:int" use="optional" default="5">
                <xs:annotation>
                    <xs:documentation>The maximum number of connections allocated by the pool.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="keep-alive" type="xs:boolean" use="optional" default="false">
                <xs:annotation>
                    <xs:documentation>Controls whether the connections are kept alive by periodically querying the database. If this is true then the interval is specified by the poll-interval attribute.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="poll-interval" type="xs:int" use="optional" default="10">
                <xs:annotation>
                    <xs:documentation>The interval (in seconds) between polling requests made on idle connections. This is only used if keep-alive is true.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Anonymous data sources
     ! ==================================================================== -->
    <xs:element name="anonymous-data-source">
        <xs:annotation>
            <xs:documentation>
                <p>Creates an anonymous data source from a password protected one.</p>
                <p>An anonymous data source does not need to be provided with the user name and password in order to connect to the database.</p>
                <p>A password protected data source must be supplied with a username and password in order to connect to the database.</p>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>
                <xs:group ref="ConcreteDataSource"/>
            </xs:choice>
            <xs:attribute name="user" type="xs:string" use="required"/>
            <xs:attribute name="password" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Named data source Reference
     ! ==================================================================== -->
    <xs:element name="data-source">
        <xs:annotation>
            <xs:documentation>A reference to a named data source.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="ref" type="DataSourceName" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="data-sources">
        <xs:annotation>
            <xs:documentation>Contains definitions of a number of named data sources.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="named-data-source"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!--
     ! **********************************************************************
     !     Device Descriptions 
     ! **********************************************************************
     !-->
    <xs:simpleType name="DeviceRepositoryFile">
        <xs:restriction base="xs:string">
            <xs:pattern value=".*\.mdpr"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="e-mail-address">
        <xs:sequence>
            <xs:element name="address" type="xs:anyURI"/>
            <xs:element name="name" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:element name="devices">
        <xs:annotation>
            <xs:documentation>Encapsulates configuration related to devices and device repositories.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="standard" type="DeviceRepository">
                    <xs:annotation>
                        <xs:documentation>Specifies the location of the standard device repository policies.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="custom" type="DeviceRepository" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Specifies the location of the customer device repository policies.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="logging" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Configuration related to the logging of abstract or unknown devices.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="log-file" type="xs:anyURI">
                                <xs:annotation>
                                <xs:documentation>The name of the log file.</xs:documentation>
                            </xs:annotation>
                            </xs:element>
                            <xs:element name="e-mail">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="e-mail-sending" minOccurs="0">
                                            <xs:annotation>
                                      <xs:documentation>Specifies if the periodical e-mail sending is enabled or disabled.</xs:documentation>
                                  </xs:annotation>
                                            <xs:simpleType>
                                                <xs:restriction base="xs:string">
                                                    <xs:enumeration value="enable"/>
                                                    <xs:enumeration value="disable"/>
                                                </xs:restriction>
                                            </xs:simpleType>
                                        </xs:element>
                                        <xs:element name="config" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="smtp">
                                                        <xs:complexType>
                                                            <xs:sequence>
                                                                <xs:element name="host" type="xs:anyURI">
                                                                    <xs:annotation>
                                                  <xs:documentation>The host name of the SMTP server.</xs:documentation>
                                              </xs:annotation>
                                                                </xs:element>
                                                                <xs:element name="port" type="xs:unsignedShort" minOccurs="0">
                                                                    <xs:annotation>
                                                  <xs:documentation>The port number for the SMTP service.</xs:documentation>
                                              </xs:annotation>
                                                                </xs:element>
                                                                <xs:element name="user-name" type="xs:string" minOccurs="0">
                                                                    <xs:annotation>
                                                  <xs:documentation>The user name to be used for the SMTP service.</xs:documentation>
                                              </xs:annotation>
                                                                </xs:element>
                                                                <xs:element name="password" type="xs:string" minOccurs="0">
                                                                    <xs:annotation>
                                                  <xs:documentation>The password to be used for the SMTP service.</xs:documentation>
                                              </xs:annotation>
                                                                </xs:element>
                                                            </xs:sequence>
                                                        </xs:complexType>
                                                    </xs:element>
                                                    <xs:element name="from" type="e-mail-address">
                                                        <xs:annotation>
                                            <xs:documentation>Details of the sender.</xs:documentation>
                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="to" type="e-mail-address">
                                                        <xs:annotation>
                                            <xs:documentation>Details of the recipient.</xs:documentation>
                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="subject" type="xs:string" minOccurs="0">
                                                        <xs:annotation>
                                            <xs:documentation>The subject line of the notification e-mails.</xs:documentation>
                                        </xs:annotation>
                                                    </xs:element>
                                                    <xs:element name="period" minOccurs="0">
                                                        <xs:annotation>
                                            <xs:documentation>The period of the notification e-mails.</xs:documentation>
                                        </xs:annotation>
                                                        <xs:simpleType>
                                                            <xs:restriction base="xs:string">
                                                                <xs:enumeration value="day"/>
                                                                <xs:enumeration value="week"/>
                                                                <xs:enumeration value="month"/>
                                                                <xs:enumeration value="quarter"/>
                                                                <xs:enumeration value="year"/>
                                                            </xs:restriction>
                                                        </xs:simpleType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="preload" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>Controls whether the device information is preloaded into the caches during the initialisation of the MCS application. If set to true then they are, otherwise they are not. Note: This attribute does not affect the preloading of the device identification patterns as they are always preloaded.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="default" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>Provides the default fallback device to use should an unknown device access MCS</xs:documentation>
              </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="DeviceRepository">
        <xs:choice>
            <xs:element name="jdbc-repository">
                <xs:complexType>
                    <xs:attribute name="project" type="ProjectName" use="required">
                        <xs:annotation>
                            <xs:documentation>The name of the project, within the JDBC DataSource, that contains the device repository information. This uses the same DataSource as the local repository.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name="file-repository">
                <xs:complexType>
                    <xs:attribute name="location" type="DeviceRepositoryFile" use="required">
                        <xs:annotation>
                            <xs:documentation>The location of the device repository file, i.e. a file that ends with .mdpr.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>
    <!--
     ! **********************************************************************
     !     Pipeline Descriptions 
     ! **********************************************************************
     !-->
    <xs:element name="pipeline-configuration">
        <xs:complexType>
            <xs:all>
                <xs:element ref="debug-output" minOccurs="0"/>
                <xs:element ref="markup-extensions" minOccurs="0"/>
                <xs:element ref="caching-operation" minOccurs="0"/>
                <xs:element ref="connection" minOccurs="0"/>
                <xs:element ref="sql-driver" minOccurs="0"/>
                <xs:element ref="transform" minOccurs="0"/>
                <xs:element ref="web-driver" minOccurs="0"/>
                <xs:element ref="web-services-driver" minOccurs="0"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Debugging Operations
     ! ==================================================================== -->
    <xs:element name="debug-output">
        <xs:annotation>
			<xs:documentation>Controls the behaviour of those pipeline operations that produce debug output.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="directory" type="xs:anyURI" use="optional">
                <xs:annotation>
					<xs:documentation>Specifies the directory into which debugging pipeline operations will write their output.<p>If this is not specified then the operations are treated as inactive. Every file within the directory will be prefixed with the date, time and a unique number. Relative directories are relative to the location of the configuration file.</p>
					</xs:documentation>
				</xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Caching Operation
     ! ==================================================================== -->
    <xs:element name="caching-operation">
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="cache"/>
            </xs:sequence>
            <xs:attribute name="expiry-mode" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="auto"/>
                        <xs:enumeration value="fixed-age"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="cache">
        <xs:annotation>
			<xs:documentation>Identifies a cache </xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="strategy" type="CacheStrategyName" use="optional" default="least-recently-used"/>
            <xs:attribute name="max-entries" type="CacheMaxEntries" use="required"/>
            <xs:attribute name="max-age" type="CacheMaxAge" use="optional" default="unlimited"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Connection
     ! ==================================================================== -->
    <xs:element name="connection">
        <xs:annotation>
			<xs:documentation>Configuration for (remote) connections.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="timeout" type="xs:integer" use="optional" default="-1">
                <xs:annotation>
					<xs:documentation>Defines the default timeout, in seconds, to apply to (remote) connections made by pipeline processes. A negative or zero value indicates no timeout.</xs:documentation>
				</xs:annotation>
            </xs:attribute>
            <xs:attribute name="enable-caching" type="xs:boolean" use="optional" default="false">
                <xs:annotation>
                    <xs:documentation>Enables/disables caching of responses.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="max-cache-entries" type="xs:integer" use="optional" default="1000">
                <xs:annotation>
                    <xs:documentation>Defines the maximum number of cache entries.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Markup Extensions
     ! ==================================================================== -->
    <xs:element name="markup-extensions">
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
                <xs:element ref="markup-extension"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="markup-extension">
        <xs:complexType>
            <xs:choice>
                <xs:element ref="process"/>
                <xs:element ref="rule"/>
            </xs:choice>
            <xs:attribute name="local-name" type="xs:string" use="required"/>
            <xs:attribute name="namespace-uri" type="xs:anyURI" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="rule">
        <xs:complexType>
            <xs:attribute name="class-name" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="process">
        <xs:complexType>
            <xs:attribute name="class-name" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         SQL Driver
     ! ==================================================================== -->
    <xs:element name="sql-driver">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="data-sources" minOccurs="0"/>
                <!-- ======================================================================
     !         <xs:element ref"data-sources" minOccurs"0"/>
     ! ==================================================================== -->
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Web Services Driver
     ! ==================================================================== -->
    <xs:element name="web-services-driver">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="wsdl-catalog" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="wsdl-catalog">
        <xs:annotation>
			<xs:documentation>Specifies alternative locations for WSDL documents.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="wsdl-entry"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="wsdl-entry">
        <xs:annotation>
			<xs:documentation>Specifies alternative locations for a WSDL document identified by the uri attribute.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="class-resource" minOccurs="0"/>
                <xs:element ref="servlet-resource" minOccurs="0"/>
                <xs:element ref="uri-resource" minOccurs="0"/>
            </xs:choice>
            <xs:attribute name="uri" type="xs:anyURI" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="RelativePath">
        <xs:restriction base="xs:anyURI"/>
    </xs:simpleType>
    <xs:element name="class-resource">
        <xs:annotation>
			<xs:documentation>Identifies a resource that can be found on the class path.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="path" type="RelativePath" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="servlet-resource">
        <xs:annotation>
			<xs:documentation>Identifies a resource that can be found within a servlet context.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="path" type="RelativePath" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="uri-resource">
        <xs:annotation>
			<xs:documentation>Identifies a resource by an arbitrary uri.
Note: In order for this resource to be retrieved the protocol must be supported by the JVM.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="uri" type="xs:anyURI" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Transform Operation
     ! ==================================================================== -->
    <xs:element name="transform">
        <xs:annotation>
			<xs:documentation>Configuration for transform operations.</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="compile" type="xs:boolean" use="optional" default="false">
                <xs:annotation>
					<xs:documentation>Controls whether XSLTs referenced from transform and transformation elements can be compiled or not. If this is set to true, then those XSLTs referenced from transform and transformation elements that also have a compilable attribute set to true will be compiled, otherwise no XSLTs will be compiled. Great care must be taken when changing this attribute from its default value as XSLT compilers are not yet capable of handling all XSLT constructs.</xs:documentation>
				</xs:annotation>
            </xs:attribute>
            <xs:attribute name="cache" type="xs:boolean" use="optional" default="false">
                <xs:annotation>
					<xs:documentation>Controls whether templates will be cached. <p>Templates are the internal structures, created from XSLT markup, that actually do the transformation. Construction of a template from the XSLT markup is quite a costly operation so caching them can improve performance significantly.</p>
						<p>If this attribute is false then templates are never cached. Otherwise they are cached using a composite key constructed from the fully resolved URL and the compilable flag. Templates that are created from XSLT markup inline within the page do not have an associated URL and hence are not cacheable.</p>
						<p>Currently, the templates' cache cannot be configured and is unlimited in size meaning that templates are never removed.</p>
					</xs:documentation>
				</xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Web Driver
     ! ==================================================================== -->
    <xs:element name="web-driver">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="script" minOccurs="0"/>
                <xs:element ref="proxy" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="connection-timeout" type="xs:int" use="optional">
                <xs:annotation>
					<xs:documentation>Specifies the timeout on connection to a remote web server in milliseconds.
						<p>A value of -1 indicate no timeout, which is the default value</p>
					</xs:documentation>
				</xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="proxy">
        <xs:annotation>
			<xs:documentation>Identifies the proxy configuration element</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" use="required"/>
            <xs:attribute name="port" use="required"/>
            <xs:attribute name="host"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="script">
        <xs:annotation>
			<xs:documentation>Identifies the script configuration element</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="module" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="module">
        <xs:annotation>
			<xs:documentation>Identifies the module configuration element</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="filter" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="id" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="filter">
        <xs:annotation>
			<xs:documentation>Identifies the filter configuration element</xs:documentation>
		</xs:annotation>
        <xs:complexType>
            <xs:attribute name="content-type" use="required"/>
            <xs:attribute name="class" use="required"/>
        </xs:complexType>
    </xs:element>
    <!--
     ! **********************************************************************
     !     Project Descriptions 
     ! **********************************************************************
     !-->
    <xs:complexType name="Project">
        <xs:sequence>
            <xs:element name="fallback-project" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Specifies details of the fallback project.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="name" type="xs:anyURI" use="required">
                        <xs:annotation>
                            <xs:documentation>The name of the fallback project. It is an error if this does not match the name of another project. It is also an error if the project fallbacks form a cycle.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:choice>
                <xs:element ref="xml-policies"/>
                <xs:element ref="jdbc-policies"/>
                <xs:element name="remote-policies">
                    <xs:annotation>
                        <xs:documentation>Indicates that the project's policies are stored in a remote repository.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="preload" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>Specifies the policies to preload from the remote repository.</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute name="url" type="xs:anyURI" use="required">
                                        <xs:annotation>
                                            <xs:documentation>A URL that will cause the remote repository to send a set of policy definitions that will be preloaded into the cache.</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="policy-base-url" type="xs:anyURI" use="required">
                            <xs:annotation>
                                <xs:documentation>The base URL of all the remote policies that belong within this project. The URL to a policy definition resource is constructed by resolving the project relative URL for the component against this base URLThe resulting URL is used to retrieve the policy definition resource.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
            <xs:element ref="assets" minOccurs="0"/>
            <xs:element ref="generated-resources" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="preload" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>Controls whether the contents of a project are preloaded into the caches during the initialisation of the MCS application. If set to true then they are, otherwise they are not.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="projects">
        <xs:annotation>
            <xs:documentation>Contains configuration relating to projects.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="default" type="Project">
                    <xs:annotation>
                        <xs:documentation>Specifies the default project to use in this instance of MCS.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="project" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
        <xs:key name="PredefinedProjectName">
            <xs:selector xpath="./mcscfg:project"/>
            <xs:field xpath="@name"/>
        </xs:key>
        <xs:keyref name="FallbackProject" refer="mcscfg:PredefinedProjectName">
            <xs:selector xpath="./*/mcscfg:fallback-project"/>
            <xs:field xpath="@name"/>
        </xs:keyref>
    </xs:element>
    <xs:element name="xml-policies">
        <xs:annotation>
            <xs:documentation>Indicates that the project's policies are stored as XML.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="directory" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>Specifies the root directory containing the policies.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="jdbc-policies">
        <xs:annotation>
            <xs:documentation>Indicates thet the project's policies are stored in a JDBC database.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>Specifies the name of the project within the jdbc repository.
</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="project">
        <xs:annotation>
            <xs:documentation>Predefined project configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="Project">
                    <xs:attribute name="name" type="xs:anyURI" use="required">
                        <xs:annotation>
                            <xs:documentation>The well defined name of the project.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Asset Related Definitions
     ! ==================================================================== -->
    <xs:complexType name="Asset">
        <xs:annotation>
            <xs:documentation>Asset configuration.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="prefix-url" type="xs:anyURI" use="optional">
            <xs:annotation>
                <xs:documentation>The default prefix to use for assets of this specific type that do not belong to an asset group.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="assets">
        <xs:annotation>
            <xs:documentation>Project specific configuration relating to assets.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:all>
                <xs:element ref="audio-assets" minOccurs="0"/>
                <xs:element ref="dynamic-visual-assets" minOccurs="0"/>
                <xs:element ref="image-assets" minOccurs="0"/>
                <xs:element ref="script-assets" minOccurs="0"/>
                <xs:element ref="text-assets" minOccurs="0"/>
            </xs:all>
            <xs:attribute name="base-url" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>Specifies the base URL for assets belonging to the enclosing project.

It is used to resolve host relative server side asset URLs against after they have been constructed from the asset and asset group meta data but before any custom AssetURLRewriters are executed.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="audio-assets" type="Asset">
        <xs:annotation>
            <xs:documentation>Audio asset configuration.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="dynamic-visual-assets" type="Asset">
        <xs:annotation>
            <xs:documentation>Dynamic visual asset configuration.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="image-assets" type="Asset">
        <xs:annotation>
            <xs:documentation>Image asset configuration.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="script-assets" type="Asset">
        <xs:annotation>
            <xs:documentation>Script asset configuration.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="text-assets" type="Asset">
        <xs:annotation>
            <xs:documentation>Text asset configuration.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="generated-resources">
        <xs:annotation>
            <xs:documentation>Defines Base directory for generated resources (will contain scripts,modesets and stylesheets in the future)</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="base-dir" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>Defines the relative directory to append to the app server base directory for storing generated resources</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!--
     ! **********************************************************************
     !     Protocol Descriptions 
     ! **********************************************************************
     !-->
    <xs:element name="protocols">
        <xs:annotation>
            <xs:documentation>Encapsulates configuration that applies to specific protocols.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:all>
                <xs:element ref="wml" minOccurs="0"/>
                <xs:element name="object-pool" minOccurs="0">
                    <xs:complexType>
                        <xs:attribute name="enabled" type="xs:boolean" use="optional" default="true">
                            <xs:annotation>
                                <xs:documentation>Specifies whether the protocols should pool objects; if true then the protocols will pool objects and if false they will not. The best setting for this attribute depends on the JVM and in particular on its garbage collector (GC) and how it is configured. Typically this should only be set to false if the JVM has a generational GC as they do not handle pooled objects properly.

Defaults to true.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:element name="wml">
        <xs:annotation>
            <xs:documentation>Specifies WML specific configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="preferred-output-format" use="optional">
                <xs:annotation>
                    <xs:documentation>Specifies whether the preferred output format of WML protocols is WML or WMLC.

Defaults to wmlc.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:NCName">
                        <xs:enumeration value="wmlc">
                            <xs:annotation>
                                <xs:documentation>WML protocols will output WMLC if the Accept header indicates that it is supported, otherwise they will output WML.
</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="wml">
                            <xs:annotation>
                                <xs:documentation>WML protocols will only ever output WML irrespective of the value of the Accept header.
</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="input-dollars" use="optional">
                <xs:annotation>
                    <xs:documentation>Specifies whether dollars that are present in the input (either in character data, or in attributes) and are passed through to the target device should be treated as literal dollar characters, or as the start of a WML variable reference.

WARNING: Relying on this being set to anything other than 'literal' will almost certainly prevent your pages from working in other protocols.

Defaults to literal.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:NCName">
                        <xs:enumeration value="literal">
                            <xs:annotation>
                                <xs:documentation>Input dollars are treated as literal and are written out as either $$ in WML, or as literal text within WMLC.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="variable">
                            <xs:annotation>
                                <xs:documentation>Input dollars are treated as the start of a variable reference and the following content is parsed accordingly. It is an error if it is a valid WML variable reference.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-messages">
        <xs:annotation>
            <xs:documentation>Definitions associated with message text added as comments to pages generated by Mariner</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="heading">
                <xs:annotation>
                    <xs:documentation>This message is written as a comment to each generated page assuming that the output protocol supports comments.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-packaging">
        <xs:annotation>
            <xs:documentation>The page packaging options. Currently the only option is for mime packaging. This is turned off by default (ie. set enabled to false). If this element is missing, mime packaging is disabled.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="mime-packaging" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="mime-packaging">
        <xs:annotation>
            <xs:documentation>The mime-packaging value and attribute list. Default not enabled</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="enabled" type="xs:boolean" default="false"/>
        </xs:complexType>
    </xs:element>
    <!--
     ! **********************************************************************
     !     Management Descriptions 
     ! **********************************************************************
     !-->
    <!-- ======================================================================
     !         management
     ! ==================================================================== -->
    <xs:element name="management">
        <xs:complexType>
            <xs:all>
                <xs:element ref="page-tracking" minOccurs="0"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-tracking">
        <xs:complexType>
            <xs:attribute name="enabled" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Common Type Definitions
     ! ==================================================================== -->
    <xs:simpleType name="JavaClassName">
        <xs:restriction base="xs:string">
            <xs:pattern value="\p{L}(\p{L}|\p{N})*(\.\p{L}(\p{L}|\p{N})*)*($\p{L}(\p{L}|\p{N})*)*"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- ======================================================================
     !         Root Element Definition
     ! ==================================================================== -->
    <xs:element name="mcs-config">
        <xs:complexType>
            <xs:all>
                <xs:element ref="jndi-configuration" minOccurs="0"/>
                <xs:element ref="data-sources" minOccurs="0"/>
                <xs:element ref="local-repository"/>
                <xs:element ref="devices"/>
                <xs:element ref="projects"/>
                <xs:element ref="plugins" minOccurs="0"/>
                <xs:element ref="secondary-repository" minOccurs="0"/>
                <xs:element ref="page-messages" minOccurs="0"/>
                <xs:element ref="policy-cache" minOccurs="0"/>
                <xs:element ref="jsp" minOccurs="0"/>
                <xs:element ref="style-sheets" minOccurs="0"/>
                <xs:element ref="chartimages" minOccurs="0"/>
                <xs:element ref="modesets" minOccurs="0"/>
                <xs:element ref="scripts" minOccurs="0"/>
                <xs:element ref="log4j" minOccurs="0"/>
                <xs:element ref="mcs-agent" minOccurs="0"/>
                <xs:element ref="remote-policies" minOccurs="0"/>
                <xs:element ref="mcs-plugins" minOccurs="0"/>
                <xs:element ref="application-plugins" minOccurs="0"/>
                <xs:element ref="user-repositories" minOccurs="0"/>
                <xs:element ref="web-application" minOccurs="0"/>
                <xs:element ref="page-packaging" minOccurs="0"/>
                <xs:element ref="debug" minOccurs="0"/>
                <xs:element ref="pipeline-configuration" minOccurs="0"/>
                <xs:element ref="protocols" minOccurs="0"/>
                <xs:element ref="session-proxy" minOccurs="0"/>
                <xs:element ref="management" minOccurs="0"/>
                <xs:element ref="servlet-filter" minOccurs="0"/>
                <xs:element ref="http-proxy" minOccurs="0"/>
                <xs:element ref="media-access-proxy" minOccurs="0"/>
            </xs:all>
        </xs:complexType>
        <xs:key name="GlobalInitialContextName">
            <xs:annotation>
                <xs:documentation>Ensures that all JNDI initial-context names are unique.</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="mcscfg:jndi-configuration/mcscfg:initial-context"/>
            <xs:field xpath="@name"/>
        </xs:key>
        <xs:key name="GlobalDataSourceName">
            <xs:annotation>
                <xs:documentation>Ensure that global data sources (those defined in the top level data-sources element) are unique.</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="mcscfg:data-sources/mcscfg:named-data-source"/>
            <xs:field xpath="@name"/>
        </xs:key>
        <xs:keyref name="InitialContextReference" refer="GlobalInitialContextName">
            <xs:selector xpath=".//mcscfg:jndi-data-source">
                <xs:annotation>
                    <xs:documentation>Ensure that all jndi-data-source elements reference valid JNDI initial-contexts.</xs:documentation>
                </xs:annotation>
            </xs:selector>
            <xs:field xpath="@initial-context"/>
        </xs:keyref>
        <xs:key name="DataSourceName">
            <xs:selector xpath=".//mcscfg:named-data-source">
                <xs:annotation>
                    <xs:documentation>Ensure that all data sources have unique names whether they are global or specific to the SQL driver.</xs:documentation>
                </xs:annotation>
            </xs:selector>
            <xs:field xpath="@name"/>
        </xs:key>
        <xs:keyref name="GlobalDataSourceReference" refer="GlobalDataSourceName">
            <xs:selector xpath=".//mcscfg:data-source">
                <xs:annotation>
                    <xs:documentation>Ensure that all data-source elements reference global data sources.</xs:documentation>
                </xs:annotation>
            </xs:selector>
            <xs:field xpath="@ref"/>
        </xs:keyref>
    </xs:element>
    <!-- ======================================================================
     !         Local Repository Related Definitions
     ! ==================================================================== -->
    <xs:element name="local-repository">
        <xs:complexType>
            <xs:all>
                <xs:element ref="jdbc-repository" minOccurs="0"/>
                <xs:element ref="xml-repository" minOccurs="0"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:element name="jdbc-repository">
        <xs:complexType>
            <xs:sequence>
                <xs:group ref="AnonymousDataSource"/>
            </xs:sequence>
            <xs:attribute name="vendor" type="VendorName" use="optional">
                <xs:annotation>
                    <xs:documentation>This specifies the vendor name of the data source it must always be specified unless the referenced data source was specified using mcs-database (either directly, or nested within a connection-pool) in which case the vendor attribute specified on that is used. It is an error if both this element and the referenced data source have vendor attributes with different values.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="use-short-names" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>Determines whether short or descriptive names are used for tables and columns. If set to true then short names are used, otherwise descriptive names are used. The short names are all 18 characters or less.

Note: Some databases (e.g. DB2 z/OS) will only work with short names. In these cases this configuration is ignored.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="xml-repository">
        <xs:complexType mixed="false"/>
    </xs:element>
    <xs:element name="secondary-repository">
        <xs:annotation>
            <xs:documentation>The definition of the Secondary Mariner repository to be used. The secondary repository can also be used to store components and assets at runtime</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="inline-metadata" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="inline-metadata">
        <xs:complexType>
            <xs:attribute name="enabled" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Policy Cache Related Definitions
     ! ==================================================================== -->
    <xs:attributeGroup name="LocalPolicyCacheAttributes">
        <xs:attribute name="enabled" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="strategy" type="CacheStrategyName" default="least-used"/>
        <xs:attribute name="max-entries" use="optional" default="-1">
            <xs:simpleType>
                <xs:restriction base="xs:int">
                    <xs:minInclusive value="-1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="timeout" use="optional" default="-1">
            <xs:simpleType>
                <xs:restriction base="xs:int">
                    <xs:minInclusive value="-1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="policy-cache">
        <xs:annotation>
            <xs:documentation>Controls the caching of policies within the MCS application.
On a production server it is recommended that you set all policy caches to true, on a development server you may wish to switch off some of the policy caches so changes are effective immediately without restarting the application.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="asset-group-cache" minOccurs="0"/>
                <xs:element ref="audio-component-cache" minOccurs="0"/>
                <xs:element ref="button-image-component-cache" minOccurs="0"/>
                <xs:element ref="chart-component-cache" minOccurs="0"/>
                <xs:element ref="device-cache" minOccurs="0"/>
                <xs:element ref="dynamic-visual-component-cache" minOccurs="0"/>
                <xs:element ref="image-component-cache" minOccurs="0"/>
                <xs:element ref="layout-cache" minOccurs="0"/>
                <xs:element ref="link-component-cache" minOccurs="0"/>
                <xs:element ref="resource-component-cache" minOccurs="0"/>
                <xs:element ref="rollover-image-component-cache" minOccurs="0"/>
                <xs:element ref="script-component-cache" minOccurs="0"/>
                <xs:element ref="text-component-cache" minOccurs="0"/>
                <xs:element ref="theme-cache" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="asset-group-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="audio-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="button-image-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="chart-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="device-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="dynamic-visual-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="image-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="layout-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="link-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="resource-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="rollover-image-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="script-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="text-component-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="theme-cache">
        <xs:complexType>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Remote Repository Related Definitions
     ! ==================================================================== -->
    <xs:element name="remote-policies">
        <xs:annotation>
            <xs:documentation>Definitions associated with the caching of remote policy values</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:all>
                <xs:element ref="remote-policy-cache" minOccurs="0"/>
                <xs:element ref="remote-policy-quotas" minOccurs="0"/>
            </xs:all>
            <xs:attribute name="connection-timeout"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         The remote repository connection timeout which is optional and default value is 15 seconds. The units are seconds
     ! ==================================================================== -->
    <xs:attributeGroup name="remote-cache-attrs">
        <xs:attribute name="allowRetainDuringRetry"/>
        <xs:attribute name="allowRetryFailedRetrieval"/>
        <xs:attribute name="cachePolicies"/>
        <xs:attribute name="defaultRetainDuringRetry"/>
        <xs:attribute name="defaultRetryFailedRetrieval"/>
        <xs:attribute name="defaultRetryInterval"/>
        <xs:attribute name="defaultRetryMaxCount"/>
        <xs:attribute name="defaultTimeToLive"/>
        <xs:attribute name="maxCacheSize"/>
        <xs:attribute name="maxRetryMaxCount"/>
        <xs:attribute name="maxTimeToLive"/>
        <xs:attribute name="minRetryInterval"/>
        <xs:attribute name="minimumTimeToLiveForSharing"/>
        <xs:attribute name="usePersistentCache"/>
    </xs:attributeGroup>
    <xs:element name="remote-policy-cache">
        <xs:complexType>
            <xs:attributeGroup ref="remote-cache-attrs"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="RemotePolicyQuotaAttributes">
        <xs:attribute name="URL" type="xs:anyURI" use="required"/>
        <xs:attribute name="percentage" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:unsignedInt">
                    <xs:minInclusive value="0"/>
                    <xs:maxInclusive value="100"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="remote-policy-quotas" type="RemotePolicyQuotaContainer"/>
    <xs:element name="remote-policy-quota">
        <xs:complexType>
            <xs:attributeGroup ref="RemotePolicyQuotaAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="RemotePolicyQuotaContainer">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="remote-policy-quota"/>
        </xs:sequence>
    </xs:complexType>
    <!-- ======================================================================
     !         Style Sheet Related Definitions
     ! ==================================================================== -->
    <xs:element name="style-sheets">
        <xs:complexType>
            <xs:all>
                <xs:element ref="external-generation" minOccurs="0"/>
                <xs:element ref="internal-generation" minOccurs="0"/>
                <xs:element ref="page-level-generation" minOccurs="0"/>
            </xs:all>
            <xs:attribute name="max-age" type="CacheMaxAge" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="external-generation">
        <xs:annotation>
            <xs:documentation>
Controls the generation of external style sheets.
An external style sheet is one which is referred to from the page rather than included in it. If this element is present then where possible external style sheets will be generated. Some protocol/device combinations may not allow this in which case the style sheet will be generated inline within the page.
In order for external style sheets to be cached theme caching must be enabled, the base-directory must exist and it must contain a subdirectory named 'cssFileCache'.
</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="cache" use="optional" default="disabled">
                <xs:annotation>
                    <xs:documentation/>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="enabled"/>
                        <xs:enumeration value="disabled"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="flush-on-restart" type="xs:boolean" use="optional" default="true">
                <xs:annotation>
                    <xs:documentation>If true the contents of the base-directory are deleted when the MCS bean is created.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="base-directory" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>This must contain the absolute path to the directory into which the generated style sheets are written.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="base-url" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>This is the path that the browser must use in order to access the mariner servlet which serves the generated css files. This must take into account any URL mapping which may be done by servers between the browser and the application server on which the servlet is running. It must not end in /. If this is not specified then it defaults to &lt;context path&gt;/MarinerCSS.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="session" type="CSSSessionType" use="optional">
                <xs:annotation>
                    <xs:documentation>This is type of session that may be associated with the external style sheet. Currently there is one value allowed: include-id-in-url which includes the session id as part of the URL.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="internal-generation">
        <xs:annotation>
            <xs:documentation>Controls the generation of internal style sheets.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="cache"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="page-level-generation">
        <xs:annotation>
            <xs:documentation>Controls the generation of page level CSS.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="max-age" type="CacheMaxAge" use="optional"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         JSP Related Definitions
     ! ==================================================================== -->
    <xs:element name="jsp">
        <xs:annotation>
            <xs:documentation>Configuration relating to JSPs</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="support-required" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether support for jsp pages is required. It should be set to false if the web application does not contain any XDIME JSP pages and true otherwise. Its primary use is to allow web applications that do not use JSPs to prevent unnecessary work being done during initialisation.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="write-direct" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether JSP tags should write device dependent content direct to the output, or whether they should write device independent content to Mariner. This should only be set to true for older web applications that rely on being able to write direct to the output. New web applications should just use the default value of false.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="resolve-character-references" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether JSP tags attempt to resolve character references within their attributes and content before passing them onto PAPI. Web applications that do not use character references within JSPs should set this to false as it will improve performance slightly.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="evaluate-page-after-canvas" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Control whether JSPs should evaluate page content after the canvas tag. This should only be set to true for older web applications that rely having JSP content after the canvas tag. New web applications should just use the default value of false. If this is set to true it may have adverse affects for web applications which generate binary content such as WBXML/WMLC or packaged output.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Integration Related Definitions
     ! ==================================================================== -->
    <xs:element name="mcs-plugins">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="markup-plugin" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="markup-plugin">
        <xs:annotation>
            <xs:documentation>Markup Plugins are java classes whose methods can be invoked directly from XDIME markup using the invoke element.  These classes must conform to the interface com.volantis.mcs.integration.MarkupPlugin.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="PluginType">
                    <xs:attribute name="scope" use="optional" default="canvas">
                        <xs:annotation>
                            <xs:documentation>MarkupPlugins can be defined to have the following scopes.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:token">
                                <xs:enumeration value="application">
                                    <xs:annotation>
                                        <xs:documentation>The plugin is initialized when the web app starts and terminates when the web application ends.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="session">
                                    <xs:annotation>
                                        <xs:documentation>The plugin is initialized when a new session starts and terminates when the session ends.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="canvas">
                                    <xs:annotation>
                                        <xs:documentation>The plugin is initializes when a canvas element is invoked and terminates when the canvas generation ends.</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="initialize">
        <xs:annotation>
            <xs:documentation>The initialization arguments are specified as name-value pairs which are passed as a java.util.Map to the initialize method of the MarkupPlugin.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="argument" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="argument">
        <xs:complexType>
            <xs:attribute name="name" use="required"/>
            <xs:attribute name="value" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="plugins">
        <xs:complexType>
            <xs:attribute name="url-rewriter" type="JavaClassName">
                <xs:annotation>
                    <xs:documentation>Defines the name of a custom Java class that implements the com.volantis.mcs.integration.URLRewriter interface.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="page-url-rewriter" type="JavaClassName">
                <xs:annotation>
                    <xs:documentation>Defines the name of a custom Java class that implements the com.volantis.mcs.integration.PageURLRewriter interface.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="asset-url-rewriter" type="JavaClassName">
                <xs:annotation>
                    <xs:documentation>Defines the name of a custom Java class that implements the com.volantis.mcs.integration.AssetURLRewriter interface.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="asset-transcoder" type="JavaClassName">
                <xs:annotation>
                    <xs:documentation>Defines the name of a custom Java class that implements the com.volantis.mcs.integration.PluggableAssetTranscoder</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="add-device-capability-parameter" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether the ICS asset transcoder plugin passes device capability information to the ICS transcoder by adding a  parameter to URLs for convertible images. If true then it does add the <code>v.dc</code> parameter, otherwise it does not. The default is for it not to add the parameter.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="web-application">
        <xs:annotation>
            <xs:documentation/>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="base-url">
                <xs:annotation>
                    <xs:documentation>Defines the effective URL of the server seen from a client, and is used only when there is some URL mapping in use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="internal-url">
                <xs:annotation>
                    <xs:documentation>Defines the absolute URL of the server as seen from the web application, and is used only when there is no other more specific prefix, for example, from associated asset groups, for the absolute part of their URL.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="page-base">
                <xs:annotation>
                    <xs:documentation>Used when generating resources. For example the URL to generated chart images is prefixed by the web-application base-url, the web-application page-base, and the chartimages base attributes concatenated together with any additional path delimeters required.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="xml-reader"/>
            <xs:attribute name="app-server-name">
                <xs:annotation>
                    <xs:documentation>Indicates the application server in use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="jndi-provider"/>
            <xs:attribute name="use-server-connection-pool">
                <xs:annotation>
                    <xs:documentation>Controls whether the application server's connection pool should be used, if available.
 If the connection pool is used, the datasource-vendor, datasource, user and password attributes need to be set, and if a BEA Weblogic connection pool is used the jndi-provider attribute also needs to be set.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="datasource"/>
            <xs:attribute name="datasource-vendor"/>
            <xs:attribute name="user"/>
            <xs:attribute name="password"/>
            <xs:attribute name="anonymous" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Policy Selection Plugins
     ! ==================================================================== -->
    <xs:complexType name="PluginType">
        <xs:annotation>
            <xs:documentation>Base type for all plugin definitions.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="initialize" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:documentation>The name by which the plugin will be referenced.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="JavaClassName" use="required">
            <xs:annotation>
                <xs:documentation>The plugin class implementing the appropriate plugin specific interface.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <!-- ======================================================================
     !         MCS Application Related Definitions
     ! ==================================================================== -->
    <xs:element name="application-plugins">
        <xs:annotation>
            <xs:documentation/>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="mps" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="mps">
        <xs:annotation>
            <xs:documentation>The MPS application plugin contains the Mariner MPS configuration.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="channels" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="internal-base-url" type="xs:anyURI">
                <xs:annotation>
                    <xs:documentation>Defines the url to use for MPS asset resolution from internal requests.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="message-recipient-info" type="JavaClassName">
                <xs:annotation>
                    <xs:documentation>Defines the user supplied class used to resolve recipient devices and channels.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="channels">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="channel" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="channel">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="argument" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="name" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the channel.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="class" type="JavaClassName" use="optional">
                <xs:annotation>
                    <xs:documentation>The class implementing the ChannelAdapter interface for this channel.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         User Preference Related Definitions
     ! ==================================================================== -->
    <xs:element name="external-preferences-repository">
        <xs:annotation>
            <xs:documentation>Definitions associated with an external repository used for holding information about users and their preferences. This definition is associated with a Mariner plugin of type  POLICY_PREFS_REPOSITORY</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="plugin-name" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="internal-preferences-repository">
        <xs:annotation>
            <xs:documentation>Definitions associated with that part of Mariner's internal repository used for holding user preferences.</xs:documentation>
        </xs:annotation>
        <xs:complexType/>
    </xs:element>
    <xs:element name="user-repositories">
        <xs:annotation>
            <xs:documentation>Definitions associated with repositories that hold information about users and their preferences</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>
                <xs:element ref="external-preferences-repository" minOccurs="0"/>
                <xs:element ref="internal-preferences-repository" minOccurs="0"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Generated File Related Definitions
     ! ==================================================================== -->
    <xs:element name="scripts">
        <xs:annotation>
            <xs:documentation>Definitions associated with Scripts generated by Mariner for those devices that support them.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="base"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="modesets">
        <xs:annotation>
            <xs:documentation>Definitions associated with Mode Sets generated by Mariner for those devices that support them.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="base"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="chartimages">
        <xs:annotation>
            <xs:documentation>Definitions associated with Chart Images generated by Mariner for those devices that support them.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="base"/>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Servlet Filter Definitions
     ! ==================================================================== -->
    <xs:element name="servlet-filter">
        <xs:annotation>
            <xs:documentation>Configures the XDIME Servlet Filter</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="mime-type"/>
                    <xs:element ref="exclude-device"/>
                </xs:choice>
                <xs:element ref="page-cache" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="jsessionid-name" type="xs:NCName" use="optional">
                <xs:annotation>
                    <xs:documentation>The name of the path parameter that is used to specify the session id.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="mime-type">
        <xs:annotation>
            <xs:documentation>Specifies a mime-type which the servlet filter will pass as XDIME</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="value" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The value of the mime type e.g. x-application/vnd.xdime+xml</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="exclude-device">
        <xs:annotation>
            <xs:documentation>Excludes a specific device from being processed by the Servlet Filter</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the device to exclude</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- ======================================================================
     !         Miscellaneous Definitions
     ! ==================================================================== -->
    <xs:element name="page-cache">
        <xs:annotation>
            <xs:documentation>Definitions associated with the caching of generated pages to improve overall server performance.
This is currently ignored.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="max-age" use="optional">
                <xs:annotation>
                    <xs:documentation>This attribute is deprecated</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="base-directory" use="optional">
                <xs:annotation>
                    <xs:documentation>This attribute is deprecated</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="base-url" use="optional">
                <xs:annotation>
                    <xs:documentation>This attribute is deprecated</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="default-scope" use="optional">
                <xs:annotation>
                    <xs:documentation>Determines the caching strategy for renderend pages when an XDIME document does not have a cacheScope attribute.</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="none">
                            <xs:annotation>
                                <xs:documentation>No caching.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="safe">
                            <xs:annotation>
                                <xs:documentation>Pipeline markup is evaluated in the XDIME before it is used as part of the cache hashing.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="optimistic">
                            <xs:annotation>
                                <xs:documentation>Pipeline markup is NOT evaluated in the XDIME before it is used as part of the cache hashing.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="quote-value-cache-enabled" use="optional">
                <xs:annotation>
                    <xs:documentation>This attribute is deprecated</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attributeGroup ref="LocalPolicyCacheAttributes"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="debug">
        <xs:complexType>
            <xs:attribute name="comments" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether MCS will attempt to generate comments in the output pages. Setting this to true does not guarantee that comments will be written to the output pages as not all protocols support them.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="logPageOutput" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Controls whether the markup for the generated page is written to the MCS log.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="log4j">
        <xs:annotation>
            <xs:documentation>Definition which controls how log4j is configured.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="xml-configuration-file">
                <xs:annotation>
                    <xs:documentation>The path to the file containing the configuration for Mariner's log4j based logging.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="mcs-agent">
        <xs:annotation>
            <xs:documentation>Definitions associated with the Mariner agent.   The Mariner agent allows the remote flushing of policy caches and provides the ability to change the level of logging online.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="enabled"/>
            <xs:attribute name="port"/>
            <xs:attribute name="password"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="http-proxy">
        <xs:complexType>
            <xs:attribute name="host" type="xs:string" use="required"/>
            <xs:attribute name="port" type="xs:unsignedShort"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="session-proxy">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="map-cookies" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="map-cookies">
        <xs:complexType>
            <xs:attribute name="enabled" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="media-access-proxy">
        <xs:complexType>
            <xs:attribute name="url-prefix" type="xs:anyURI" use="required"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
