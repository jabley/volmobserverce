/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * This code was automatically generated by PropertyValueLookupUtilities
 * on 3/14/08 7:12 PM
 *
 * YOU MUST NOT MODIFY THIS FILE
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.assets;

import java.util.HashMap;
import java.util.Map;

public class DeviceAudioAssetUtilities {

  /**
   * An array of the allowable values for the audio asset encoding.
   */
  private static Object [] encodingArray;

  /**
   * A bidirectional map between internal and external representations of the
   * audio asset encoding.
   */
  private static Map encodingMap;

  static {
    Object internal;
    String external;

    encodingArray = new Integer [] {
      new Integer (AudioAsset.ADCPM32),
      new Integer (AudioAsset.GSM_AUDIO),
      new Integer (AudioAsset.BASIC_AUDIO),
      new Integer (AudioAsset.MIDI_AUDIO),
      new Integer (AudioAsset.MP3_AUDIO),
      new Integer (AudioAsset.WINDOWS_MEDIA_AUDIO),
      new Integer (AudioAsset.REAL_AUDIO),
      new Integer (AudioAsset.AMR_AUDIO),
      new Integer (AudioAsset.IMELODY_AUDIO),
      new Integer (AudioAsset.SP_MIDI_AUDIO),
      new Integer (AudioAsset.WAV_AUDIO),
      new Integer (AudioAsset.RMF_AUDIO),
      new Integer (AudioAsset.NOKRING_AUDIO),
      new Integer (AudioAsset.SMAF_AUDIO),
    };

    encodingMap = new HashMap ();

    external = "adpcm32";
    encodingMap.put (encodingArray [0], external);
    encodingMap.put (external, encodingArray [0]);

    external = "gsm";
    encodingMap.put (encodingArray [1], external);
    encodingMap.put (external, encodingArray [1]);

    external = "basic";
    encodingMap.put (encodingArray [2], external);
    encodingMap.put (external, encodingArray [2]);

    external = "midi";
    encodingMap.put (encodingArray [3], external);
    encodingMap.put (external, encodingArray [3]);

    external = "mp3";
    encodingMap.put (encodingArray [4], external);
    encodingMap.put (external, encodingArray [4]);

    external = "windowsAudio";
    encodingMap.put (encodingArray [5], external);
    encodingMap.put (external, encodingArray [5]);

    external = "realAudio";
    encodingMap.put (encodingArray [6], external);
    encodingMap.put (external, encodingArray [6]);

    external = "amr";
    encodingMap.put (encodingArray [7], external);
    encodingMap.put (external, encodingArray [7]);

    external = "iMelody";
    encodingMap.put (encodingArray [8], external);
    encodingMap.put (external, encodingArray [8]);

    external = "spMidi";
    encodingMap.put (encodingArray [9], external);
    encodingMap.put (external, encodingArray [9]);

    external = "wav";
    encodingMap.put (encodingArray [10], external);
    encodingMap.put (external, encodingArray [10]);

    external = "rmf";
    encodingMap.put (encodingArray [11], external);
    encodingMap.put (external, encodingArray [11]);

    external = "nokring";
    encodingMap.put (encodingArray [12], external);
    encodingMap.put (external, encodingArray [12]);

    external = "smaf";
    encodingMap.put (encodingArray [13], external);
    encodingMap.put (external, encodingArray [13]);
  }

  public static Object [] getEncodingArray () {
    return encodingArray;
  }

  public static Map getEncodingMap () {
    return encodingMap;
  }
}
