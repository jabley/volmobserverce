/**
 * ----------------------------------------------------------------------------
 * $Header: /src/voyager/com/volantis/mcs/build/javacc/enclosedbg/EncloseDebugLog.jj,v 1.4 2003/04/25 08:51:27 sumit Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2003.
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * -----------  --------------- -----------------------------------------------
 * 18-Mar-2003  sumit           VBM:2003022826 - JavaCC compiler spec to wrap 
 *								lonely logger.debug statements in an if block
 * 14-Apr-2003  Sumit           VBM:2003022826 - Modified to prevent trailing
 *                              comments being included in the wrapped block
 * 24-Apr-2003  Sumit           VBM:2003042211 - Fixed issue with logger.debug
 *                              within a nested {} block
 * ----------------------------------------------------------------------------
 */

/**
 * If you modify this file make sure you do not change the order of definition
 * of the tokens as it will affect parsing. Some tokens can be matched by other
 * wider pattern matching tokens and threefore get swallowed up mesing up
 * the parsing of the file
 */


PARSER_BEGIN(EncloseDebugLog)

package com.volantis.mcs.build.javacc.enclosedbg;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class EncloseDebugLog {

  static boolean init=false;
  public static void main(String args[]) throws ParseException {
    EncloseDebugLog parser = null;
    InputStream toParse = System.in;
  	try {
      if (args.length>0) {
        System.err.println("Parsing "+args[0]);
        toParse = new FileInputStream(args[0]);
      }
      if(init) {
        parser.ReInit(toParse);
      } else {
  	    parser = new EncloseDebugLog(toParse);
        init = true;
      }
    } catch (IOException ie) {
      System.out.println(ie.toString());
      System.exit(1);
    }
    parser.Input();
  }
}

PARSER_END(EncloseDebugLog)


TOKEN_MGR_DECLS :
{
  static StringBuffer currentColumn = new StringBuffer();
  static int braceCount = 0;
}

/* COMMENTS - plagiarised from the JavaCC java specification file*/

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] > 
}

/* Add spaces to current token but keep a Stringbuffer of our current indent */

MORE:
{
  " " {currentColumn.append(" ");} : DEFAULT 
}

/* We want access to all the java code in the file but we aren't interested in parsing it */
TOKEN :
{
	<REST_OF_FILE: ~[] > 
  { 
    currentColumn=new StringBuffer(); 
  }
}

MORE:
{
  "logger.debug" 
  { 
    // Indent the first logger.debug statement after the opening of the if
    image.insert(image.toString().indexOf("logger"),
                  "if(logger.isDebugEnabled()) {\n"
                    +currentColumn.toString());
  }
  : DEBUG_LOG_STARTED 
}

<DEBUG_LOG_STARTED>
MORE:
{
	<~[]> : DEBUG_LOG_STARTED
}

<DEBUG_LOG_STARTED>
TOKEN:
{
	<DEBUG_LOG : (");" | ") ;")> 
  {
    image.insert(image.toString().lastIndexOf("logger"),"    ");
    matchedToken.image=image.toString();
  } 
  : DEBUG_LOG_FOUND
}

<DEBUG_LOG_FOUND>
MORE:
{
  " " | "\n" | "\t" | "\r"
}

<DEBUG_LOG_FOUND>
MORE:
{
	<"logger.debug"> : DEBUG_LOG_STARTED
}

<DEBUG_LOG_FOUND>
TOKEN:
{
	< NORMAL_SOURCE : ~[] > {
        matchedToken.image="\n"+currentColumn.toString()+"}";
	    if(matchedToken.specialToken!=null) {
	        matchedToken.image = matchedToken.image.concat(matchedToken.specialToken.image);
	    }
	    matchedToken.image = matchedToken.image.concat(image.toString());
	}
  : DEFAULT
}

<DEBUG_LOG_FOUND>
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT_DEBUG_LOG_FOUND
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT_DEBUG_LOG_FOUND
|
  "/*" : IN_MULTI_LINE_COMMENT_DEBUG_LOG_FOUND
}

<IN_SINGLE_LINE_COMMENT_DEBUG_LOG_FOUND>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT_DEBUG_LOG_FOUND: "\n" | "\r" | "\r\n" > :DEBUG_LOG_FOUND
}

<IN_FORMAL_COMMENT_DEBUG_LOG_FOUND>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT_DEBUG_LOG_FOUND: "*/" > :DEBUG_LOG_FOUND
}

<IN_MULTI_LINE_COMMENT_DEBUG_LOG_FOUND>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT_DEBUG_LOG_FOUND: "*/" > :DEBUG_LOG_FOUND
}

<IN_SINGLE_LINE_COMMENT_DEBUG_LOG_FOUND,IN_FORMAL_COMMENT_DEBUG_LOG_FOUND,IN_MULTI_LINE_COMMENT_DEBUG_LOG_FOUND>
MORE :
{
  < ~[] > 
}
/* We need a token to test for an enclosed block. If we find it
pop into the ENCLOSED_BLOCK state */

TOKEN:
{
	<ENCLOSED_BLOCK_OPEN: "logger.isDebugEnabled"> : ENCLOSED_BLOCK
}

/* In ENCLOSED_BLOCK state grab everything except the trailing } 
 If we find that then pop into the ENCLOSED_BLOCK_END state */

/* If we find a { then we increment the counter. NOTE: the order of the
 definitions of this grammer is VERY important. This is before all other
 ENCLOSED_BLOCK state tokens so it will be matched before PRE_RBRACE_BODY.
 If it was after it would get swalllowed up and the parser would never see it
 */
 
<ENCLOSED_BLOCK>
SPECIAL_TOKEN:
{
	<PRE_LBRACE: (["{"]) > { 
		braceCount++;
	} : ENCLOSED_BLOCK
}

<ENCLOSED_BLOCK>
MORE:
{
	<PRE_RBRACE_BODY: (~["}"] ) > 
}
	
/* We have now reached the end of the ENCLOSED_BLOCK so pop back into DEFAULT
after creating a token of the code we have so far */
<ENCLOSED_BLOCK>
TOKEN:
{
	<ENCLOSED_BLOCK_TEXT: (["}"])> {
   		if(--braceCount==0) {
   			SwitchTo(DEFAULT);
   		} else {
   			SwitchTo(ENCLOSED_BLOCK);
   		}
	}
}

void Input() :
{}
{
	( Process() )*  <EOF>
}

void Process() :
{ 
	Token rof=null, dbglog=null, normalSource=null, 
	    enclosedBlockOpen=null, enclosedBlockText=null;
	boolean enclosed=false; 
}

{
  ( rof = <REST_OF_FILE> | dbglog = <DEBUG_LOG> 
  		| enclosedBlockOpen = <ENCLOSED_BLOCK_OPEN> 
  		| enclosedBlockText = <ENCLOSED_BLOCK_TEXT>
      | normalSource=<NORMAL_SOURCE> )
  {
    
    if (normalSource!=null) {
      System.out.print(normalSource.image);
    } else {
        printComments(getToken(0));
        if(rof!=null) {
 		    System.out.print(rof.image);
        } else if (enclosedBlockOpen!=null){
            System.out.print(enclosedBlockOpen.image);
            enclosed=true;
        } else if(enclosedBlockText!=null){
            enclosed=false;
            System.out.print(enclosedBlockText.image);
        } else if(dbglog!=null && !enclosed) {
            System.out.print (dbglog.image);
        } 
    }
  }
}

/* Print out the comments, which are created as special tokens */

void printComments(Token token) :
{}
{
	{
	    if (token.specialToken == null) {
	        return;
	    }
	    // The above statement determines that there are no special tokens
	    // and returns control to the caller.
	    Token tmp_t = token.specialToken;
	    while (tmp_t.specialToken != null) tmp_t = tmp_t.specialToken;
	    // The above line walks back the special token chain until it
	    // reaches the first special token after the previous regular
	    // token.
	    while (tmp_t != null) {
	        System.out.print(tmp_t.image);
	        tmp_t = tmp_t.next;
	    }
	}
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 09-Dec-04	6417/1	philws	VBM:2004120703 Committing tidy up

 ===========================================================================
*/
