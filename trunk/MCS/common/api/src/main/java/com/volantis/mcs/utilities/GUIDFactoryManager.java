/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
package com.volantis.mcs.utilities;

import com.volantis.synergetics.factory.MetaDefaultFactory;

/**
 * Manager to create GUIDFactories.
 */
public abstract class GUIDFactoryManager {

    /**
     * Obtain a reference to the default factory implementation.
     */
    private static final MetaDefaultFactory metaDefaultFactory;

    static {
        metaDefaultFactory = new MetaDefaultFactory(
            "com.volantis.mcs.utilities.DefaultGUIDFactoryManager",
            GUIDFactoryManager.class.getClassLoader());
    }

    /**
     * Get the default instance of this factory.
     *
     * @return The default instance of this factory.
     */
    public static GUIDFactoryManager getDefaultInstance() {
        return (GUIDFactoryManager) metaDefaultFactory.getDefaultFactoryInstance();
    }

    /**
     * Creates a new GUIDFactory using the specified ID. Calling this method
     * twice will generate two factories, even if the same ID is used.
     *
     * <p>ID's are used to further reduce the possibility of generating equal
     * GUIDs, not to identify the GUID factory. If two factories are created
     * using different IDs then GUIDs generated by the first factory are
     * guaranteed to be different from the GUIDs generated by the other
     * factory.</p>
     *
     * @param id the ID to be used for the factory
     * @return the created GUID factory
     */
    public abstract GUIDFactory createGuidFactory(long id);
}
