/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * $Header: /src/voyager/testsuite/unit/com/volantis/mcs/utilities/VolantisTestCase.java,v 1.21 2003/04/28 16:14:55 aboyd Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2000. 
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * ---------    --------------- -----------------------------------------------
 * 08-Oct-02    Allan           VBM:2002100208 - Created. A testcase for
 *                              Volantis.java.
 * 10-Oct-02    Allan           VBM:2002100801 - Added initializeProtocol test
 *                              methods for all protocols.
 * 11-Oct-02    Allan           VBM:2002101101 - Added 
 *                              testInitializeProtocolsInitialized() and
 *                              MyServletContext inner class.
 * 14-Oct-02    Sumit           VBM:2002091202 Removed import of 
 *                              RemoteCacheInterface
 * 16-Oct-02    Chris W         VBM:2002092306 - Added testInitializeProtocolsMHTML
 *                              Changed from the deprecated assert method to
 *                              assertTrue.
 * 21-Oct-02    Geoff           VBM:2002102105 - Added test for license 
 *                              failure, removed stacks of imports.
 * 03-Dec-02    Geoff           VBM:2002120306 - Removed autogenerated 
 *                              non-tests for code that was not used - sigh!
 * 17-Dec-02    Phil W-S        VBM:2002121001 - Add testing of initialization
 *                              of the StyleSheetConfiguration from the
 *                              configuration file.
 * 13-Jan-03    Byron           VBM:2003010910 - Add testing of initialization
 *                              of the connection-timeout from the
 *                              configuration file.
 * 05-Feb-03    Byron           VBM:2003013109 - Added testRemoteRepository-
 *                              Connection(No)PagePackaging. Created temporary
 *                              license once for all tests for this class. 
 * 12-Feb-03    Geoff           VBM:2003021110 - Roll back the single license
 *                              stuff above, add test license generation for 
 *                              some more tests and use the new LicenseManager
 *                              useLicenseWith() method.
 * 12-Feb-03    Geoff           VBM:2003021110 - Remove references to 
 *                              ConfigFileBuilder.getSingleton().
 * 20-Feb-03    Ian             VBM:2002122011 - Removed WapTV1_WMLVersion1_2
 *                              protocol.
 * 21-Feb-03    Geoff           VBM:2003022004 - Use new AppManager rather 
 *                              than less capable LicenseManager.
 * 25-Feb-03    Geoff           VBM:2003022506 - update to do comments to 
 *                              reflect external state changes, fix formatting.
 * 25-Feb-03    Geoff           VBM:2003021005 - add testInitialise fixtures.
 * 26-Feb-03    Geoff           VBM:2003021005 - fix portability issue in 
 *                              testInitialiseLicenseFailure(), add comments 
 *                              to further explain approach taken for all 
 *                              testInitialise fixtures.
 * 06-Mar-03    Geoff           VBM:2003010904 - add methods to test the
 *                              initialize method of Volantis, refactor to use
 *                              new ConfigValue stuff.
 * 11-Mar-03    Geoff           VBM:2002112102 - Refactor value property names
 *                              for consistency.
 * 25-Mar-03    Geoff           VBM:2003042306 - Use refactored 
 *                              AppConfigurator and use new AppExecutor and 
 *                              AppContext which allows us to access the 
 *                              context properly.
 * 28-Apr-03    Allan           VBM:2003042802 - Updated to handle 
 *                              VoiceXMLVersion1_0 move to voicexml package. 
 * 29-Apr-03    Chris W         VBM:2003041503 - Added methods to test jsp
 *                              character references. testJspWriteDirect,
 *                              testJspWriteDirectDefault, testJspSupportRequired,
 *                              testJspSupportRequiredDefault, testJspResolve..
 *                              ..CharacterReference and testJspResolveCharac..
 *                              terReferenceDefault are the method names.
 * ----------------------------------------------------------------------------
 */
package com.volantis.mcs.runtime;

import com.volantis.mcs.integration.transcoder.ICSWithGIFTransforceCompatibility;
import com.volantis.mcs.policies.PolicyType;
import com.volantis.mcs.runtime.configuration.ArgumentConfiguration;
import com.volantis.mcs.runtime.configuration.MarkupPluginConfiguration;
import com.volantis.mcs.runtime.configuration.ProtocolsConfiguration;
import com.volantis.mcs.runtime.configuration.WMLOutputPreference;
import com.volantis.mcs.testtools.application.AppContext;
import com.volantis.mcs.testtools.application.AppExecutor;
import com.volantis.mcs.testtools.application.AppManager;
import com.volantis.mcs.testtools.application.ConfigChecker;
import com.volantis.mcs.testtools.application.DefaultAppConfigurator;
import com.volantis.mcs.testtools.application.MandatoryAppConfigurator;
import com.volantis.mcs.testtools.application.MinimalXmlRepositoryAppConfigurator;
import com.volantis.synergetics.testtools.Executor;
import com.volantis.synergetics.testtools.HypersonicManager;
import com.volantis.testtools.config.ConfigFileBuilder;
import com.volantis.testtools.config.ConfigProjectPoliciesJdbcValue;
import com.volantis.testtools.config.ConfigValue;
import com.volantis.testtools.config.ConfigValuePolicyCache;
import com.volantis.testtools.config.ConfigValueRemotePolicy;
import com.volantis.testtools.config.ConfigValueRemoteQuota;
import com.volantis.testtools.io.IOUtils;
import com.volantis.testtools.stubs.ServletContextStub;
import junit.framework.TestCase;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * This class unit test the Volantis class.
 */
public class VolantisTestCase extends TestCase {

    private ServletContextStub servletContext;
    private Volantis volantis;

    private File styleBaseDir;

    /**
     * Set up the bean and an empty ServletContext.
     */
    public void setUp() throws Exception{

        styleBaseDir = IOUtils.createDirectory(
                File.createTempFile("styleBaseDir", "", new File("/tmp")));
        volantis = new TestableVolantis();
        servletContext = new ServletContextStub();
    }

    /**
     * Destroy the objects created by the previous set up.
     */
    public void tearDown() {
        volantis = null;
        servletContext = null;
        IOUtils.deleteDir(styleBaseDir);
    }

    /**
     * Ensure that we can initialise Volantis with the default license
     * and application configuration.
     * <p>
     * This captures stderr and checks there is nothing unexpected.
     */ 
    public void testInitialiseSuccess() throws Exception {
        AppManager mgr = new AppManager(volantis, servletContext);
        mgr.useAppWith(new AppExecutor() {
            public void execute(AppContext context) throws Exception {
                String err = context.getConsoleOutput().getErr();
                // Note: this is deliberately as specific as possible to 
                // ensure that ANY changes in the way that volantis 
                // initialisation affects System.err are at least found here; 
                // even if we get false positive matches this is better than 
                // the alternative.
                assertEquals("No error message", "", err);
            }
        });
    }

    public void testInitializeNull() throws Exception {
        ConfigChecker checker = 
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                super.setUp(config);
            }
        });
        checker.checkInitialisation();
    }

    /**
     * Ensure that the basic and XML repository stuff is parsed correctly from
     * the mcs-config.xml file by Volantis initialisation.
     *  
     * @throws Exception
     */ 
    public void testInitializeBasicAndXMLRepositoryValues() throws Exception {
        ConfigChecker checker = 
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                super.setUp(config);
                // Create a basic, valid set of configuration values.
                // (We do this from scratch rather than reuse another 
                // configurator instance to ensure we get everything.)
                // Simple attributes
                // config.licenseDirectory provided by superclass
                config.pageMessageHeading = "a nice new message";
                // Base directories
                config.chartImagesBase = "somechartimages";
                config.modesetsBase = "somemodesets";
                config.scriptsBase = "somescripts";
                // Local repository
                // config.repositoryType provided by superclass 
                // config.repositoryXmlFile provided by superclass
                // Default asset url prefixes
                config.audioUrlPrefix = "/audio/";
                config.dynvisUrlPrefix = "/dynvis/";
                config.imageUrlPrefix = "/images/";
                config.scriptUrlPrefix = "/scripts/";
                config.textUrlPrefix = "/text/";
                // App server related
                config.internalUrl = "exampleInternalUrl";
                config.baseUrl = "exampleBaseUrl";
                config.pageBase = "examplePageBase";
                // Stylesheet related
                config.styleBaseUrl = "exampleBaseUrl";
                // config.styleCacheEnabled = Boolean.TRUE; requires theme caching too
                // Debug related
                config.debugComments = Boolean.TRUE;
                config.debugLogPageOutput = Boolean.TRUE;
                // Log4j 
                // config.log4jXmlConfigFile provided by superclass

            }
        });
        checker.checkInitialisation();
    }
    
    /**
     * Test that the configuration for markup plugins is correctly parsed.     
     */ 
    public void testInitializeMarkupPlugins() throws Exception {
        ConfigChecker checker =
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                super.setUp(config);
                
                List argList = makeArgumentList("myArg", "argValue", 3);
                config.markupPlugins = makePluginConfigurationList("myPlugin",
                        "com.volantis.mcs.integration.TestMarkupPlugin", 
                        "application", argList, 6);
            }
        });
        checker.checkInitialisation();
    }

    public void testInitializeAssetTranscoderPlugin() throws Exception {
        ConfigChecker checker =
            new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            // Inherit javadoc.
            public void setUp(ConfigValue config) throws Exception {
                super.setUp(config);

                config.assetTranscoderPluginClass =
                     ICSWithGIFTransforceCompatibility.class.getName();
            }
        });

        checker.checkInitialisation();
    }

    /**
     * Get a list of MarkupPluginConfiguration for use in testing the
     * configuraion markup.
     * @param name The name of the plugin
     * @param className The classname of the plugin
     * @param scope The scope of the plugin
     * @param args A List of ArgumentConfiguration sub elements
     * @param count The number of MarkupPluginConfiguration to add to the list
     * @return a List of MarkupPluginConfiguration
     */ 
    private List makePluginConfigurationList(String name, String className, 
                                             String scope, List args, 
                                             int count) {
        List result = new ArrayList(count);
        for (int i = 0; i < count; i++) {
            MarkupPluginConfiguration mpc = new MarkupPluginConfiguration();
            mpc.setName(name + i);
            mpc.setClassName(className);
            mpc.setScope(scope);
            for (int j = 0; j < args.size(); j++) {
                ArgumentConfiguration argumentConfiguration = 
                        (ArgumentConfiguration) args.get(j);
                
                mpc.addArgument(argumentConfiguration);    
            }
            result.add(mpc);
        }
        return result;
    }
    
    /**
     * Create a list of ArgumentConfiguration
     * @param name the name for the ArgumentConfigurations
     * @param value the value for the ArgumentConfigurations
     * @param count the number of ArgumentConfigurations to create
     * @return a list of ArgumentConfiguration
     */ 
    private List makeArgumentList(String name, String value, int count) {
        List result = new ArrayList(count);
        for (int i=0; i<count; i++) {
            ArgumentConfiguration ac = new ArgumentConfiguration();
            ac.setName(name + i);
            ac.setValue(value + i);
            result.add(ac);
        }
        return result;
    }
    
    /**
     * Ensure that the JDBC repository stuff is parsed correctly from
     * the mcs-config.xml file by Volantis initialisation.
     * 
     * @throws Exception
     */ 
    public void NOTESTtestInitialiseRepositoryPropsJdbc() throws Exception {
        // TODO: fix this test by creating a valid hypersonic repository?
        // NOTE: This is disabled as it is broken. It requires a proper
        // device repository to be created for initialisation to complete.
        // It only "worked" originally because of a bug in
        // Volantis.initializeInternal where exceptions were thrown away.
        final HypersonicManager dbMgr = new HypersonicManager(
                HypersonicManager.IN_MEMORY_SOURCE);
        dbMgr.useCleanupWith(new Executor() {
            public void execute() throws Exception {
                ConfigChecker checker = 
                        new ConfigChecker(volantis, 
                                servletContext);
                checker.setAppConf(new MandatoryAppConfigurator() {
                    public void setUp(ConfigValue config) throws Exception {
                        // Include mandatory stuff.
                        super.setUp(config);
                        // Add in some repository properties
                        config.repositoryType = "odbc";
                        // vaguely correct values for the db we are using
                        config.repositoryUser = 
                                HypersonicManager.DEFAULT_USERNAME; 
                        config.repositoryPassword = 
                                HypersonicManager.DEFAULT_PASSWORD; 
                        config.repositoryVendor = "hypersonic"; 
                        config.repositorySource = dbMgr.getSource();
                        ConfigProjectPoliciesJdbcValue jdbcPolicies = 
                                new ConfigProjectPoliciesJdbcValue();
                        jdbcPolicies.projectName = "#DefaultProject";
                        config.defaultProjectPolicies = jdbcPolicies;
                        // These are unused by Hypersonic but we can check.
                        config.repositoryHost = "an unknown host";
                        config.repositoryPort = new Integer(999);
                        config.repositoryDbPoolMax = new Integer(999);
                        config.repositoryKeepConnectionsAlive = Boolean.TRUE;
                        config.repositoryConnectionPollInterval = 
                                new Integer(60);
                        config.standardJDBCDeviceRepositoryProject = 
                                "#DefaultProject";
                    }
                });
                checker.checkInitialisation();
            }
        });
    }

    /**
     * Ensure that the local policy cache stuff is parsed correctly from
     * the mcs-config.xml file by Volantis initialisation.
     * 
     * @throws Exception
     */ 
    public void testInitialiseLocalPolicyCachePropertyValues() throws Exception {
        ConfigChecker checker = 
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Include minimal requirements for dummy XML repository.
                super.setUp(config);
                // Add in the theme cache stuff
                ConfigValuePolicyCache cache = new ConfigValuePolicyCache();
                cache.policyType = PolicyType.THEME;
                cache.strategy = "least-recently-used";
                cache.maxEntries = new Integer(1111);
                cache.timeout = new Integer(2222);
                config.policyCaches.put("theme-cache", cache);
            }
        });
        checker.checkInitialisation();
    }        

    /**
     * Ensure that the remote policy cache stuff is parsed correctly from
     * the mcs-config.xml file by Volantis initialisation.
     * 
     * @throws Exception
     */ 
    public void testInitialiseRemotePolicyCachePropertyValues() throws Exception {
        ConfigChecker checker = 
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Include minimal requirements for dummy XML repository.
                super.setUp(config);
                // Add in the remote policy cache stuff
                // First add an entry for the global settings
                ConfigValueRemotePolicy remoteCacheGlobal = 
                        new ConfigValueRemotePolicy();
                remoteCacheGlobal.cachePolicies = Boolean.FALSE;
                remoteCacheGlobal.defaultTimeToLive = new Integer(1);
                remoteCacheGlobal.defaultRetryFailedRetrieval = Boolean.FALSE;
                remoteCacheGlobal.defaultRetryInterval = new Integer(2);
                remoteCacheGlobal.defaultRetryMaxCount = new Integer(3);
                remoteCacheGlobal.defaultRetainDuringRetry = Boolean.FALSE;
                remoteCacheGlobal.maxCacheSize = new Integer(4);
                remoteCacheGlobal.maxTimeToLive = new Integer(5);
                remoteCacheGlobal.allowRetryFailedRetrieval = Boolean.TRUE;
                remoteCacheGlobal.minRetryInterval = new Integer(6);
                remoteCacheGlobal.maxRetryMaxCount = new Integer(7);
                remoteCacheGlobal.allowRetainDuringRetry = Boolean.TRUE;
                config.remotePolicyCaches = remoteCacheGlobal;
            }
        });
        checker.checkInitialisation();
    }

    /**
     * Ensure that the remote policy quota stuff is parsed correctly from
     * the mcs-config.xml file by Volantis initialisation.
     * 
     * @throws Exception
     */ 
    public void testInitialiseRemotePolicyQuotaPropertyValues() throws Exception {
        ConfigChecker checker = 
                new ConfigChecker(volantis, servletContext);
        checker.setAppConf(new MinimalXmlRepositoryAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Include minimal requirements for dummy XML repository.
                super.setUp(config);
                // Add in the remote quota cache stuff
                // First an entry for the global settings 
                List quotaListGlobal = new ArrayList();
                quotaListGlobal.add(new ConfigValueRemoteQuota(
                        "http://global-one.com", 60));
                quotaListGlobal.add(new ConfigValueRemoteQuota(
                        "http://global-two.com", 40));
                config.remotePolicyQuotaList = quotaListGlobal;

                config.remoteRepositoryTimeout = new Integer(9);
            }
        });
        checker.checkInitialisation();
    }
    

    /**
     * Test to see what the configuration value is for page packaging if the
     * value is set to null (does not exist in the config file). The default
     * should be false.
     *
     * @throws Exception if an error occurs.
     */
    public void testRemoteRepositoryConnectionNoPagePackaging() 
            throws Exception {
        AppManager mgr = new AppManager(volantis, servletContext);
        mgr.setAppConf(new DefaultAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Set up default values...
                super.setUp(config);
                // ... apart from what we are testing.
                config.pagePackagingMimeEnabled = Boolean.TRUE;
                config.pagePackagingMimeEnabled = null;
            }
        });
        mgr.useAppWith(new AppExecutor() {
            public void execute(AppContext context) {
                assertEquals("Page packaging not as", false,
                        volantis.isPagePackagingMimeEnabled());
            }
        });
    }

    /**
     * Test to see what the configuration value is for page packaging if the
     * value is set to null (does not exist in the config file). The default
     * should be false.
     *
     * @throws Exception if an error occurs.
     */
    public void testRemoteRepositoryConnectionPagePackaging()
            throws Exception {
        AppManager mgr = new AppManager(volantis, servletContext);
        mgr.setAppConf(new DefaultAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Set up default values...
                super.setUp(config);
                // ... apart from what we are testing.
                config.pagePackagingMimeEnabled = Boolean.TRUE;
            }
        });
        mgr.useAppWith(new AppExecutor() {
            public void execute(AppContext context) {
                assertEquals("Page packaging not as", true,
                        volantis.isPagePackagingMimeEnabled());
            }
        });
    }

    public void testProtocolsConfigurationAbsent() throws Exception {
        AppManager mgr = new AppManager(volantis, servletContext);
        mgr.setAppConf(new DefaultAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Set up default values...
                super.setUp(config);
            }
        });
        mgr.useAppWith(new AppExecutor() {
            public void execute(AppContext context) {
                ProtocolsConfiguration pc = 
                    volantis.getProtocolsConfiguration();
                assertNotNull("Protocols configuration should exist", pc );
                assertEquals( "Preferred output should be WMLC", 
                    WMLOutputPreference.WMLC, pc.getPreferredOutputFormat());
            }
        });
    }    

    public void testProtocolsConfigurationPresent() throws Exception {
        AppManager mgr = new AppManager(volantis, servletContext);
        mgr.setAppConf(new DefaultAppConfigurator() {
            public void setUp(ConfigValue config) throws Exception {
                // Set up default values...
                super.setUp(config);
                config.wmlPreferredOutputFormat = "wml";
            }
        });
        mgr.useAppWith(new AppExecutor() {
            public void execute(AppContext context) {
                ProtocolsConfiguration pc = 
                    volantis.getProtocolsConfiguration();
                assertNotNull("Protocols configuration should exist", pc );
                assertEquals( "Preferred output should be WML", 
                    WMLOutputPreference.WML, pc.getPreferredOutputFormat());
            }
        });
    }

    public void testInitializeNamedProjects() throws Exception {
        AppManager manager = new AppManager(volantis, servletContext);
        manager.useAppWith(new AppExecutor() {
           public void execute(AppContext context) {
               RuntimeProject one = volantis.getPredefinedProject(
                       ConfigFileBuilder.DEFAULT_NAMED_PROJECT_ONE);
               RuntimeProject two = volantis.getPredefinedProject(
                       ConfigFileBuilder.DEFAULT_NAMED_PROJECT_TWO);
               assertNotNull("Project should exist", one);
               assertNotNull("Project should exits", two);
               assertEquals("Project names should match", one.getName(),
                       ConfigFileBuilder.DEFAULT_NAMED_PROJECT_ONE);
               assertEquals("Project names should match", two.getName(),
                       ConfigFileBuilder.DEFAULT_NAMED_PROJECT_TWO);
           }
        });
    }

    public VolantisTestCase(String name) {
        super(name);
    }
    

    public class MyServletContext extends ServletContextStub {
        /**
         * Set the realPath property.
         * @param s The realPath.
         */
        public void setRealPath(String s) {
            realPath = s;
        }
    };
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 13-Nov-05	9896/1	geoff	VBM:2005101906 Avoid using JDOM in MCS at runtime: rewrite runtime XML device repository

 02-Sep-05	9391/3	emma	VBM:2005082604 Supermerge required

 01-Sep-05	9375/2	geoff	VBM:2005082301 XDIMECP: clean up protocol creation

 31-Aug-05	9391/1	emma	VBM:2005082604 Integrate the new XDIMEContentHandler and refactor NamespaceSwitchContentHandler (& Map) as required

 22-Aug-05	9298/1	geoff	VBM:2005080402 Style portlets and inclusions correctly.

 05-Apr-05	7513/1	geoff	VBM:2003100606 DOMOutputBuffer allows creation of text which renders incorrectly in WML

 11-Mar-05	6842/1	emma	VBM:2005020302 Making file references in config files relative to those files

 02-Feb-05	6828/1	matthew	VBM:2005012601 Allow new Cache mechanism to work with MCS (not optimally though)

 08-Dec-04	6416/5	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 22-Sep-04	5604/1	pcameron	VBM:2004092101 Added asset group flushing to the Volantis bean

 22-Sep-04	5559/4	geoff	VBM:2004091506 Support GIF as transcoded image type in MCS and ICS

 21-Sep-04	5559/1	geoff	VBM:2004091506 Support GIF as transcoded image type in MCS and ICS

 21-Sep-04	5567/1	allan	VBM:2004092010 Handle multi-valued device policy selection.

 26-Aug-04	5294/1	geoff	VBM:2004082405 Reduce unnecessary background threads in testsuite

 29-Jul-04	4991/1	byron	VBM:2004070510 VTS classes need renaming in MCS to ICS

 24-Jun-04	4726/1	claire	VBM:2004060803 Implementation of internal style sheet caching

 21-Apr-04	3973/1	steve	VBM:2004042002 Encode #nbsp;

 25-Mar-04	3386/4	steve	VBM:2004030901 Supermerged and merged back with Proteus

 25-Mar-04	3386/1	steve	VBM:2004030901 Supermerged and merged back with Proteus

 11-Mar-04	3370/1	steve	VBM:2004030901 Null exception if protocols element is missing in config

 24-Mar-04	3482/2	geoff	VBM:2004030205 The runtime needs to support the jdbc-repository device repository configuration

 23-Mar-04	3555/1	allan	VBM:2004032205 Patch performance fixes from MCS 3.0GA

 23-Mar-04	3512/1	allan	VBM:2004032205 MCS performance enhancements.

 09-Mar-04	2867/1	ianw	VBM:2004012603 Rationalised data source configuration and refactored code to cope with validated config schema

 25-Feb-04	3118/5	geoff	VBM:2003121717 External CSS caching can not be enabled. (supermerge and add testcase javadoc)

 18-Feb-04	3118/3	geoff	VBM:2003121717 External CSS caching can not be enabled.

 18-Feb-04	3118/1	geoff	VBM:2003121717 External CSS caching can not be enabled.

 18-Feb-04	3111/1	geoff	VBM:2003121717 External CSS caching can not be enabled.

 10-Feb-04	2931/1	claire	VBM:2004021008 Added named projects from the config

 05-Feb-04	2846/1	claire	VBM:2004011915 Asset URL computation based on base and prefix

 30-Jan-04	2807/2	geoff	VBM:2003121709 Import/Export: JDBC Accessors: Add support for the default jdbc project

 06-Jan-04	2271/1	geoff	VBM:2003121716 Import/Export: Schemify configuration file: Enable schema validation

 18-Dec-03	2246/1	geoff	VBM:2003121715 debrand config file

 29-Oct-03	1704/1	geoff	VBM:2003102906 HTMLVersion4_0_IE protocol is throwing an Inetrnal error under Tomcat

 15-Oct-03	1517/6	pcameron	VBM:2003100706 Further changes associated with license removal

 13-Oct-03	1517/2	pcameron	VBM:2003100706 Removed all traces of licensing from MCS

 13-Oct-03	1547/1	philws	VBM:2003101002 Fix asset-transcoder plugin attribute reading

 03-Sep-03	1295/3	geoff	VBM:2003082109 rework issues

 02-Sep-03	1295/1	geoff	VBM:2003082109 Certify & package GUIs, runtime & CLIs against IBM JRE/JDK 1.4

 20-Aug-03	1207/1	adrian	VBM:2003032804 removed suite and main methods from testcase classes

 18-Aug-03	1146/3	geoff	VBM:2003042305 Add tearDown() to AppConfigurator

 18-Aug-03	1146/1	geoff	VBM:2003042305 Add tearDown() to AppConfigurator

 18-Aug-03	1144/1	geoff	VBM:2003042305 Add tearDown() to AppConfigurator

 18-Aug-03	670/2	geoff	VBM:2003042305 Add tearDown() to AppConfigurator

 16-Jul-03	757/1	adrian	VBM:2003070706 Added IAPI, MarkupPlugin and configuration.

 10-Jul-03	761/2	adrian	VBM:2003070801 Added integration test to Volantis testcase to test markup plugin configuration

 30-Jun-03	605/1	geoff	VBM:2003060607 port from metis to mimas

 25-Jun-03	544/2	geoff	VBM:2003061007 Allow JSPs to create binary output

 25-Jun-03	540/1	geoff	VBM:2003061709 remove mariner config debug enabled attribute

 10-Jun-03	356/1	allan	VBM:2003060907 Moved some common testtools into Synergetics

 ===========================================================================
*/
