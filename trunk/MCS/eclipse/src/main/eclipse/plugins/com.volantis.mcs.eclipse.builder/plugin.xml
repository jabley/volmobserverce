<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<?eclipse version="${build.version.eclipse}"?>
<plugin
    id="com.volantis.mcs.eclipse.builder"
    name="%pluginName"
    version="${version.plugins.mcs}"
    provider-name="%providerName"
    class="com.volantis.mcs.eclipse.builder.BuilderPlugin">

    <runtime>
        <library name="mcs.eclipse-builder-api-${build.version.mcs}.jar">
            <export name="*"/>
            <packages prefix="com.volantis.mcs.eclipse.builder"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.common.policies"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.editors.common"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.preference"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.properties"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.wizards.projects"/>
            <packages prefix="com.volantis.mcs.eclipse.core"/>
        </library>
        <library name="mcs.eclipse-builder-impl-${build.version.mcs}.jar">
            <export name="*"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.common.policies.impl"/>
            <packages prefix="com.volantis.mcs.eclipse.builder.editors.impl"/>
        </library>
    </runtime>

    <!--
        NOTE: The order of the plugins is significant because Eclipse
        uses the order to determine which ClassLoader to use. This order
        must be the same across all plugins. If the order differs then
        different class loaders may be used to load a specific class.
        This may cause code to fail. For example, identity comparisons,
        instanceof and class casting operations may fail. The typesafe
        enum and singleton patterns should be used carefully to avoid
        this problem. This ordering issue arose when using the typesafe
        enum NamedColor.
        You must use the following plugin order:
            com.volantis.mcs.eclipse.controls
            com.volantis.mcs.eclipse.validation
            com.volantis.mcs.eclipse.common
    -->
    <requires>
        <import plugin="com.volantis.mcs.common" version="${version.plugins.mcs}"/>
        <import plugin="com.volantis.mcs.eclipse.common" version="${version.plugins.mcs}"/>
        <import plugin="com.volantis.mcs.eclipse.controls" version="${version.plugins.mcs}"/>
        <import plugin="com.volantis.mcs.eclipse.validation" version="${version.plugins.mcs}"/>
        <import plugin="com.volantis.synergetics" version="${version.plugins.mcs}"/>
        <import plugin="com.volantis.xml.xerces" version="${version.plugins.xml}"/>
        <import plugin="org.eclipse.core.resources"/>
        <import plugin="org.eclipse.core.runtime.compatibility"/>
        <import plugin="org.eclipse.ui.forms"/>
        <import plugin="org.eclipse.ui.ide"/>
        <import plugin="org.eclipse.ui.views"/>
        <import plugin="org.eclipse.jface.text"/>
        <import plugin="org.eclipse.team.core"/>
        <import plugin="org.eclipse.ui.workbench.texteditor"/>
        <import plugin="org.eclipse.ui.editors"/>
        <import plugin="org.eclipse.search"/>
        <import plugin="org.eclipse.swt"/>
        <import plugin="org.eclipse.ui"/>
        <import plugin="org.jakarta.log4j" version="${version.plugins.log4j}"/>
    </requires>
</plugin>
