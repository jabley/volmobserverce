<?xml version="1.0"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->

<root xmlns:special="http://test.volantis.com/dissection">
    <special:SHARD-LINK-GROUP name="AN032">
        <p>
            <special:SHARD-LINK action="next">
                <a special:href="[url]">Next</a>
            </special:SHARD-LINK>
            <special:SHARD-LINK-CONDITIONAL rule="separator">
                <br/>
            </special:SHARD-LINK-CONDITIONAL>
            <special:SHARD-LINK action="previous">
                <a special:href="[url]">Previous</a>
            </special:SHARD-LINK>
        </p>
    </special:SHARD-LINK-GROUP>
    <special:DISSECTABLE-AREA name="AN032">
        <body>
            <section>
                <heading>Introduction</heading>
                <p>This paper describes a number of utility functions used within Mariner. The particular utilities described here are those that are shared across the system and that also require architectural definitions for their operation.</p>
            </section>
            <section>
                <heading>Generation of Locally Unique Identifiers</heading>
                <p>Increasingly within Mariner, there is a need to generate identifiers that are unique during the execution of the application server in which it is running. Previously, it was sufficient to generate identifiers that were unique within a generated page, for example. However, more advanced approaches to caching and page generation, particularly in portal environments, mean that there is the possibility that material from multiple generation requests might be combined within a single page.</p>
                <p>Locally unique identifiers are defined as identifiers that are unique during the execution of the application server in which Mariner is running. Generation of such identifiers, whilst superficially simple, has potential performance implications on the server. The specific approach chosen is designed to try and minimise the effect on overall performance.</p>
                <section>
                    <heading>Basic Approach</heading>
                    <p>In their simplest form, locally unique identifiers can be generated by incrementing a counter. The first id is 0, the second is 1 and so on. However, this mechanism requires that the counter be modified and stored to record the current value, so that the next value can be issued safe in the knowledge that it is locally unique. This update operation must be thread-safe and needs to be serialised. In a typical, busy system, there may be dozens of concurrent requests for new, unique identifiers being processed at any one time. The update of the counter can become a serious bottleneck in the entire system.</p>
                    <section>
                        <heading>Divide and Conquer</heading>
                        <p>The bottleneck can be alleviated by minimising the number of times that an identifier is requested.</p>
                        <section>
                            <heading>Reducing the Number of Request for Ids</heading>
                            <p>It is possible to minimise the number of serialized requests for unique identifiers by using the generated identifier as a base for an identifier generator which does not require serialization. Using this approach it is possible to reduce the number of serialised requests for unique identifiers to one per page. The page generation code uses this as the basis for the identifiers that it generates within the page.</p>
                        </section>
                    </section>
                </section>
                <section>
                    <heading>General Form of Locally Unique Identifiers</heading>
                    <p>In Mariner, locally unique identifiers are strings of the general form:</p>
                    <p>T-R-P</p>
                    <p>In this definition, </p>
                    <dl>
                        <dt>T</dt>
                        <dd>represents the string which identifies the type of the identifier, i.e. what it will be used for.</dd>
                        <dt>-</dt>
                        <dd>represents a separator such as an _ (underscore) or – (hyphen). The separator which should actually be used depends on the type of the identifier. If it is a JavaScript variable or function then it must be an _ (underscore) as – (hypen) is not valid in a JavaScript variable.</dd>
                        <dt>R</dt>
                        <dd>represents the string which uniquely identifies the request. For locally unique identifiers it should consist of a single alpha character “M” followed by a number of hexadecimal characters (H).</dd>
                        <dt>P</dt>
                        <dd>represents the additional suffix which is added by the page generation code which distinguishes between the identifiers of each type within the page. This should consist of a number of hexadecimal characters (H).</dd>
                        <dt>H</dt>
                        <dd>In this set of definitions, a hexadecimal character is a printable form of one of the characters 0-9 and A, B, C, D, E and F.</dd>
                    </dl>
                    <section>
                        <heading>An Example</heading>
                        <p>Suppose we need to generate identifiers for the JavaScript associated with a menu and all of its menu items. Because this is a menu JavaScript  identifier, its prefix is VA and the separator between parts of the identifier are _ (underscore) not – (hyphen). A request to the menu JavaScript  identifier generator retrieves the string VA_315CA2_1. In the menu code, we can now generate the identifiers for the JavaScript items by adding suffixes generating values such as VA-315CA2-0, VA-315CA2-1, VA-315CA2-2, VA-315CA2-3, VA-315CA2-4 and so on.</p>
                        <p>Identifiers for the JavaScript items for the entire menu can be generated by the menu code with only a single request to the id generator.</p>
                    </section>
                </section>
                <section>
                    <heading>Wrapping  </heading>
                    <p>Because this approach to id generation is based on incrementing a counter, there will come a time when the counter overflows and wraps. The size of the counter determines when this wrapping event occurs.</p>
                    <p>A 32 bit counter is the most appropriate for this application. Its contents can be represented as a string with a maximum of eight digits, ensuring that identifiers do not become too cumbersome.</p>
                    <p>In addition, a server that is continuously generating 100 unique identifiers of a particular type per second, it will take about 12 months before wrapping occurs.</p>
                    <p>Even if wrapping occurs during server operation, the newest identifiers will have values that will not clash with cached values unless the cached material has been present since the server started. Effectively, the oldest and newest identifiers are always separated by 12 months of continuous operation.</p>
                    <p>Consequently, clashes are extremely unlikely with this approach.</p>
                </section>
                <section>
                    <heading>Reserved Prefixes</heading>
                    <p>Volantis reserves the use of identifiers for any aspect of a generated page that begin</p>
                    <p>Vx-</p>
                    <p>where x is any valid character for that identifier and – is a separator suitable for the identifier.</p>
                </section>
                <section>
                    <heading>Implementation</heading>
                    <p>The id generators are implemented as methods of the MarinerPageContext. Particular generators are discussed in <reference refid="ref0">Specific Generators</reference>
, on page 5.</p>
                    <p>The MarinerPageContext must use the following method in the Volantis bean to retrieve the unique identifier for the request. This method should be called at most once per MarinerPageContext instance but only if a unique id is actually needed in the page. This method is not synchronized as that will block access to other synchronized methods in the Volantis bean but internally it must synchronize on an object to protect the counter.</p>
                    <p>String generateUniqueRequestString ()</p>
                    <p>The counts are properties of the MarinerPageContext, each method should check to see whether the unique request string has been retrieved from the bean and retrieve it if it has not. They should construct the unique string in a shared StringBuffer (rather than creating a new StringBuffer each time) and return its String value.</p>
                    <p>The numeric parts should not be padded with leading zeroes. This will allow the length of identifiers to remain small unless large numbers of them are generated.</p>
                </section>
                <section id="ref0">
                    <heading>Specific Generators</heading>
                    <p>This section describes the specific details of the identifiers generated for specific purposes.</p>
                    <section>
                        <heading>Locally Unique JavaScript Identifiers</heading>
                        <section>
                            <heading>Method name</heading>
                            <p>The method on the MarinerPageContext for generating these identifiers is</p>
                            <p>String generateJavaScriptID()</p>
                            <section>
                                <heading>Prefix</heading>
                                <p>The prefix for unique identifiers used for JavaScript in Mariner is VA and the separator is _ (underscore).</p>
                            </section>
                            <section>
                                <heading>Example Result from the Generator</heading>
                                <p>The generator creates identifiers for each menu item such as </p>
                                <p>VA_315CA2_9</p>
                            </section>
                        </section>
                    </section>
                    <section>
                        <heading>Locally Unique Style ID Identifiers</heading>
                        <section>
                            <heading>Method name</heading>
                            <p>The method on the MarinerPageContext for generating these identifiers is</p>
                            <p>String generateStyleID()</p>
                            <section>
                                <heading>Prefix</heading>
                                <p>The prefix for unique identifiers used for Style IDs in Mariner is VB and the separator is – (hyphen).</p>
                            </section>
                            <section>
                                <heading>Example Result from the Generator</heading>
                                <p>The generator creates identifiers such as </p>
                                <p>VB-13D</p>
                            </section>
                        </section>
                    </section>
                    <section>
                        <heading>Locally Unique WML Action Identifiers</heading>
                        <section>
                            <heading>Method name</heading>
                            <p>The method on the MarinerPageContext for generating these identifiers is</p>
                            <p>String generateWMLActionID()</p>
                            <section>
                                <heading>Prefix</heading>
                                <p>The prefix for unique identifiers used for WML Actions in Mariner is VC and the separator is _ (underscore).</p>
                            </section>
                            <section>
                                <heading>Example Result from the Generator</heading>
                                <p>The generator creates identifiers for each action such as </p>
                                <p>VC_1BC6</p>
                            </section>
                        </section>
                    </section>
                    <section>
                        <heading>Format Style Classes</heading>
                        <p>These are the style classes which associate the markup for a format with the set of stylistic properties for the format. They are not generated in the same way as the other identifiers, they are generated from information in the layout and the current context. See “Themes and Styles in Volantis Mariner”, architecture note AN004.for more details.</p>
                    </section>
                </section>
            </section>
        </body>
    </special:DISSECTABLE-AREA>
    <special:SHARD-LINK-GROUP name="AN032">
        <special:SHARD-LINK-CONDITIONAL rule="any">
            <p>
                <special:SHARD-LINK action="next">
                    <a special:href="[url]">Next</a>
                </special:SHARD-LINK>
                <special:SHARD-LINK-CONDITIONAL rule="separator">
                    <br/>
                </special:SHARD-LINK-CONDITIONAL>
                <special:SHARD-LINK action="previous">
                    <a special:href="[url]">Previous</a>
                </special:SHARD-LINK>
            </p>
        </special:SHARD-LINK-CONDITIONAL>
    </special:SHARD-LINK-GROUP>
</root>

<!--
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/1	ianw	VBM:2004120703 New Build

 10-Jun-03	363/1	pduffin	VBM:2003060302 Added some testcases, fixed some problems with keeptogether, slightly improved the documentation

 09-Jun-03	309/1	pduffin	VBM:2003060302 Added some testcases, fixed some problems with keeptogether, slightly improved the documentation

 ===========================================================================
-->
