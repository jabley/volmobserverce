<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
-->


<project name="MPSConfig" basedir="." default="mps-prepare">

    <property name="newline" value="&lt;xsl:text&gt;&#x0A;&lt;/xsl:text&gt;"/>
    <property name="tab" value="&lt;xsl:text&gt;&#9;&lt;/xsl:text&gt;"/>
    <property name="web.xml.output" value="&lt;xsl:output method=&quot;xml&quot;
        doctype-system=&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;
        doctype-public=&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;/&gt;"/>
    <property name="mcs.config.output" value="&lt;xsl:output method=&quot;xml&quot;/&gt;"/>

    <!-- define a set of properties relating to the files to be modified/used -->
    <property name="mss-config" value="mss-config.xml"/>
    <property name="mss-log" value="mss-log4j.xml"/>
    <property name="mcs-config" value="mcs-config.xml"/>

    <property name="config-path" value="${user.install.path}/config"/>
    <property name="install-path" value="${user.install.path}/webapps/mcs/WEB-INF"/>

    <!--
     ! Prepare the install by performing initial variable substitution
     ! and generating the XSL sheets
     !-->
    <target name="mps-prepare" description="Prepare the MPS installation">
        <!--
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !      Backup all config files                                    !
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !-->
        <tstamp>
            <format property="tstamp" pattern="MM-dd-yyyy"/>
        </tstamp>
        <copy file="${install-path}/mss-config.xml"
              tofile="${install-path}/mss-config.xml.backup.${tstamp}"/>
        <copy file="${install-path}/mss-log4j.xml"
             tofile="${install-path}/mss-log4j.xml.backup.${tstamp}"/>
        <copy file="${install-path}/web.xml"
              tofile="${install-path}/web.xml.backup.${tstamp}"/>
        <copy file="${install-path}/mcs-config.xml"
              tofile="${install-path}/mcs-config.xml.backup.${tstamp}"/>


        <!--
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !      Generate filtersets                                        !
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !-->
         <!-- This filters the mss-config.xml file -->
        <copy file="${install-path}/mss-config.xml"
            tofile="${install-path}/mss-config.xml.new"
            overwrite="true">
            <filterset begintoken="@" endtoken="@">
                <filter token="mss.log4j.config.file" value="${mss.log.file.loc}/mss-log4j.xml"/>
                <filter token="mss.message.store.path" value="${mss.store.dir.loc}/mss_store"/>
                <filter token="mss.message.store.timeout" value="unlimited"/>
                <filter token="mss.message.store.id.size" value="12"/>
                <filter token="mss.message.store.validate" value="false"/>
            </filterset>
        </copy>

        <move file="${install-path}/mss-config.xml.new"
              tofile="${install-path}/mss-config.xml"/>


        <!-- Filter for the mss-log4j.xml file -->
        <copy file="${install-path}/mss-log4j.xml"
            tofile="${install-path}/mss-log4j.xml.new"
            overwrite="true">
            <filterset begintoken="@" endtoken="@">
                <filter token="mss.message.store.log" value="${mss.log.file.loc}/mss-store.log"/>
                <filter token="mss.message.store.info.log" value="${mss.log.file.loc}/mss-store.log"/>
                <filter token="mss.log.conversionpattern" value="%d{dd MMM HH:mm:ss} [%t] %-5p %c %x - %m%n"/>
                <filter token="mss.log.fileappend" value="true"/>
                <filter token="mss.log.level" value="error"/>
            </filterset>
        </copy>

        <move file="${install-path}/mss-log4j.xml.new"
              tofile="${install-path}/mss-log4j.xml"/>

        <!-- Filter the web.xml file-->
        <copy file="${install-path}/web.xml"
            tofile="${install-path}/web.xml.new"
            overwrite="true">
            <filterset id="web.config.filter" begintoken="@" endtoken="@">
                <filter token="MSS.CONFIG.FILE" value="${mss.config.file.loc}/mss-store.log"/>
            </filterset>
        </copy>

        <move file="${install-path}/web.xml.new"
              tofile="${install-path}/web.xml"/>

        <!--
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !      Get MCS URL                                                !
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !-->
        <xslt style="${config-path}/extract-mcs-url.xsl"
              in="${install-path}/mcs-config.xml"
              out="${config-path}/mcs-url.txt"
              processor="trax"/>
        <property file="${config-path}/mcs-url.txt"/>

        <!--
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !      Generate the XSL stylesheets                               !
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         !-->

        <!-- XSL sheet to configure the web.xml to include MSS class mapping -->
        <copy file="${config-path}/addToXML.xsl"
            tofile="${config-path}/addMSSServlet.xsl"
            overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet[servlet-name/text() = 'MSS']"/>
                <filter token="insert-point" value="//servlet[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}${newline}
                    &lt;servlet&gt;${newline}
                        ${tab}&lt;servlet-name&gt;MSS&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;servlet-class&gt;com.volantis.mps.servlet.MessageStoreServlet&lt;/servlet-class&gt;${newline}${newline}

                        ${tab}&lt;init-param&gt;${newline}
                            ${tab}${tab}&lt;param-name&gt;config.file&lt;/param-name&gt;${newline}
                            ${tab}${tab}&lt;param-value&gt;${install-path}/mss-config.xml&lt;/param-value&gt;${newline}
                        ${tab}&lt;/init-param&gt;${newline}
                        ${tab}&lt;init-param&gt;${newline}
                            ${tab}${tab}&lt;param-name&gt;mss.log4j.config.file&lt;/param-name&gt;${newline}
                            ${tab}${tab}&lt;param-value&gt;${install-path}/mss-log4j.xml&lt;/param-value&gt;${newline}
                        ${tab}&lt;/init-param&gt;${newline}
                    &lt;/servlet&gt;${newline}
                    ${newline}
                    "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure web.xml to add MSS url mapping-->
        <copy file="${config-path}/addToXML.xsl"
            tofile="${config-path}/addMSSFilter.xsl"
            overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet-mapping[servlet-name/text() = 'MSS']"/>
                <filter token="insert-point" value="//servlet-mapping[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}${newline}
                    &lt;servlet-mapping&gt;${newline}
                        ${tab}&lt;servlet-name&gt;MSS&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;url-pattern&gt;/mss/*&lt;/url-pattern&gt;${newline}
                    &lt;/servlet-mapping&gt;${newline}
                    ${newline}
                     "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure web.xml to add RunMps servlet class mapping -->
        <copy file="${config-path}/addToXML.xsl"
            tofile="${config-path}/addRunMpsServlet.xsl"
            overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet[servlet-name/text() = 'RunMps']"/>
                <filter token="insert-point" value="//servlet[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}${newline}
                    &lt;servlet&gt;${newline}
                        ${tab}&lt;servlet-name&gt;RunMps&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;servlet-class&gt;com.volantis.mps.servlet.RunMps&lt;/servlet-class&gt;${newline}
                    &lt;/servlet&gt;${newline}
                    ${newline}
                    "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure web.xml to add RunMps url mapping-->
        <copy file="${config-path}/addToXML.xsl"
              tofile="${config-path}/addRunMpsFilter.xsl"
              overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet-mapping[servlet-name/text() = 'RunMps']"/>
                <filter token="insert-point" value="//servlet-mapping[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}
                    &lt;servlet-mapping&gt;${newline}
                        ${tab}&lt;servlet-name&gt;RunMps&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;url-pattern&gt;/RunMps&lt;/url-pattern&gt;${newline}
                    &lt;/servlet-mapping&gt;${newline}
                    ${newline}
                    "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure web.xml to add BMS servlet class mapping -->
        <copy file="${config-path}/addToXML.xsl"
            tofile="${config-path}/addBMSServlet.xsl"
            overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet[servlet-name/text() = 'BMS']"/>
                <filter token="insert-point" value="//servlet[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}${newline}

                    &lt;servlet&gt;${newline}
                        ${tab}&lt;servlet-name&gt;BMS&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;servlet-class&gt;com.volantis.mps.bms.impl.servlet.BasicMessageServlet&lt;/servlet-class&gt;${newline}
                        ${tab}&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;${newline}
                    &lt;/servlet&gt;${newline}
                    ${newline}
                    "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure web.xml to add RunMps url mapping-->
        <copy file="${config-path}/addToXML.xsl"
              tofile="${config-path}/addBMSFilter.xsl"
              overwrite="true">
            <filterset>
                <filter token="output-method" value="${web.xml.output}"/>
                <filter token="root-element" value="web-app"/>
                <filter token="markup-exists" value="servlet-mapping[servlet-name/text() = 'BMS']"/>
                <filter token="insert-point" value="//servlet-mapping[position() = last()]"/>
                <filter token="insert-before-markup" value=""/>
                <filter token="insert-after-markup" value="
                    ${newline}
                    &lt;servlet-mapping&gt;${newline}
                        ${tab}&lt;servlet-name&gt;BMS&lt;/servlet-name&gt;${newline}
                        ${tab}&lt;url-pattern&gt;/bms/*&lt;/url-pattern&gt;${newline}
                    &lt;/servlet-mapping&gt;${newline}
                    ${newline}
                    "/>
            </filterset>
        </copy>

        <!-- XSL sheet to configure mcs-config.xml to add channel mappings-->
        <copy file="${config-path}/config-channels.xsl"
              tofile="${config-path}/addChannelConfig.xsl"
              overwrite="true">
            <filterset begintoken="@" endtoken="@">
                <!-- config the SMTP channel filters -->
                <filter token="smtp-channel-host" value="${smtp.channel.host}"/>
                <filter token="smtp-channel-auth" value="${smtp.channel.auth}"/>
                <filter token="smtp-channel-user" value="${smtp.channel.user}"/>
                <filter token="smtp-channel-pass" value="${smtp.channel.pass}"/>

                <!-- config the sms channel filters -->
                <filter token="sms-channel-ip" value="${sms.channel.ip}"/>
                <filter token="sms-channel-port" value="${sms.channel.port}"/>
                <filter token="sms-channel-user" value="${sms.channel.user}"/>
                <filter token="sms-channel-pass" value="${sms.channel.pass}"/>
                <filter token="sms-channel-bindtype" value="${sms.channel.bindtype}"/>
                <filter token="sms-channel-multi" value="${sms.channel.multi}"/>
                <filter token="sms-channel-pooling" value="${sms.channel.pooling}"/>
                <filter token="sms-channel-poolsize" value="${sms.channel.poolsize}"/>
                <filter token="sms-channel-on-pool-exhausted" value="${sms.channel.on.pool.exhausted}"/>
                <filter token="sms-channel-on-pool-exhausted-wait" value="${sms.channel.on.pool.exhausted.wait}"/>
                <filter token="sms-channel-validation-interval" value="${sms.channel.validation.interval}"/>
                <filter token="sms-channel-validate-before-use" value="${sms.channel.validate.before.use}"/>
                <!-- config the mms channel filters -->
                <filter token="mms-config-url" value="${mms.config.url}"/>
                <filter token="mms-config-defcode" value="${mms.config.defcode}"/>

                <!-- config the WAP PUSH channel filters -->
                <filter token="mss-gateway-url" value="${mss.gateway.url}"/>
                <filter token="message-store-url" value="${mcs.context.url}"/>
            </filterset>
        </copy>

    </target>


    <!--
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !      Configure the mcs-config.xml file channel definitions      !
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !-->
    <target name="mps-config-channels"
            description="Configure the MPS channels in the mcs-config.xml file">
        <xslt style="${config-path}/addChannelConfig.xsl"
              in="${install-path}/mcs-config.xml"
              out="${install-path}/mcs-config.xml.new"
              processor="trax"/>

        <move file="${install-path}/mcs-config.xml.new"
              tofile="${install-path}/mcs-config.xml"/>
    </target>

    <!--
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !      Configure the MSS servlet                                  !
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !-->
    <target name="mps-config-mss">

        <!-- Insert the MSS servlet, if it is not already in the web.xml -->
        <xslt style="${config-path}/addMSSServlet.xsl"
              in="${install-path}/web.xml"
              out="${install-path}/web.xml.new"
              processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
            tofile="${install-path}/web.xml"/>

        <!-- Insert the MSS servlet filter, if it is not already in the web.xml -->
        <xslt style="${config-path}/addMSSFilter.xsl"
              in="${install-path}/web.xml"
              out="${install-path}/web.xml.new"
              processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
              tofile="${install-path}/web.xml"/>

    </target>

    <!--
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !      Configure the RunMps application                           !
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !-->
    <target name="mps-config-runmps">

        <!-- Insert the RunMPS servlet, if it is not already in the web.xml -->
        <xslt style="${config-path}/addRunMpsServlet.xsl"
               in="${install-path}/web.xml"
               out="${install-path}/web.xml.new" processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
            tofile="${install-path}/web.xml"/>

        <!-- Insert the RunMPS servlet filter, if it is not already in the web.xml -->
        <xslt style="${config-path}/addRunMpsFilter.xsl"
              in="${install-path}/web.xml"
              out="${install-path}/web.xml.new"
              processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
              tofile="${install-path}/web.xml"/>

    </target>

    <!--
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !      Configure the BMS application                              !
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !-->
    <target name="mps-config-bms">

        <!-- Insert the RunMPS servlet, if it is not already in the web.xml -->
        <xslt style="${config-path}/addBMSServlet.xsl"
               in="${install-path}/web.xml"
               out="${install-path}/web.xml.new" processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
            tofile="${install-path}/web.xml"/>

        <!-- Insert the RunMPS servlet filter, if it is not already in the web.xml -->
        <xslt style="${config-path}/addBMSFilter.xsl"
              in="${install-path}/web.xml"
              out="${install-path}/web.xml.new"
              processor="trax">
          <xmlcatalog>
            <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                 location="${config-path}/web-app_2_3.dtd"/>
          </xmlcatalog>
        </xslt>

        <move file="${install-path}/web.xml.new"
              tofile="${install-path}/web.xml"/>

    </target>

    <!--
     ! Set up the WAP Push config files and MSS Store directory in
     ! the locations specified during the install
     !-->
    <target name="relocate-wap-files"
            description="Relocate the WAP Push config files and MSS store">
        <move todir="${mss.store.dir.loc}/mss_store">
            <fileset dir="${user.install.path}/webapps/mcs/mss_store"/>
        </move>
        <move file="${install-path}/mss-config.xml" todir="${mss.config.file.loc}"/>
        <move file="${install-path}/mss-log4j.xml" todir="${mss.log.file.loc}"/>
        <move file="${install-path}/mss-jlog.xml" todir="${mss.log.file.loc}"/>
        <move file="${install-path}/log4j.dtd" todir="${mss.log.file.loc}"/>
    </target>


    <!--
     ! Clean up the MPS install by removing temp files used during the install
     !-->
    <target name="clean-mps-temp-install" description="Cleans the files used during the MPS install">

    </target>
</project>
