/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2005. 
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.utilities;

import com.volantis.synergetics.log.LogDispatcher;

/**
 * Provides build information.
 */
public class VolantisVersion {
    /**
     * The copyright notice.
     */
    private static String mark =
        "(c) Volantis Systems Ltd 2005-2008. ";

    /**
     * The build date.
     */
    private static String buildDate = "DateTOKEN";

    /**
     * The build name.
     */
    private static String buildName = "NameTOKEN";

    /**
     * The build major version.
     */
    private static int versionMajor = MajorTOKEN;

    /**
     * The build minor version.
     */
    private static int versionMinor = MinorTOKEN;

    /**
     * The build version revision.
     */
    private static int versionRevision = RevisionTOKEN;

    /**
     * The build patch level.
     */
    private static String versionPatchLevel = "PatchLevelTOKEN";

    /**
     * The product name.
     */
    private static String productName = "MCS";

    /**
     * Returns the copyright notice.
     *
     * @return the copyright notice
     */
    public static String getVolantisCopyright() {
        return(mark);
    }

    /**
     * Returns the product's name.
     *
     * @return the product's name
     */
    public static String getVolantisProductName() {
        return productName;
    }

    /**
     * Returns the build date as a string.
     *
     * @return the formatted build date
     */
    public static String getVolantisBuildDate() {
        return buildDate;
    }

    /**
     * Returns the build name.
     *
     * @return the build name
     */
    public static String getVolantisBuildName() {
        return buildName;
    }

    /**
     * Returns the product version as a string.
     *
     * @return the formatted product version number
     */
    public static String getVolantisVersion() {
        StringBuffer sb = new StringBuffer();

        sb.append(versionMajor).append(".").append(versionMinor);

        if(versionRevision > 0) {
            sb.append(".").append(versionRevision);
        }

        return sb.toString();
    }
    
    /**
     * Returns the major version number.
     *
     * @return the major version number
     */
    public static int getVolantisVersionMajor() {
        return versionMajor;
    }
    
    /**
     * Returns the minor version number.
     *
     * @return the minor version number
     */
    public static int getVolantisVersionMinor() {
        return versionMinor;
    }
    
    /**
     * Returns the version revision number.
     *
     * @return the version revision number
     */
    public static int getVolantisVersionRevision() {
        return versionRevision;
    }
    
    /**
     * Returns the build patch level.
     *
     * @return the build patch level
     */
    public static String getVolantisVersionPatchLevel() {
        return versionPatchLevel;
    }

    /**
     * Utility that outputs the given value in a formatted manner to
     * System.out.
     *
     * @param identifier what the value is
     * @param value      the value to be output
     */
    protected static void displayValue(final String identifier,
                                       final String value) {
        displayValue(identifier, value, true);
    }

    /**
     * Utility that outputs the given value in a formatted manner to
     * System.out.
     *
     * @param identifier what the value is
     * @param value      the value to be output
     * @param newline    whether or not to output a newline after outputting
     *                   the value
     */
    protected static void displayValue(final String identifier,
                                       final String value,
                                       final boolean newline) {
        System.out.print(getVolantisProductName());
        System.out.print(" code BUILD ");
        System.out.print(identifier);
        System.out.print(": ");
        System.out.print(value);

        if (newline) {
            System.out.println();
        }
    }

    /**
     * Utility that outputs all version information to System.out.
     */
    public static void displayVersion() {
        displayValue("Name", getVolantisBuildName());
        displayValue("Version", getVolantisVersion(), false);
        System.out.print(" ");
        System.out.println(getVolantisVersionPatchLevel());
        displayValue("Date", getVolantisBuildDate());
        System.out.println(getVolantisCopyright());
    }

    /**
     * Output the version information to the supplied logger.
     *   
     * @param logger
     */
    public static void logVersion(LogDispatcher logger) {
        // Show the build information here before the logfile is created
        String buildName = VolantisVersion.getVolantisBuildName();
        String buildDate = VolantisVersion.getVolantisBuildDate();
        String buildVersion = VolantisVersion.getVolantisVersion();
        String buildProduct = VolantisVersion.getVolantisProductName();
        String buildPatchLevel = VolantisVersion.
                getVolantisVersionPatchLevel();

        // Add the BUILD information to the logfile as well
        logger.info("volantis-build-date",
                    new Object[]{buildProduct, buildDate});
        logger.info("volantis-build-name",
                    new Object[]{buildProduct, buildName});
        logger.info("volantis-build-version",
                    new Object[]{buildProduct,
                                 buildVersion,
                                 buildPatchLevel});
    }

    /**
     * Allows the version information to be displayed to the command line.
     *
     * @param args the program arguments
     */
    public static void main(String[] args) {
        displayVersion();
    }
}
