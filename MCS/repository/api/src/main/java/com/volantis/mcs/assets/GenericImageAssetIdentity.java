/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * This code was automatically generated by com.volantis.mcs.build.objects.CommonObjectsCodeGenerator
 * on 3/14/08 7:12 PM
 *
 * YOU MUST NOT MODIFY THIS FILE
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.assets;

import com.volantis.mcs.objects.AbstractRepositoryObjectIdentity;

import com.volantis.mcs.project.Project;

/**
 * Encapsulates those properties of a GenericImageAsset which uniquely identify
 * it.
 * @volantis-api-include-in PublicAPI
 * @volantis-api-include-in ProfessionalServicesAPI
 * @volantis-api-include-in InternalAPI
 * @deprecated See {@link com.volantis.mcs.policies}.
 * This was deprecated in version 3.5.1.
 */
public class GenericImageAssetIdentity
  extends AbstractRepositoryObjectIdentity {

  /**
   * The width of the asset in pixels
   */
  private int pixelsX;

  /**
   * The height of the asset in pixels
   */
  private int pixelsY;

  /**
   * The number of bits per pixel
   */
  private int pixelDepth;

  /**
   * The rendering
   */
  private int rendering;

  /**
   * The encoding of this asset
   */
  private int encoding;

  /**
   * Percentage of the device width that the image should occupy
   */
  private int widthHint;

  /**
   * Create a new <code>GenericImageAssetIdentity</code>.
   * @param project  The project used with this object.   A null value is
   * possible if it
   * has not been set.
   * @param name  The name of the object.
   */
  public GenericImageAssetIdentity (Project project,
                                    String name,
                                    int pixelsX,
                                    int pixelsY,
                                    int pixelDepth,
                                    int rendering,
                                    int encoding,
                                    int widthHint) {
    super(project, name);

    this.pixelsX = pixelsX;
    this.pixelsY = pixelsY;
    this.pixelDepth = pixelDepth;
    this.rendering = rendering;
    this.encoding = encoding;
    this.widthHint = widthHint;
  }

  /**
   * Create a new <code>GenericImageAssetIdentity</code>.
   * @param name  The name of the object.
   */
  public GenericImageAssetIdentity (String name,
                                    int pixelsX,
                                    int pixelsY,
                                    int pixelDepth,
                                    int rendering,
                                    int encoding,
                                    int widthHint) {
    super(null, name);

    this.pixelsX = pixelsX;
    this.pixelsY = pixelsY;
    this.pixelDepth = pixelDepth;
    this.rendering = rendering;
    this.encoding = encoding;
    this.widthHint = widthHint;
  }

  /**
   * Access method for the pixelsX property.
   * @return the current value of the pixelsX property
   */
  public int getPixelsX () {
    return pixelsX;
  }

  /**
   * Get the height of the asset in pixels.
   * @return  the height of the asset in pixels
   */
  public int getPixelsY () {
    return pixelsY;
  }

  /**
   * Get the number of bits per pixel
   * @return The number of bits per pixel
   */
  public int getPixelDepth () {
    return pixelDepth;
  }

  /**
   * Get the rendering
   * @return The rendering
   */
  public int getRendering () {
    return rendering;
  }

  /**
   * Get the value of encoding.
   * @return value of encoding.
   */
  public int getEncoding () {
    return encoding;
  }

  /**
   * Get the width hint
   * @return The width hint
   */
  public int getWidthHint () {
    return widthHint;
  }

  // Javadoc inherited from super class.
  public Class getObjectClass () {
    return GenericImageAsset.class;
  }

  // Javadoc inherited from super class.
  public boolean equals (Object object) {

    // Call the super class to check whether this object and the other object
    // are of the same type and have the same name.
    if (!super.equals (object)) {
      return false;
    }

    GenericImageAssetIdentity identity = (GenericImageAssetIdentity) object;
    return pixelsX == identity.pixelsX
      && pixelsY == identity.pixelsY
      && pixelDepth == identity.pixelDepth
      && rendering == identity.rendering
      && encoding == identity.encoding
      && widthHint == identity.widthHint;
  }

  // Javadoc inherited from super class.
  public int hashCode () {
    return super.hashCode ()
      + pixelsX

      + pixelsY

      + pixelDepth

      + rendering

      + encoding

      + widthHint
;
  }

  // Javadoc inherited from super class.
  public int compareTo (Object object) {

    // Call the super class to check whether this object and the other object
    // are of the same type and have the same name.
    int result;
    if ((result = super.compareTo (object)) != 0) {
      return result;
    }

    GenericImageAssetIdentity identity = (GenericImageAssetIdentity) object;

    // Compare the pixelsX
    if ((result = compare (pixelsX, identity.pixelsX)) != 0) {
      return result;
    }

    // Compare the pixelsY
    if ((result = compare (pixelsY, identity.pixelsY)) != 0) {
      return result;
    }

    // Compare the pixelDepth
    if ((result = compare (pixelDepth, identity.pixelDepth)) != 0) {
      return result;
    }

    // Compare the rendering
    if ((result = compare (rendering, identity.rendering)) != 0) {
      return result;
    }

    // Compare the encoding
    if ((result = compare (encoding, identity.encoding)) != 0) {
      return result;
    }

    // Compare the widthHint
    if ((result = compare (widthHint, identity.widthHint)) != 0) {
      return result;
    }

    // The identities are equal.
    return 0;
  }

  // Javadoc inherited from super class.
  protected String paramString () {
    return super.paramString ()
      + ", pixelsX=" + pixelsX
      + ", pixelsY=" + pixelsY
      + ", pixelDepth=" + pixelDepth
      + ", rendering=" + rendering
      + ", encoding=" + encoding
      + ", widthHint=" + widthHint;
  }
}
