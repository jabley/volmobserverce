/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * This code was automatically generated by PropertyValueLookupUtilities
 * on 3/14/08 7:12 PM
 *
 * YOU MUST NOT MODIFY THIS FILE
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.objects;

import com.volantis.mcs.assets.*;

import com.volantis.mcs.components.*;

import com.volantis.mcs.layouts.*;

import com.volantis.mcs.themes.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class PropertyValueLookUp {

  private static HashMap classToControlTypeMap = new HashMap();
  private static HashMap classToMaxLengthMap = new HashMap();
  private static HashMap classToPropertyMap = new HashMap();
  private static HashMap classToRequiredMap = new HashMap();
  private static HashMap classToPropertyArray = new HashMap();
  private static HashMap classToXMLAttributeMap = new HashMap();
  private static HashMap elementNameToClass = new HashMap();
  private static HashMap classToDependentElementsMap = new HashMap();
  private static HashMap classToIdentityAttributesMap = new HashMap();
  private static HashMap propertyToArray;
  private static HashMap propertyToControlType;
  private static HashMap propertyToMap;
  private static HashMap propertyToMaxLength;
  private static HashMap propertyToRequired;
  private static HashMap propertyNameToXMLAttributeName;
  private static List dependentElementsList;
  private static List identityAttributesList;

  static {
    // TextComponent
    elementNameToClass.put("textComponent", com.volantis.mcs.components.TextComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("textAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", TextComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", TextComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", TextComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(TextComponent.class, propertyToArray);
    classToMaxLengthMap.put(TextComponent.class, propertyToMaxLength);
    classToRequiredMap.put(TextComponent.class, propertyToRequired);
    classToDependentElementsMap.put(TextComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(TextComponent.class, identityAttributesList);

    // ScriptComponent
    elementNameToClass.put("scriptComponent", com.volantis.mcs.components.ScriptComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("scriptAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", ScriptComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", ScriptComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", ScriptComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    classToPropertyArray.put(ScriptComponent.class, propertyToArray);
    classToMaxLengthMap.put(ScriptComponent.class, propertyToMaxLength);
    classToRequiredMap.put(ScriptComponent.class, propertyToRequired);
    classToDependentElementsMap.put(ScriptComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(ScriptComponent.class, identityAttributesList);

    // RolloverImageComponent
    elementNameToClass.put("rolloverImageComponent", com.volantis.mcs.components.RolloverImageComponent.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", RolloverImageComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", RolloverImageComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", RolloverImageComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    propertyToMaxLength.put("normalImageComponentName", new Integer(255));
    propertyToMaxLength.put("overImageComponentName", new Integer(255));
    classToPropertyArray.put(RolloverImageComponent.class, propertyToArray);
    classToMaxLengthMap.put(RolloverImageComponent.class, propertyToMaxLength);
    classToRequiredMap.put(RolloverImageComponent.class, propertyToRequired);
    classToIdentityAttributesMap.put(RolloverImageComponent.class, identityAttributesList);

    // LinkComponent
    elementNameToClass.put("linkComponent", com.volantis.mcs.components.LinkComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("linkAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", LinkComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", LinkComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", LinkComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(LinkComponent.class, propertyToArray);
    classToMaxLengthMap.put(LinkComponent.class, propertyToMaxLength);
    classToRequiredMap.put(LinkComponent.class, propertyToRequired);
    classToDependentElementsMap.put(LinkComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(LinkComponent.class, identityAttributesList);

    // ImageComponent
    elementNameToClass.put("imageComponent", com.volantis.mcs.components.ImageComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("deviceImageAsset");
    dependentElementsList.add("genericImageAsset");
    dependentElementsList.add("convertibleImageAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", ImageComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", ImageComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", ImageComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackImageComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(ImageComponent.class, propertyToArray);
    classToMaxLengthMap.put(ImageComponent.class, propertyToMaxLength);
    classToRequiredMap.put(ImageComponent.class, propertyToRequired);
    classToDependentElementsMap.put(ImageComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(ImageComponent.class, identityAttributesList);

    // DynamicVisualComponent
    elementNameToClass.put("dynamicVisualComponent", com.volantis.mcs.components.DynamicVisualComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("dynamicVisualAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", DynamicVisualComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", DynamicVisualComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", DynamicVisualComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackDynVisComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackImageComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackAudioComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(DynamicVisualComponent.class, propertyToArray);
    classToMaxLengthMap.put(DynamicVisualComponent.class, propertyToMaxLength);
    classToRequiredMap.put(DynamicVisualComponent.class, propertyToRequired);
    classToDependentElementsMap.put(DynamicVisualComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(DynamicVisualComponent.class, identityAttributesList);

    // ChartComponent
    elementNameToClass.put("chartComponent", com.volantis.mcs.components.ChartComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("chartAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", ChartComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", ChartComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", ChartComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackChartComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackImageComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(ChartComponent.class, propertyToArray);
    classToMaxLengthMap.put(ChartComponent.class, propertyToMaxLength);
    classToRequiredMap.put(ChartComponent.class, propertyToRequired);
    classToDependentElementsMap.put(ChartComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(ChartComponent.class, identityAttributesList);

    // ButtonImageComponent
    elementNameToClass.put("buttonImageComponent", com.volantis.mcs.components.ButtonImageComponent.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", ButtonImageComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", ButtonImageComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", ButtonImageComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    propertyToMaxLength.put("upImageComponentName", new Integer(255));
    propertyToMaxLength.put("downImageComponentName", new Integer(255));
    propertyToMaxLength.put("overImageComponentName", new Integer(255));
    classToPropertyArray.put(ButtonImageComponent.class, propertyToArray);
    classToMaxLengthMap.put(ButtonImageComponent.class, propertyToMaxLength);
    classToRequiredMap.put(ButtonImageComponent.class, propertyToRequired);
    classToIdentityAttributesMap.put(ButtonImageComponent.class, identityAttributesList);

    // AudioComponent
    elementNameToClass.put("audioComponent", com.volantis.mcs.components.AudioComponent.class);
    dependentElementsList = new ArrayList();
    dependentElementsList.add("audioAsset");
    dependentElementsList.add("deviceAudioAsset");
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", AudioComponentUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", AudioComponentUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", AudioComponentUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("fallbackAudioComponentName", new Integer(255));
    propertyToMaxLength.put("fallbackTextComponentName", new Integer(255));
    classToPropertyArray.put(AudioComponent.class, propertyToArray);
    classToMaxLengthMap.put(AudioComponent.class, propertyToMaxLength);
    classToRequiredMap.put(AudioComponent.class, propertyToRequired);
    classToDependentElementsMap.put(AudioComponent.class, dependentElementsList);
    classToIdentityAttributesMap.put(AudioComponent.class, identityAttributesList);

    // TextAsset
    elementNameToClass.put("textAsset", com.volantis.mcs.assets.TextAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("deviceName");
    identityAttributesList.add("language");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToMaxLength.put("language", new Integer(32));
    propertyToRequired.put("language", Boolean.TRUE);
    propertyToMaxLength.put("deviceName", new Integer(255));
    propertyToRequired.put("deviceName", Boolean.TRUE);
    propertyToRequired.put("valueType", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("valueType", TextAssetUtilities.getValueTypeArray());
    propertyToMap = new HashMap();
    propertyToMap.put("valueType", TextAssetUtilities.getValueTypeMap());
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray.put("encoding", TextAssetUtilities.getEncodingArray());
    propertyToMap.put("encoding", TextAssetUtilities.getEncodingMap());
    classToPropertyArray.put(TextAsset.class, propertyToArray);
    classToControlTypeMap.put(TextAsset.class, propertyToControlType);
    classToPropertyMap.put(TextAsset.class, propertyToMap);
    classToMaxLengthMap.put(TextAsset.class, propertyToMaxLength);
    classToRequiredMap.put(TextAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(TextAsset.class, identityAttributesList);

    // ScriptAsset
    elementNameToClass.put("scriptAsset", com.volantis.mcs.assets.ScriptAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("deviceName");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToMaxLength.put("deviceName", new Integer(255));
    propertyToRequired.put("deviceName", Boolean.TRUE);
    propertyToMaxLength.put("programmingLanguage", new Integer(255));
    propertyToRequired.put("programmingLanguage", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("programmingLanguage", ScriptAssetUtilities.getProgrammingLanguageArray());
    propertyToMaxLength.put("mimeType", new Integer(255));
    propertyToRequired.put("mimeType", Boolean.TRUE);
    propertyToArray.put("mimeType", ScriptAssetUtilities.getMimeTypeArray());
    propertyToMaxLength.put("characterSet", new Integer(255));
    propertyToRequired.put("valueType", Boolean.TRUE);
    propertyToArray.put("valueType", ScriptAssetUtilities.getValueTypeArray());
    propertyToMap = new HashMap();
    propertyToMap.put("valueType", ScriptAssetUtilities.getValueTypeMap());
    classToPropertyArray.put(ScriptAsset.class, propertyToArray);
    classToControlTypeMap.put(ScriptAsset.class, propertyToControlType);
    classToPropertyMap.put(ScriptAsset.class, propertyToMap);
    classToMaxLengthMap.put(ScriptAsset.class, propertyToMaxLength);
    classToRequiredMap.put(ScriptAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(ScriptAsset.class, identityAttributesList);

    // LinkAsset
    elementNameToClass.put("linkAsset", com.volantis.mcs.assets.LinkAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("deviceName");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToMaxLength.put("deviceName", new Integer(255));
    propertyToRequired.put("deviceName", Boolean.TRUE);
    classToControlTypeMap.put(LinkAsset.class, propertyToControlType);
    classToMaxLengthMap.put(LinkAsset.class, propertyToMaxLength);
    classToRequiredMap.put(LinkAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(LinkAsset.class, identityAttributesList);

    // GenericImageAsset
    elementNameToClass.put("genericImageAsset", com.volantis.mcs.assets.GenericImageAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("pixelsX");
    identityAttributesList.add("pixelsY");
    identityAttributesList.add("pixelDepth");
    identityAttributesList.add("rendering");
    identityAttributesList.add("encoding");
    identityAttributesList.add("widthHint");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToRequired.put("value", Boolean.TRUE);
    propertyToControlType.put("sequenceSize", "Text");
    propertyToControlType.put("sequence", "CheckBox");
    propertyToRequired.put("pixelsX", Boolean.TRUE);
    propertyToRequired.put("pixelsY", Boolean.TRUE);
    propertyToRequired.put("pixelDepth", Boolean.TRUE);
    propertyToRequired.put("rendering", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("rendering", GenericImageAssetUtilities.getRenderingArray());
    propertyToMap = new HashMap();
    propertyToMap.put("rendering", GenericImageAssetUtilities.getRenderingMap());
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray.put("encoding", GenericImageAssetUtilities.getEncodingArray());
    propertyToMap.put("encoding", GenericImageAssetUtilities.getEncodingMap());
    propertyToRequired.put("widthHint", Boolean.TRUE);
    classToPropertyArray.put(GenericImageAsset.class, propertyToArray);
    classToControlTypeMap.put(GenericImageAsset.class, propertyToControlType);
    classToPropertyMap.put(GenericImageAsset.class, propertyToMap);
    classToMaxLengthMap.put(GenericImageAsset.class, propertyToMaxLength);
    classToRequiredMap.put(GenericImageAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(GenericImageAsset.class, identityAttributesList);

    // DynamicVisualAsset
    elementNameToClass.put("dynamicVisualAsset", com.volantis.mcs.assets.DynamicVisualAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("encoding");
    identityAttributesList.add("pixelsX");
    identityAttributesList.add("pixelsY");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToRequired.put("pixelsX", Boolean.TRUE);
    propertyToRequired.put("pixelsY", Boolean.TRUE);
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("encoding", DynamicVisualAssetUtilities.getEncodingArray());
    propertyToMap = new HashMap();
    propertyToMap.put("encoding", DynamicVisualAssetUtilities.getEncodingMap());
    classToPropertyArray.put(DynamicVisualAsset.class, propertyToArray);
    classToControlTypeMap.put(DynamicVisualAsset.class, propertyToControlType);
    classToPropertyMap.put(DynamicVisualAsset.class, propertyToMap);
    classToMaxLengthMap.put(DynamicVisualAsset.class, propertyToMaxLength);
    classToRequiredMap.put(DynamicVisualAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(DynamicVisualAsset.class, identityAttributesList);

    // DeviceImageAsset
    elementNameToClass.put("deviceImageAsset", com.volantis.mcs.assets.DeviceImageAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("deviceName");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToRequired.put("value", Boolean.TRUE);
    propertyToControlType.put("sequenceSize", "Text");
    propertyToControlType.put("sequence", "CheckBox");
    propertyToRequired.put("localSrc", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("localSrc", DeviceImageAssetUtilities.getLocalSrcArray());
    propertyToMap = new HashMap();
    propertyToMap.put("localSrc", DeviceImageAssetUtilities.getLocalSrcMap());
    propertyToRequired.put("pixelsX", Boolean.TRUE);
    propertyToRequired.put("pixelsY", Boolean.TRUE);
    propertyToRequired.put("pixelDepth", Boolean.TRUE);
    propertyToRequired.put("rendering", Boolean.TRUE);
    propertyToArray.put("rendering", DeviceImageAssetUtilities.getRenderingArray());
    propertyToMap.put("rendering", DeviceImageAssetUtilities.getRenderingMap());
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray.put("encoding", DeviceImageAssetUtilities.getEncodingArray());
    propertyToMap.put("encoding", DeviceImageAssetUtilities.getEncodingMap());
    propertyToMaxLength.put("deviceName", new Integer(255));
    propertyToRequired.put("deviceName", Boolean.TRUE);
    classToPropertyArray.put(DeviceImageAsset.class, propertyToArray);
    classToControlTypeMap.put(DeviceImageAsset.class, propertyToControlType);
    classToPropertyMap.put(DeviceImageAsset.class, propertyToMap);
    classToMaxLengthMap.put(DeviceImageAsset.class, propertyToMaxLength);
    classToRequiredMap.put(DeviceImageAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(DeviceImageAsset.class, identityAttributesList);

    // DeviceAudioAsset
    elementNameToClass.put("deviceAudioAsset", com.volantis.mcs.assets.DeviceAudioAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("deviceName");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToControlType.put("encoding", "ReadOnlyComboViewer");
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("encoding", DeviceAudioAssetUtilities.getEncodingArray());
    propertyToMap = new HashMap();
    propertyToMap.put("encoding", DeviceAudioAssetUtilities.getEncodingMap());
    propertyToMaxLength.put("deviceName", new Integer(255));
    propertyToRequired.put("deviceName", Boolean.TRUE);
    classToPropertyArray.put(DeviceAudioAsset.class, propertyToArray);
    classToControlTypeMap.put(DeviceAudioAsset.class, propertyToControlType);
    classToPropertyMap.put(DeviceAudioAsset.class, propertyToMap);
    classToMaxLengthMap.put(DeviceAudioAsset.class, propertyToMaxLength);
    classToRequiredMap.put(DeviceAudioAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(DeviceAudioAsset.class, identityAttributesList);

    // ConvertibleImageAsset
    elementNameToClass.put("convertibleImageAsset", com.volantis.mcs.assets.ConvertibleImageAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToRequired.put("value", Boolean.TRUE);
    propertyToControlType.put("sequenceSize", "Text");
    propertyToControlType.put("sequence", "CheckBox");
    propertyToRequired.put("pixelsX", Boolean.TRUE);
    propertyToRequired.put("pixelsY", Boolean.TRUE);
    propertyToRequired.put("pixelDepth", Boolean.TRUE);
    propertyToRequired.put("rendering", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("rendering", ConvertibleImageAssetUtilities.getRenderingArray());
    propertyToMap = new HashMap();
    propertyToMap.put("rendering", ConvertibleImageAssetUtilities.getRenderingMap());
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray.put("encoding", ConvertibleImageAssetUtilities.getEncodingArray());
    propertyToMap.put("encoding", ConvertibleImageAssetUtilities.getEncodingMap());
    classToPropertyArray.put(ConvertibleImageAsset.class, propertyToArray);
    classToControlTypeMap.put(ConvertibleImageAsset.class, propertyToControlType);
    classToPropertyMap.put(ConvertibleImageAsset.class, propertyToMap);
    classToMaxLengthMap.put(ConvertibleImageAsset.class, propertyToMaxLength);
    classToRequiredMap.put(ConvertibleImageAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(ConvertibleImageAsset.class, identityAttributesList);

    // ChartAsset
    elementNameToClass.put("chartAsset", com.volantis.mcs.assets.ChartAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyNameToXMLAttributeName = new HashMap();
    propertyNameToXMLAttributeName.put("xInterval", "XInterval");
    propertyNameToXMLAttributeName.put("yInterval", "YInterval");
    propertyToMaxLength.put("type", new Integer(10));
    propertyToArray = new HashMap();
    propertyToArray.put("type", ChartAssetUtilities.getTypeArray());
    propertyNameToXMLAttributeName.put("xTitle", "XTitle");
    propertyToMaxLength.put("xTitle", new Integer(64));
    propertyNameToXMLAttributeName.put("yTitle", "YTitle");
    propertyToMaxLength.put("yTitle", new Integer(64));
    classToPropertyArray.put(ChartAsset.class, propertyToArray);
    classToMaxLengthMap.put(ChartAsset.class, propertyToMaxLength);
    classToRequiredMap.put(ChartAsset.class, propertyToRequired);
    classToXMLAttributeMap.put(ChartAsset.class, propertyNameToXMLAttributeName);
    classToIdentityAttributesMap.put(ChartAsset.class, identityAttributesList);

    // AudioAsset
    elementNameToClass.put("audioAsset", com.volantis.mcs.assets.AudioAsset.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    identityAttributesList.add("encoding");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToMaxLength.put("assetGroupName", new Integer(255));
    propertyToControlType = new HashMap();
    propertyToControlType.put("value", "URIFragment");
    propertyToMaxLength.put("value", new Integer(255));
    propertyToControlType.put("encoding", "ReadOnlyComboViewer");
    propertyToRequired.put("encoding", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("encoding", AudioAssetUtilities.getEncodingArray());
    propertyToMap = new HashMap();
    propertyToMap.put("encoding", AudioAssetUtilities.getEncodingMap());
    classToPropertyArray.put(AudioAsset.class, propertyToArray);
    classToControlTypeMap.put(AudioAsset.class, propertyToControlType);
    classToPropertyMap.put(AudioAsset.class, propertyToMap);
    classToMaxLengthMap.put(AudioAsset.class, propertyToMaxLength);
    classToRequiredMap.put(AudioAsset.class, propertyToRequired);
    classToIdentityAttributesMap.put(AudioAsset.class, identityAttributesList);

    // AssetGroup
    elementNameToClass.put("assetGroup", com.volantis.mcs.assets.AssetGroup.class);
    identityAttributesList = new ArrayList();
    identityAttributesList.add("project");
    identityAttributesList.add("name");
    propertyToMaxLength = new HashMap();
    propertyToMaxLength.put("name", new Integer(254));
    propertyToRequired = new HashMap();
    propertyToRequired.put("name", Boolean.TRUE);
    propertyToRequired.put("project", Boolean.TRUE);
    propertyToArray = new HashMap();
    propertyToArray.put("cacheThisPolicy", AssetGroupUtilities.getCacheThisPolicyArray());
    propertyToArray.put("retainDuringRetry", AssetGroupUtilities.getRetainDuringRetryArray());
    propertyToArray.put("retryFailedRetrieval", AssetGroupUtilities.getRetryFailedRetrievalArray());
    propertyToMaxLength.put("timeToLive", new Integer(5));
    propertyToMaxLength.put("retryInterval", new Integer(5));
    propertyToMaxLength.put("retryMaxCount", new Integer(5));
    propertyToMaxLength.put("prefixURL", new Integer(255));
    propertyToRequired.put("locationType", Boolean.TRUE);
    propertyToArray.put("locationType", AssetGroupUtilities.getLocationTypeArray());
    propertyToMap = new HashMap();
    propertyToMap.put("locationType", AssetGroupUtilities.getLocationTypeMap());
    classToPropertyArray.put(AssetGroup.class, propertyToArray);
    classToPropertyMap.put(AssetGroup.class, propertyToMap);
    classToMaxLengthMap.put(AssetGroup.class, propertyToMaxLength);
    classToRequiredMap.put(AssetGroup.class, propertyToRequired);
    classToIdentityAttributesMap.put(AssetGroup.class, identityAttributesList);

  }

  public static Object [] getPropertyArray(Class cls,
                                           String property) {
    Map propertyToArray = (Map) classToPropertyArray.get(cls);
    if(propertyToArray == null) {
      return null;
    }

    Object [] array = (Object []) propertyToArray.get(property);

    return array;
  }

  public static Object [] getPropertyArray(String elementName,
                                           String attributeName) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return null;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return getPropertyArray(cls, propertyName);
  }

  public static Object [] getExternalPropertyArray(Class cls,
                                                   String property) {
    Object internalArray [] = getPropertyArray(cls, property);
    if(internalArray==null) {
      return null;
    }

    Object [] externalArray = new String[internalArray.length];
    int i = 0;
    Object s = null;
    do {
      s = getPropertyValue(cls, property,
                                    internalArray[i]);
      if( s != null ) {
        if( s instanceof String ) {
          externalArray[i] = s;
        } else {
          externalArray[i] = s.toString();
        }
      }
      i++;
    } while(s!=null && i<internalArray.length);

    // If s is null it means there is no internal-to-external
    // mapping. So, return the internal array
    return s==null ? internalArray : externalArray;
  }

  public static Object [] getExternalPropertyArray(String elementName,
                                           String attributeName) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return null;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return getExternalPropertyArray(cls, propertyName);
  }

  public static Object getPropertyValue(Class cls,
                                        String property,
                                        Object key) {
    Map propertyToMap = (Map) classToPropertyMap.get(cls);
    if(propertyToMap == null) {
      return null;
    }

    Map map = (Map) propertyToMap.get(property);
    if(map == null) {
      return null;
    }

    return map.get(key);
  }

  public static Object getPropertyValue(String elementName,
                                           String attributeName, Object key) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return null;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return getPropertyValue(cls, propertyName, key);
  }

  public static Object getPropertyValue(Class cls,
                                        String property,
                                        int key) {
    return getPropertyValue(cls, property, new Integer(key));
  }

  public static Object getPropertyValue(String elementName,
                                           String attributeName, int key) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return null;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return getPropertyValue(cls, propertyName, key);
  }

  public static boolean isRequired(Class cls,
                                   String property) {
    Map map = (Map) classToRequiredMap.get(cls);
    if(map==null) {
      return false;
    }

    Boolean b = (Boolean) map.get(property);

    return b!=null && b.equals(Boolean.TRUE);
  }

  public static boolean isRequired(String elementName,
                                           String attributeName) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return false;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return isRequired(cls, propertyName);
  }

  public static String getControlType(Class cls,
                                 String property) {
    Map map = (Map) classToControlTypeMap.get(cls);
    if(map==null) {
      return null;
    }

    return (String) map.get(property);
  }

  public static String getControlType(String elementName,
                                 String property) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return null;
      }

    return getControlType(cls, property);
  }

  public static int getMaxLength(Class cls,
                                 String property) {
    Map map = (Map) classToMaxLengthMap.get(cls);
    if(map==null) {
      return -1;
    }

    Integer i = (Integer) map.get(property);

    if(i==null) {
      return -1;
    }

    return i.intValue();
  }

  public static int getMaxLength(String elementName,
                                           String attributeName) {
      Class cls = getClassForXMLElement(elementName);
      if (cls == null) {
          return -1;
      }
      String propertyName = getPropertyName(elementName, attributeName);

      return getMaxLength(cls, propertyName);
  }

  public static String getXMLAttributeName(String elementName,
                                 String property) {
    Class cls = getClassForXMLElement(elementName);
    Map map = (Map) classToXMLAttributeMap.get(cls);
    if (map == null) {
      return property;
    }

    String name = (String) map.get(property);

    return name == null ? property : name;
  }

  public static String getPropertyName(String elementName,
                                 String xmlAttributeName) {
    Class cls = getClassForXMLElement(elementName);
    Map map = (Map) classToXMLAttributeMap.get(cls);
    if (map == null) {
        return xmlAttributeName;
    }
    for (Iterator it = map.keySet().iterator(); it.hasNext();) {
        String key = (String) it.next();
        if ((map.get(key)).equals(xmlAttributeName)) {
            return key;
        }
    }
    return xmlAttributeName;
  }

  public static Class getClassForXMLElement(String element) {
      return (Class) elementNameToClass.get(element);
  }

  public static List getDependentElements(String element) {
    Class cls = getClassForXMLElement(element);
    if (cls == null) {
        return null;
    }
    List dependentElements = (List) classToDependentElementsMap.get(cls);
    if (dependentElements == null) {
        return null;
    }
    ArrayList list = new ArrayList(dependentElements.size());
    list.addAll(dependentElements);
    return list;
  }

  public static List getIdentityAttributes(String element) {
    Class cls = getClassForXMLElement(element);
    if (cls == null) {
        return null;
    }
    List identityAttrs = (List) classToIdentityAttributesMap.get(cls);
    if (identityAttrs == null) {
        return null;
    }
    ArrayList list = new ArrayList(identityAttrs.size());
    list.addAll(identityAttrs);
    return list;
  }
}

