/* ----------------------------------------------------------------------------
 * $Header: /src/voyager/com/volantis/mcs/atg/dynamo561/Attic/VolantisOptionTag.java,v 1.1.2.5 2002/10/09 17:43:25 chrisw Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2001. 
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * ---------    --------------- -----------------------------------------------
 *		Steve		VBM 2001090306 - Initial Release
 * 06-Dec-01    Mat             VBM:2001113002 - Removed call to 
 *                              MarinerPageContext.abort(), as 
 *                              it no longer exists.
 * 02-Jan-02    Paul            VBM:2002010201 - Use log4j for logging.
 * 31-Jan-02    Paul            VBM:2001122105 - Fixed compile error in
 *                              logging.
 * 13-Mar-02    Paul            VBM:2002030104 - Removed unnecessary and
 *                              invalid import of the tags package.
 * 15-Aug-02    Chris W         VBM:2002081511 - Copied existing class to 
 *                              separate package for Dynamo5.6.1 We want to be
 *                              able to support the older Dynamo5.1.1 (?) version
 *                              as well.
 * 20-Aug-02    Chris W         VBM:2002081511 - Remove setValue method as
 *                              superclass's setValue does an adequate job.
 * 21-Aug-02    Chris W         VBM:2002081511 - Modified setInheritedSelected
 *                              and added setXFSingleSelectSelected (called in
 *                              renderTag()) so the values of an ATG nucleus
 *                              element are used to to set the initial value of
 *                              xfsiselects and xfmuselects. 
 * 13-Sep-02    Chris W         VBM:2002082709 - Implements new TagRender interface.
 *                              This interface returns the standard JSP responce
 *                              codes from renderTagStart and renderTagEnd i.e
 *                              EVAL_BODY_INCLUDE, EVAL_BODY, SKIP_BODY,
 *                              EVAL_PAGE and SKIP_PAGE.
 * 09-Oct-02    Chris W         VBM:2002100904 - Backed out new TagRender interface
 *                              as ATG aren't going to deliver the official version
 *                              for some time. This would allow amg.net to upgrade
 *                              to 2.5.4 without causing any problems.
 * ----------------------------------------------------------------------------
 */

package com.volantis.mcs.atg.dynamo;

import com.volantis.mcs.papi.XFOptionAttributes;
import com.volantis.mcs.papi.XMLWriter;
import com.volantis.mcs.papi.XFSingleSelectAttributes;
import com.volantis.mcs.servlet.MarinerServletRequestContext;
import com.volantis.synergetics.log.LogDispatcher;
import com.volantis.mcs.localization.LocalizationFactory;

import javax.servlet.ServletRequest;
import javax.servlet.jsp.PageContext;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Enumeration;
import java.util.Properties;
import java.util.List;

/**
 *
 * @author  steve
 */
public class VolantisOptionTag extends atg.taglib.dspjsp.OptionTag
{
    
    private static String mark = "(c) Volantis Systems Ltd 2000. ";

    /**
     * Used for logging
     */
    private static final LogDispatcher logger =
                LocalizationFactory.createLogger(VolantisOptionTag.class);

    private XFOptionAttributes optionAttributes;
    private MarinerServletRequestContext requestContext;
    
    protected PageContext pageContext;
    
    /**
     * Flag indicating if the setInheritedSelected method has been called.
     * If this is true then the initial value is set on the parent xfsiselect tag.
     */
    private boolean setInheritedSelectedCalled;
    
    /** Creates new VolantisInputTag */
    public VolantisOptionTag() {
        super();
        optionAttributes = new XFOptionAttributes();
    }

    public void setPageContext( PageContext context )
    {
        super.setPageContext( context );
        requestContext = null;
        
        // Store Page Context in subclass as superclass version is private
        pageContext = context;
    }

    public PageContext getPageContext()
    {        
        return pageContext;
    }
    
    private MarinerServletRequestContext getMarinerServletRequestContext() {
        if( requestContext == null) {
            ServletRequest request = getPageContext().getRequest();
            requestContext = (MarinerServletRequestContext)
                    MarinerServletRequestContext.getCurrent(request);
        }
        return requestContext;
    }

    public void callSetter( String attribute, String value ) 
    {
        String method = "setInherited" + attribute.substring(0,1).toUpperCase() +
        attribute.substring(1, attribute.length());
        if (logger.isDebugEnabled()) {
            logger.debug ("calling " + method + "( " + value + ")" );
        }
        
        Class params[] = new Class[1];
        params[0] = value.getClass();
        try {
            Method m = this.getClass().getMethod(method, params);
            Object args[] = new Object[1];
            args[0] = value;
            m.invoke(this, args);
        }
        catch (NoSuchMethodException nsm) {
            logger.warn ("method-not-found", method);
        }
        catch (IllegalAccessException ia) {
            logger.warn("unexpected-illegal-access-exception",ia);
        }
        catch (InvocationTargetException it) {
            logger.warn("unexpected-invocation-target-exception",it);
        }
    }

    
    public void renderTag(java.lang.String pTagName,Properties pAttributes) throws IOException 
    {
        if (logger.isDebugEnabled()) {
            logger.debug ("VolantisOptionTag.renderTag( " + pTagName + " )" );
        }
        
        Enumeration en = pAttributes.propertyNames();
        while(en.hasMoreElements()) 
        {
            String property = (String)en.nextElement();
            String value = pAttributes.getProperty(property);
            callSetter(property, value);
        }
                
        try {
            if (logger.isDebugEnabled()) {
                logger.debug ( "Adding option " + optionAttributes.getValue() + " caption is " + optionAttributes.getCaption().toString() );
            }

            XFSingleSelectAttributes singleSelectAtts =
                    (XFSingleSelectAttributes) pageContext.getAttribute(
                            VolantisSingleSelectTag.VOLANTIS_SINGLE_SELECT_KEY);


            // Set the initial value if the parent tag is xfsiselect.
            if (singleSelectAtts != null) {
                List options = (List) pageContext.getAttribute(
                            VolantisSingleSelectTag.VOLANTIS_OPTION_KEY);
                if (options == null) {
                    // this is an error. We have a VolantisSingleSelect as a
                    // parent. This tag is also responsible for storing a
                    // list in the pageContext so that we can store
                    // away the options
                    throw new IllegalStateException(
                            "Parent is a VolantisSingleSelectTag but could " +
                            "not find the Options list");
                }
                // store this option away
                options.add(optionAttributes);

                // Normally the attributes are set when the xfsiselect tag is
                // started. However, for integration with ATG nucleus
                // components the initial value, i.e. the option
                // selected, is not known until ATG informs us by setting a
                // selected attribute on ONE of the child option tags. So, the
                // VolantisOptionTag needs to be able to get the
                // XFSelectAttributes in order to set the initial value.
                if (setInheritedSelectedCalled) {
                     singleSelectAtts.setInitial((String)getValue());
                     if (logger.isDebugEnabled()) {
                        logger.debug("Set initial attribute of single select "
                                     + getValue());
                     }
                    setInheritedSelectedCalled = false;
                }

                // parent is the single select so we should
            } else {
                // As parent isn't single select we can just write out the xdime
                XMLWriter writer = new XMLWriter(pageContext.getOut());
                writer.openElement(optionAttributes);
                writer.closeElement(optionAttributes);
            }



        }
        catch( Exception e )
        {
            abort( e );
            throw new IOException( "Error rendering option tag" );
        }

        optionAttributes.reset();
    }

    public void renderTagAttributes(Properties pAttributes) throws IOException
    {
        if (logger.isDebugEnabled()) {
            logger.debug ("VolantisOptionTag.renderTagAttributes()" );
        }
    }
    
    @DYNAMO-7.0-TEMPLATE-START@
    public int renderTagEnd(java.lang.String pTagName) throws IOException
    @DYNAMO-7.0-TEMPLATE-END@
    @DYNAMO-5.6.1-TEMPLATE-START@
    public void renderTagEnd(java.lang.String pTagName) throws IOException
    @DYNAMO-5.6.1-TEMPLATE-END@
    {
        if (logger.isDebugEnabled()) {
            logger.debug ("VolantisOptionTag.renderTagAttributes( " + pTagName + " )" );
        }

        @DYNAMO-7.0-TEMPLATE-START@
        return EVAL_PAGE;
        @DYNAMO-7.0-TEMPLATE-END@
    }
    
    public void renderTagStart(java.lang.String pTagName,Properties pAttributes) throws IOException 
    {
        
        if (logger.isDebugEnabled()) {
            logger.debug ("VolantisOptionTag.renderTagStart( " + pTagName + " )" );
        }
        
        //return EVAL_BODY_INCLUDE;
    }
    
    /**
     * This method is called by the server when the tag has been finished with.
     * As some servers (e.g ATG) re-use the tags, the attributes need to be reset.
     *
     */
    public void release() 
    {
        if (logger.isDebugEnabled()) {
            logger.debug ( "Releasing VolantisOptionTag" );
        }
        optionAttributes.reset();
        super.release();
    }
    
    private void abort(Exception e) {
        logger.error("unexpected-exception", e);
    }

    public void setInheritedSelected( String s )
    {
        setInheritedSelectedCalled = true;
        // ATG sends "selected" to mean true
        if ("selected".equals(s))            
        {
            // This allows muselects to display the initial value of the bean
            optionAttributes.setSelected("true");
        }
        else
        {
            optionAttributes.setSelected("false");
        }
    }

    public void setInheritedValue( String s )
    {
        optionAttributes.setValue( s );
    }

    public void setCaption( String s )
    {
        optionAttributes.setCaption( s );
    }
    
    public String getCaption()
    {
        return optionAttributes.getCaption();
    }
    
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 08-Dec-04	6416/3	ianw	VBM:2004120703 New Build

 08-Dec-04	6416/1	ianw	VBM:2004120703 New Build

 29-Nov-04	6232/2	doug	VBM:2004111702 Refactored Logging framework

 27-Apr-04	3843/3	ianw	VBM:2004041408 Port forward ATG 5.6.1 integration

 ===========================================================================
*/
