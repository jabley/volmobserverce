<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of Volantis Mobility Server.

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>.
-->

<!-- ==========================================================================
 ! $Header: /cvs/architecture/architecture/xml-schema/marlin/src/marlin-pipeline.xsd,v 1.10 2005/01/26 14:34:21 pduffin Exp $
 ! ============================================================================
 ! (c) Volantis Systems Ltd 2003.
 ! ============================================================================
 ! Change History:
 !
 ! Date         Who             Description
 ! =========    =============== ===============================================
 ! 18-Dec-02    Paul            VBM:2002121802 - Created.
 ! 23-Jun-03    Paul            R752 Moved the transform and cache into this
 !                              schema, removed try as that will be added in
 !                              a later release. Moved some of the core types
 !                              into a marlin-pipeline-core.xsd so that it can
 !                              be imported separately into other schemata.
 ! 07-Jul-03    Ian             R724 Added proxy operations
 ! 08-Jul-03    Ian             R724 Added compilable attribute.
 ! 14-Jul-03    Ian             R755 Added timeToLive.
 ! 15-Jul-03    Ian             R755 Change comment for caceControl.
 ! 06-Aug-03    Ian             R724 Added ConvertURLToDMS to
 !                              BasePipelineOperation.
 ! 30-Mar-04    Ian             R161 Added parameters and parameter to
 !                              transform.
 ! 24-Sep-04    Ian             R860: Added evaluate element.
 ! ======================================================================== -->
<!--
 !
 ! ****************************************************************************
 ! This file is owned by Architecture and can only be changed by a member of
 ! that group.
 ! ****************************************************************************
 !
 !-->
<xs:schema targetNamespace="http://www.volantis.com/xmlns/marlin-pipeline" xmlns="http://www.volantis.com/xmlns/marlin-pipeline" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:pipeline="http://www.volantis.com/xmlns/marlin-pipeline" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <xs:include schemaLocation="marlin-pipeline-core.xsd"/>
    <xs:annotation>
        <xs:documentation>This defines some generally useful pipeline operations.</xs:documentation>
    </xs:annotation>
    <xs:attributeGroup name="DebugFileOutputAttributes">
        <xs:annotation>
            <xs:documentation>Specifies attributes that are common to those operations that generate debug output files.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="active" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>Indicates whether this operation is active. If this is true then it is active and performs its task,  otherwise it is inactive and does nothing. An inactive operation has very little impact on performance.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fileSuffix" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>Specifies the suffix for the file to which this operation will write its content. This is appended to the prefix specified when the pipeline was created to create the file name. If this is not specified then the operation is treated as inactive.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <!--Transformation Operation-->
    <xs:simpleType name="ForeverSimpleType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="forever"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="CacheTime">
        <xs:union memberTypes="xs:unsignedInt ForeverSimpleType"/>
    </xs:simpleType>
    <xs:element name="transform" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Allows contents to be transformed using an XSLT document.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="false">
            <xs:choice>
                <xs:annotation>
                    <xs:documentation>Choose between the two different content models supported by the transform element. This choice is made based on whether it has an href attribute or not.</xs:documentation>
                </xs:annotation>
                <xs:sequence>
                    <xs:annotation>
                        <xs:documentation>This content model is valid if the transform element DOES NOT have an href attribute.</xs:documentation>
                    </xs:annotation>
                    <xs:element ref="parameters" minOccurs="0"/>
                    <xs:choice>
                        <xs:annotation>
                            <xs:documentation>Choose between a single transformation and multiple transformations.</xs:documentation>
                        </xs:annotation>
                        <xs:element ref="transformations"/>
                        <xs:element ref="transformation"/>
                    </xs:choice>
                    <xs:group ref="PipelineOperation" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>This content model is valid if the transform element DOES have an href attribute.</xs:documentation>
                    </xs:annotation>
                    <xs:group ref="PipelineOperation"/>
                </xs:sequence>
            </xs:choice>
            <xs:attribute name="href" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>Identifies an XSLT document to use to transform the contents of the element. This is optional as it is also possible to specify the transformation template inline within the transform element.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="compilable" type="xs:boolean" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="transformation">
        <xs:annotation>
            <xs:documentation>Specifies a transformation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Choose between the two different content models supported by the template element. This choice is made based on whether it has an href attribute or not.</xs:documentation>
                </xs:annotation>
                <xs:any namespace="http://www.w3.org/1999/XSL/Transform">
                    <xs:annotation>
                        <xs:documentation>This content model is valid if the template element DOES NOT have an href attribute.</xs:documentation>
                    </xs:annotation>
                </xs:any>
            </xs:choice>
            <xs:attribute name="href" type="xs:anyURI" use="optional"/>
            <xs:attribute name="compilable" type="xs:boolean" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="transformations">
        <xs:annotation>
            <xs:documentation>Specifies transformation(s) to use to transform the contents.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
                <xs:element ref="transformation"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!--Cache Operation-->
    <xs:element name="cache" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Caches contained contents to improve performance.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="false">
            <xs:choice>
                <xs:annotation>
                    <xs:documentation>Choose between the two different content models supported by the cache element. This choice is made based on whether it has a key attribute or not.</xs:documentation>
                </xs:annotation>
                <xs:sequence>
                    <xs:annotation>
                        <xs:documentation>This content model is valid if the cache element DOES NOT have a key attribute.</xs:documentation>
                    </xs:annotation>
                    <xs:element ref="cacheInfo"/>
                    <xs:element ref="cacheBody"/>
                </xs:sequence>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>This content model is valid if the cache element DOES have a key attribute.</xs:documentation>
                    </xs:annotation>
                    <xs:group ref="PipelineOperation"/>
                </xs:sequence>
            </xs:choice>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The name of the cache to use.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="key" type="xs:string" use="optional"/>
            <xs:attribute name="expiry-mode" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="auto"/>
                        <xs:enumeration value="fixed-age"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="max-wait-time" type="CacheTime" use="optional">
                <xs:annotation>
                    <xs:documentation>The max-wait-time attribute determines how long a thread will wait for the entry to be updated.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="cacheKey">
        <xs:annotation>
            <xs:documentation>Allows multiple keys to be specified for the cache.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="value" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="cacheControl">
        <xs:annotation>
            <xs:documentation>Allows specific cache control attributes to be associated with the cache entry.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="timeToLive" type="CacheTime" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="cacheBody">
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="cacheInfo">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="cacheKey" maxOccurs="unbounded"/>
                <xs:element ref="cacheControl" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!--Content Operation-->
    <xs:element name="content" type="AnyExcludingPipelineOperation" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Encapsulates arbitrary XML content.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <!--Evaluate Operation-->
    <xs:element name="evaluate" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Evaluates output of enclosed operations as pipeline markup</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="false">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!--Try Operation-->
    <xs:element name="try" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Tries the contained operations in turn until one of them succeeds. The result of this operation is the result of the operation that succeeded.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="preferred"/>
                <xs:element ref="alternative" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="preferred">
        <xs:annotation>
            <xs:documentation>Contains the preferred set of operations.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="alternative">
        <xs:annotation>
            <xs:documentation>Contains an alternative set of operations.</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!--Proxy Operations-->
    <xs:element name="convertElementCase" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Convert the case of elements</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attribute name="mode" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="lower"/>
                        <xs:enumeration value="upper"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="convertAbsoluteToRelativeURL" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Converts URL's for the specified host from absolute to relative</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attribute name="baseURL" type="xs:anyURI" use="optional"/>
            <xs:attribute name="substitutionPath" type="xs:anyURI" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="convertImageURLToDMS" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>
                Converts all images in infoset to use the specified DMS server. This is deprecated. Use
                convertImageURLToTranscoder instead.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attribute name="server" type="xs:anyURI" use="required"/>
            <xs:attribute name="maxFileSize" type="xs:integer" use="optional"/>
            <xs:attribute name="relativeWidth" type="xs:integer" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="convertImageURLToTranscoder">
        <xs:annotation>
            <xs:documentation>Converts all images in infoset to use the specified Transcoding server</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attribute name="server" type="xs:anyURI" use="required"/>
            <xs:attribute name="maxFileSixe" type="xs:integer" use="optional"/>
            <xs:attribute name="relativeWidth" type="xs:integer" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="parameters">
        <xs:annotation>
            <xs:documentation>Container for stylesheet parameters</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="parameter"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="parameter">
        <xs:annotation>
            <xs:documentation>An XSL Stylesheet parameter</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="value" type="PipelineExpression" use="optional"/>
        </xs:complexType>
    </xs:element>
    <!--Validation Operation-->
    <xs:simpleType name="AnyURIList">
        <xs:annotation>
            <xs:documentation>List of xs:anyURI.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:anyURI"/>
    </xs:simpleType>
    <xs:element name="validate" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>Validates its input (which must be well-formed XML with one root element) as follows.<ol>
                    <li>Consumes the stream of SAX events, serializing them into a file (using the UTF-8) encoding with the appropriate attributes from the http://www.w3.org/2001/XMLSchema-instance namespace.</li>
                    <li>Parses the output using a validating XML parser.</li>
                    <li>Passes the events (including any problems) down stream to the rest of the pipeline.</li>
                </ol>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:any/>
            </xs:sequence>
            <xs:attributeGroup ref="DebugFileOutputAttributes"/>
            <xs:attribute name="schemaLocation" type="AnyURIList" use="optional">
                <xs:annotation>
                    <xs:documentation>Equivalent to the standard schemaLocation attribute found in the http://www.w3.org/2001/XMLSchema-instance namespace.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="noNamespaceSchemaLocation" type="xs:anyURI" use="optional">
                <xs:annotation>
                    <xs:documentation>Equivalent to the standard noNamespaceSchemaLocation attribute found in the http://www.w3.org/2001/XMLSchema-instance namespace.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="reportFileSuffix" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>Specifies the suffix for the file to which this operation will write reporrs of any detected problems. If this is not specified then no report is written. The report file does not have any specific format and is intended to be human, not machine readable. The format is subject to change at any time.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!--Serialize Operation-->
    <xs:element name="serialize" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>This operation serializes the events that it receives to a file that can be examined by the author at a later date.<p>For each event that it receives this operation passes it to a serializer and forwards it straight on to the rest of the pipeline, it does not buffer them up. The serializer creates an XML file that represents the events that it receives. The file will be annotated by contextual information, e.g. <code>xml:base</code> attributes and namespace declarations will be added.</p>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attributeGroup ref="DebugFileOutputAttributes"/>
        </xs:complexType>
    </xs:element>
    <!-- Foreach Operation -->
    <xs:element name="for-each" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>
                This operation permits iteration over the items in the sequence that results from the specified expression, generating the
                specified variable and executing its body content in the context of this variable definition for each item in turn.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:any/>
            </xs:sequence>
            <xs:attribute name="variable" type="xs:QName" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Identities the variable by QName that will be created and populated with each item from the sequence in turn.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="in" type="PipelineExpression" use="required">
                <xs:annotation>
                    <xs:documentation>
                        An expression that results in a sequence over which this operation iterates.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- Processdef Operation -->
    <xs:element name="processdef" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>
                This operation permits iteration over the items in the sequence that results from the specified expression, generating the
                specified variable and executing its body content in the context of this variable definition for each item in turn.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0">
                <xs:element ref="configurations"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:QName" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Qualified name of the XML process element.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="class" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        XML process class
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ignore-config" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Flag to indicate if the configuration parameters should be processed.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="configurations">
        <xs:annotation>
            <xs:documentation>Container for configuration parameters</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
                <xs:element ref="configuration"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="configuration">
        <xs:annotation>
            <xs:documentation>A configuration parameter name/value pair</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="xs:string"/>
                <xs:element name="value" type="xs:string"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- value-of operation -->
    <xs:element name="value-of" substitutionGroup="BasePipelineOperationElement">
        <xs:annotation>
            <xs:documentation>
                This operation permits the value of an expression to be inserted
                into the content.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="false">
            <xs:attribute name="expr" type="PipelineExpression" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The expression whose value will be inserted into the
                        content.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
</xs:schema>
