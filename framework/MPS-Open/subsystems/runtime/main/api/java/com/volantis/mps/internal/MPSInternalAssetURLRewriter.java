/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * $Header: /src/mps/com/volantis/mps/internal/MPSInternalAssetURLRewriter.java,v 1.9 2003/01/30 16:42:58 ianw Exp $
 * ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2001. 
 * ----------------------------------------------------------------------------
 * Change History:
 *
 * Date         Who             Description
 * ---------    --------------- -----------------------------------------------
 * 12-Nov-02    ianw            VBM:2002091806 - Created
 * 17-Jan-03    ianw            VBM:2003010708 - Changed asset url's to used
 *                              cid: + filename so that images display on all 
 *                              devices including Netscape.
 * 20-Jan-03    ianw            VBM:2003011504: Fixed problem with links 
 *                              being mime encoded.
 * 30-Jan-03    ianw            VBM:2003012911 - Added code to compute
 *                              correct extension for ConvertibleImageAssets.
 * ----------------------------------------------------------------------------
 */

package com.volantis.mps.internal;

import com.volantis.mcs.assets.Asset;
import com.volantis.mcs.assets.AssetGroup;
import com.volantis.mcs.assets.ConvertibleImageAsset;
import com.volantis.mcs.assets.ImageAsset;
import com.volantis.mcs.assets.LinkAsset;
import com.volantis.mcs.context.ContextInternals;
import com.volantis.mcs.context.MarinerPageContext;
import com.volantis.mcs.context.MarinerRequestContext;
import com.volantis.mcs.integration.AssetURLRewriter;
import com.volantis.mcs.repository.RepositoryException;
import com.volantis.mcs.utilities.MarinerURL;
import com.volantis.mcs.runtime.Volantis;
import com.volantis.mps.context.MPSApplicationContext;
import com.volantis.mps.message.MessageAsset;

/**
 * This AssetURLRewriter maps Mime References to assets and stores them in the
 * <CODE>ApplicationContext</CODE>. Mime References are generated by replacing
 * '?' & '&' with '/' and '=' with '-'.
 */
public class MPSInternalAssetURLRewriter implements AssetURLRewriter {
    
    
    private Volantis volantisBean;
    
    /** Creates a new instance of MPSAssetURLRewriter */
    public MPSInternalAssetURLRewriter() {
    }
    
    //javadoc inherited
    public MarinerURL rewriteAssetURL(MarinerRequestContext requestContext, 
                                      Asset asset, 
                                      AssetGroup assetGroup, 
                                      MarinerURL marinerURL) 
            throws RepositoryException {

        // save away mcs.ie parameter as the default URL rewritter will remove 
        // it
        String imageEncodingString = null;        
        if (asset instanceof ConvertibleImageAsset) {
            if (marinerURL != null) {
                imageEncodingString = marinerURL.getParameterValue("mcs.ie");
            }
        }
        
        AssetURLRewriter defaultAssetURLRewriter = 
            getVolantisBean(requestContext).getAssetURLRewriter();
        
        MarinerURL rewrittenURL = 
            defaultAssetURLRewriter.rewriteAssetURL(requestContext, 
                                                    asset, 
                                                    assetGroup, 
                                                    marinerURL);
        
        // We do not want to mime encode links
        if (asset instanceof LinkAsset) {
            return rewrittenURL;
        } else {        
            // To create a unique reference, generate a digest of the url and
            // convert it into a hex String.                
            //String newUrl = StringHash.getDigestAsHex(oldUrl);
            String oldUrl = rewrittenURL.getExternalForm();
            String newUrl;
            
            // Add the appropriate file extension for encoded images.
            if (imageEncodingString != null) {
                int imageEncoding=new Integer(imageEncodingString).intValue();
                newUrl = getFileName(oldUrl) + "." +
                    ImageAsset.fileExtension(imageEncoding);
            } else {
                newUrl = getFileName(oldUrl);
            }

            MPSApplicationContext applicationContext = 
                (MPSApplicationContext)ContextInternals
                    .getApplicationContext(requestContext);

            if (assetGroup != null) {
                applicationContext.mapAsset(newUrl,
                        new MessageAsset(assetGroup.getLocationType(), oldUrl)); 
            } else {
                applicationContext.mapAsset(newUrl,
                        new MessageAsset(AssetGroup.ON_SERVER, oldUrl)); 
            }    
            MarinerURL urlToReturn = new MarinerURL();
            urlToReturn.setPath("cid:"+newUrl);
            return urlToReturn;
        }
    }
    
  /**
   * Method to return the Volantis bean
   * @param requestContext the MarinerRequestContext
   * @return the Volantis bean
   */
  private Volantis getVolantisBean(MarinerRequestContext requestContext) {
    if(volantisBean == null) {
      MarinerPageContext marinerPageContext = 
	ContextInternals.getMarinerPageContext(requestContext);
      volantisBean = marinerPageContext.getVolantisBean();
    }
    return volantisBean;
  }

  private String getFileName(String pathName) {
    if (pathName != null) {
        int fnStart = pathName.lastIndexOf('/')+1;
        
        String fileName=pathName.substring(fnStart);
        fileName = fileName.replace('?', '_');
        fileName = fileName.replace('=','-');
        fileName = fileName.replace('&', '_');
        return fileName;
    }
    return pathName;
  }
  
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 20-Dec-04	270/1	pcameron	VBM:2004122004 New packagers for wemp

 10-Jun-04	121/1	ianw	VBM:2004060111 Made to work with main 3.2 MCS stream

 ===========================================================================
*/
