/*
This file is part of Volantis Mobility Server. 

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>. 
*/
/* ----------------------------------------------------------------------------
 * (c) Copyright Volantis Systems Ltd. 2007. 
 * ----------------------------------------------------------------------------
 */
package com.volantis.synergetics.reporting.impl.osgi;

import com.volantis.synergetics.reporting.Report;
import com.volantis.synergetics.reporting.ReportService;
import com.volantis.synergetics.reporting.DynamicReport;
import com.volantis.synergetics.reporting.impl.BoundDynamicReportCache;
import com.volantis.synergetics.reporting.impl.BoundInterfaceCache;
import com.volantis.synergetics.reporting.impl.MetricGroupProxy;
import com.volantis.synergetics.reporting.impl.TransactionIDGenerator;
import com.volantis.synergetics.reporting.impl.UUIDGenerator;

/**
 * The standard OSGi implementation of the ReportService interface.
 */
public class DefaultReportService implements ReportService {

    /**
     * Used to generate the ID's.
     */
    private final TransactionIDGenerator idGenerator = new UUIDGenerator();

    /**
     * The bound interface cache to use for all reports generated by this
     * ReportService instance.
     */
    private final BoundInterfaceCache
        boundInterfaceCache = new BoundInterfaceCache();

    /**
     * Th cache holding the dynamic report method binding. This is NOT used
     * currently as the OSGi reporting service does not support dynamic
     * reports
     */
    private final BoundDynamicReportCache boundDynamicReportCache =
        new BoundDynamicReportCache();

    /**
     * The report handler that will convert the reports to OSGi events that
     * will be received by any OSGi EventListener that cares about them.
     */
    private final EventProducerReportHandler reportHandler;

    /**
     * Default constructor. This class MUST be passed an
     * EventProducerReportHandler.
     *
     * @param reportHandler the report handler to use.
     */
    DefaultReportService(EventProducerReportHandler reportHandler) {
        this.reportHandler = reportHandler;
    }

    // javadoc inherited
    public Report createReport(Class clazz) {
        return createReport(clazz, null);
    }

    // Javadoc inherited
    public Report createReport(Class clazz, String parentTransactionID) {
        String transID = idGenerator.getTransactionID();
        MetricGroupProxy proxy = new MetricGroupProxy(boundInterfaceCache,
                                                      boundDynamicReportCache,
                                                      clazz,
                                                      reportHandler,
                                                      transID,
                                                      parentTransactionID,
                                                      null);
        // @todo getInterfaces is not recursive so we probably need to build
        // the list of interfaces not directly extended
        return (Report) java.lang.reflect.Proxy.newProxyInstance(
            clazz.getClassLoader(), new Class[]{clazz}, proxy);
    }

    // Javadoc inherited
    public DynamicReport createDynamicReport(String binding) {
        return createDynamicReport(binding, null);
    }

    // Javadoc inherited
    public DynamicReport createDynamicReport(String binding,
                                             String transactionID) {
        String transID = idGenerator.getTransactionID();
        MetricGroupProxy proxy = new MetricGroupProxy(boundInterfaceCache,
                                                      boundDynamicReportCache,
                                                      DynamicReport.class,
                                                      reportHandler,
                                                      transID,
                                                      null,
                                                      binding);
        // @todo getInterfaces is not recursive so we probably need to build
        // the list of interfaces not directly extended
        return (DynamicReport) java.lang.reflect.Proxy.newProxyInstance(
            getClass().getClassLoader(), new Class[]{DynamicReport.class}, proxy);
    }
}
