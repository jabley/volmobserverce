/*
This file is part of Volantis Mobility Server.

Volantis Mobility Server is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Volantis Mobility Server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Volantis Mobility Server.  If not, see <http://www.gnu.org/licenses/>.
*/
/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2008.
 * ----------------------------------------------------------------------------
 */

package com.volantis.map.ics.imageprocessor.servlet;

import com.volantis.synergetics.testtools.TestCaseAbstract;

import javax.media.jai.RenderedOp;

/**
 * Regression test for various problems fixed by JPEGConditioner 
 */
public class JPEGConditioningTestCase extends TestCaseAbstract {

    /**
     * VMS-330 This test reproduces the issues raised.
     *
     * Load JPEG files with APP1 and APP0 segments in the wrong order.
     * This situation should be picked up and fixed by JPEGConditioner.
     *
     * @throws Exception
     */
     public void testJpegWithAPP0AfterAPP1() throws Exception {
        doTestInputImage("cj24", "created_by_kooka.jpg");
     }

    /**
     * VMS-117 This test reproduces the issues raised.
     *
     * Load JPEG files with APP2 segment(s) and no APP0 JFIF segment,
     * generated by different devices
     * This situation should be picked up and fixed by JPEGConditioner.
     *
     * @throws Exception
     */
    public void testJpegWithAPP2AndNoAPP0() throws Exception {
       doTestInputImage("cj24", "created_by_kodak_dx750.jpg");
    }

    /**
     * VMS-420 This test reproduces the issues raised.
     *
     * Load JPEG files with APP0 JFXX segment before APP0 JFIF segment,
     * This situation should be picked up and fixed by JPEGConditioner.
     *
     * @throws Exception
     */
    public void testJpegWithJFXXWithoutJFIF() throws Exception {
       doTestInputImage("cj24", "jfxx_without_jfif.jpg");
    }


    /**
     * Load JPEG files with APP1 segment(s) and no APP0 JFIF segment,
     * generated by different devices
     *
     * These are properly handled by Sun library (don't require patching)
     * but since they don't start with APP0, they may trick JPEGConditioner,
     * so we test against them.
     *
     * @throws Exception
     */
    public void testJpegWithAPP1AndNoAPP0() throws Exception {
       doTestInputImage("cj24", "created_by_canon_eos_40d.jpg");
       doTestInputImage("cj24", "created_by_canon_powershot_a80.jpg");
       doTestInputImage("cj24", "created_by_nokia_6500s-1.jpg");
       doTestInputImage("cj24", "created_by_nokia_6680.jpg");
       doTestInputImage("cj24", "created_by_nokia_n70-1.jpg");
       doTestInputImage("cj24", "created_by_nokia_n95.jpg");
       doTestInputImage("cj24", "created_by_olympus_fe170.jpg");
       doTestInputImage("cj24", "created_by_se_550i.jpg");
    }

    /**
     * Utility method used to transcode and scale an image. The output image
     * format is specified by the supplied rule.
     *
     * @throws Exception
     */
    private void doTestInputImage(String rule, String file) throws Exception {
        
         RenderedOp image = TestUtilities.transcodeToImage(
             expectations,
             rule, file,
             new String[][]{{"v.width", "120"}},
             true);
     }
}
