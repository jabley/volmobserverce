/* ----------------------------------------------------------------------------
 * (c) Volantis Systems Ltd 2005. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

package com.volantis.testtools.mock.impl;

import com.volantis.testtools.mock.CompositeExpectation;
import com.volantis.testtools.mock.Event;
import com.volantis.testtools.mock.EventEffect;
import com.volantis.testtools.mock.Expectation;
import com.volantis.testtools.mock.ExpectationContainer;
import com.volantis.testtools.mock.expectations.Report;
import com.volantis.testtools.mock.impl.method.MethodInvocationEvent;
import com.volantis.testtools.mock.method.MethodAction;
import com.volantis.testtools.mock.method.MethodCall;
import com.volantis.testtools.mock.test.MockTestHelper;

import java.io.IOException;
import java.io.Writer;

/**
 * A class that adapts a {@link CompositeExpectation} to be a
 * {@link ExpectationContainer}.
 */
public abstract class AbstractCompositeExpectationContainer
        extends AbstractExpectation
        implements CompositeExpectation, ExpectationContainer {

    // Javadoc inherited.
    public Object doMethodCall(MethodCall methodCall)
            throws Throwable {

        try {
            MockTestHelper.insideFramework();
            checkExpectations(methodCall);
        } finally {
            MockTestHelper.outsideFramework();
        }

        // Perform the action here, rather than while processing events so
        // that the expectation will be satisfied before any additional
        // events are generated by this action.
        MethodAction action = ((MethodInvocationEvent) methodCall).getAction();
        if (action != null) {
            return action.perform(methodCall);
        }

        return null;
    }

    // Javadoc inherited.
    public void dump(Writer writer)
            throws IOException {
        Report report = new ReportImpl(writer);
        debug(report);
    }

    // Javadoc inherited.
    public void add(Expectation expectation) {
        addExpectation(expectation);
    }

    protected final EventEffect checkExpectationsImpl(ExpectationState state,
                                                      Event event,
                                                      Report report) {

        Expectation oldMarker = (Expectation) report.getMarker();

        final boolean opaqueContainer = opaqueContainer(oldMarker);
        if (opaqueContainer) {
            report.startExpectation();
            before(report);
            report.setMarker(this);
        }

        EventEffect effect = checkNestedExpectations(state, event, report);

        if (opaqueContainer) {
            report.setMarker(oldMarker);
            after(report);
            report.handleEventEffect(effect);
        }

        return effect;
    }

    /**
     * Check to see whether this container is opaque or transparent.
     *
     * <p>An opaque container is one whose presence has a visible impact on the
     * expectations to be satisfied. A transparent container on the other hand
     * is one that could be removed without affecting the expectations to be
     * satisfied.</p>
     *
     * @param container The container of this.
     *
     * @return True if the container is opaque and false otherwise.
     */
    protected abstract boolean opaqueContainer(Expectation container);

    protected abstract EventEffect checkNestedExpectations(
            ExpectationState state, Event event, Report report);

    /**
     * Update report before the nested expectations have been processed.
     *
     * @param report The report, will not be null.
     */
    protected abstract void before(Report report);

    /**
     * Update report after the nested expectations have been processed.
     *
     * @param report The report, will not be null.
     */
    protected abstract void after(Report report);
}

/*
 ===========================================================================
 Change History
 ===========================================================================
 $Log$

 11-Jul-05	8996/1	pduffin	VBM:2005071103 Enhanced mock generation to support methods defined on Object better

 08-Jul-05	8978/1	pduffin	VBM:2005070712 Further enhanced mock framework

 14-Jun-05	7997/11	pduffin	VBM:2005050324 Simplified internals of mock framework to make them easier to understand, and also as a consequence slightly more performant. Also added support for repeating groups of expectations in the same way as repeating individual expectations

 08-Jun-05	7997/8	pduffin	VBM:2005050324 Added basic styling implementation, enhancements to mock and ported tests that depended on dynamic mock to use the new generator

 26-May-05	7997/6	pduffin	VBM:2005050324 Committing enhancements to mock object framework

 25-May-05	7997/3	pduffin	VBM:2005050324 Committing enhancements to mock object framework

 25-May-05	7997/1	pduffin	VBM:2005050324 Committing enhancements to mock object framework

 26-May-05	7995/1	pduffin	VBM:2005050323 Committing results of super merge

 20-May-05	8277/1	pduffin	VBM:2005051704 Added support for automatically generating mock objects

 ===========================================================================
*/
